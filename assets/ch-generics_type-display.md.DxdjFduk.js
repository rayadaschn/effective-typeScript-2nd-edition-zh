import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const o=JSON.parse('{"title":"Item 56: Pay Attention to How Types Display","description":"","frontmatter":{},"headers":[],"relativePath":"ch-generics/type-display.md","filePath":"ch-generics/type-display.md"}'),p={name:"ch-generics/type-display.md"};function l(h,s,k,e,g,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="item-56-pay-attention-to-how-types-display" tabindex="-1">Item 56: Pay Attention to How Types Display <a class="header-anchor" href="#item-56-pay-attention-to-how-types-display" aria-label="Permalink to &quot;Item 56: Pay Attention to How Types Display&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>There are many valid ways to display the same type. Some are clearer than others.</li><li>TypeScript gives you some tools to control how types display, notably the <code>Resolve</code> generic. Make judicious use of this to clarify type display and hide implementation details.</li><li>Consider handling important special cases of generic types to improve type display.</li><li>Write tests for your generic types and their display to avoid regressions.</li><li>展示同一类型的方式有很多种，某些方式比其他方式更清晰。</li><li>TypeScript 提供了一些控制类型显示的工具，特别是 <code>Resolve</code> 泛型。要谨慎使用它来澄清类型显示并隐藏实现细节。</li><li>考虑处理泛型类型的重要特殊情况，以改善类型显示。</li><li>为你的泛型类型及其显示编写测试，以避免回归错误。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>通常，我们关心的是类型是什么，以及哪些值可以赋给它们。但当你在使用 TypeScript 库时，类型的显示方式会极大地影响你的使用体验。这意味着，作为库的作者，你需要关注你的类型是如何显示的。</p><p>对于任何类型，都有多种有效的显示方式。例如，联合类型通常会按照你列出的顺序显示其成员：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type T123 = &quot;1&quot; | &quot;2&quot; | &quot;3&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAKgjAJgMxQLxQORw1APphHfDJDAbgCgB6KqOgPQH4pRJZEV0AiOLvKLgj74uSLhSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但如果你之前引入了一个有重叠的联合类型，显示结果可能会不同：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T21</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type T21 = &quot;2&quot; | &quot;1&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T123</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type T123 = &quot;2&quot; | &quot;1&quot; | &quot;3&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAKgTARigXigcjmqAfdC0DcAUAPQlQUB6A-FKJLIilAERws6sItFH3QwEcAMzM0+Thiy40wwqXJVa-WENGo2HXC26cWwnkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>到底是 1, 2, 3 还是 2, 1, 3？它们其实是同一个类型的两种等价表示。在这个例子中，两者的可读性差不多，但有时不同表示方式的可读性差异会很大。</p><p>来看一个不太理想的类型显示例子。假设我们实现一个 PartiallyPartial 泛型，让对象的部分属性变为可选，其他属性保持必选。实现如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Omit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBACghgJ2ASzgGzSeTVoDwAqANFANJQQAewEAdgCYDOUA1hCAPYBmUBAfFAC8AKCixEKdHhjIAxi0IlSfAQDIoAeQC2yYIrJ8A3MKA" target="_blank" rel="noreferrer">💻 playground</a></p><p>实际使用时可能是这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BlogComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  commentId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  content</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartComment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BlogComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type PartComment =</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          Partial&lt;Pick&lt;BlogComment, &quot;title&quot;&gt;&gt; &amp;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          Omit&lt;BlogComment, &quot;title&quot;&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBACghgJ2ASzgGzSeTVoDwAqANFANJQQAewEAdgCYDOUA1hCAPYBmUBAfFAC8AKCixEKdHhjIAxi0IlSfAQDIoAeQC2yYIrJ8A3MOS0aCLnFnQAQmg4BzAMIctWusCgBvUVFmv3MwBJegAuKFoAVy0AIwgEYzEUYDQIcMZgBFMHRL8OMw90zOzjAF9hYVBIcSQXNw8hGskMLAlcPDtHOsDgEgByZNS+o2EAelGxKAA9AH4oKuhsYG6GkXHJjcml9pl5DvtnAI8SACJBiBOVKFUxic2N7V19rqOzU-PL4SA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个泛型类型实现是正确的，显示结果也是完全有效的。但对于查看 PartComment 的用户来说，这种显示方式还有提升空间：<code>title</code> 的类型是什么？它可以为 <code>null</code> 吗？<code>Omit</code> 后面还有哪些字段？整体看起来更像是实现细节，而不是最终类型的样子。</p><p>我们希望 TypeScript 能多做一步，把这些泛型类型&quot;解析&quot;出来。这里有个常用技巧可以做到这一点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Function</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKCA" target="_blank" rel="noreferrer">💻 playground</a></p><p>稍后我们会讲讲它的原理。先来看下如何使用它：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Omit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartComment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BlogComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type PartComment = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          title?: string | undefined;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          commentId: number;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          content: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAAVTIw5TZGQQcsr2auwAGihJMmzaKDkFZVwCT1gEFHQMeqrkMfYWGRa2nDwAMigAeSd2YDnxBf0i8Ghxxxc3AjKKidrxxsnrOyO-YFaAcjiEp5x9AHpPrygAPT4xQO53uJ0Iwj031+0N+rwgPFyqUotigAB8oMxqBBFNIINQvj8YdCfMd-EEQmFItFIYSiV4fP43Ij8jSiYUgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>通过用 Resolve 包裹泛型类型，我们神奇地让 TypeScript 展开并显示了所有属性。现在这个类型就清晰多了。更棒的是，所有实现细节都消失了。类型的使用者无需关心它是用 Partial、Pick 还是 Omit 实现的。</p><p>那么 Resolve 是如何工作的？如果忽略条件类型，剩下的表达式看起来像是对象类型的恒等式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dPSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>实际上，这确实能&quot;解析&quot;一些类型。因为它是同态映射类型（见第 15 条），所以原始类型会原样通过：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> S</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type S = string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> N</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type N = number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;A&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;B&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;C&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type U = &quot;A&quot; | &quot;B&quot; | &quot;C&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dIvBoAGUCMsrq-1qQDGTUylscfQB6Ba8oAD0+YsHh6bS+koA5YfKq6hq60Iio+b0llfWoTahDwgvIoz3oAFUj0dPxuoA5ABBAFQAA+UABllBEIB9gB11uXnuj2+hAARED0eCoOjLNiIej7Oi9EA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但对于函数类型，它并不是恒等式，这也是我们需要在 <code>Resolve</code> 里加条件类型保护的原因：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjIdentity</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type F = {}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dIvBoegIyyur-WpAMAApTELDIowBKAjxwxBQIU0ocfQB6Ha8oAD0+YoGh4UKgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个辅助类型在大量使用泛型类型的 TypeScript 代码中非常常见。Resolve 是我喜欢的命名方式，你也可能见到它被叫做 Simplify、NOP、NOOP 或 Merge Insertions。</p><p>你可以实现一个 DeepResolve，递归地解析对象类型，但通常不建议这样做，因为 Resolve 对类类型会过于激进：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type D = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        toLocaleString: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            (locales?: Intl.LocalesArgument,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             options?: Intl.DateTimeFormatOptions | undefined): string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            (): string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            (locales?: string | string[] | undefined,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             options?: Intl.DateTimeFormatOptions | undefined): string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        ... 42 more ...;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        [Symbol.toPrimitive]: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            ...;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        };</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dIvBoABECWAQUdAwB0wocfQB6Wa8oAD0+YsHh4T15xZ2oYEQAGUQWUwSAZTzKWyFN7d37gAobE4T4HiEA-2QAOiOXhAAgkZbGE3AAaLYLe73RBgDhcN4fL7fSYULDsVz0RBGJxTUpwziUOgAHygzGoEEU0gg1AAlLlUlc5lDoYsHvSoMlGelIaydk9jqcEO9OZdbFBSVy0qIVBKyTRKdTqBC7nyvLD4USRZ94iiphB0ZjsbjgPjNST5RSqZQaRypUzedDeqrdt83VAACwAJigTmx0Dd32ZrNEZxAERQ332AAVUk5aux0F1biy+YHg06MztCkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这里类型被内联反而适得其反。更好的做法是让这个类型直接显示为 Date。</p><p>你也可以用 <code>Resolve</code> 来内联 <code>keyof</code> 表达式，如果你觉得这样更清晰：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  g</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Chan</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type Chan = keyof Color</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ChanInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type ChanInline = &quot;r&quot; | &quot;g&quot; | &quot;b&quot; | &quot;a&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dA38oswsoRxsjESgjELDI6KhbKYionShwhZnl0zWoqF7i6HsAC1NuQjalYZREaL0AehuvKAA9Pj3ho5PW+XORq6LwffeAUoyGk0EIcCQaEwZ2UPyMOH0dwezygr0OxyBIMoYKgACIjLioAAfPG2Qkk3Hhcl40y4vRAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>有时你会希望某些特殊情况的类型显示得更简洁。对于 PartiallyPartial，当类型参数 <code>K</code> 为 <code>never</code>（即没有字段变为可选）时就是这样。用当前定义处理这个情况的结果如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FullComment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BlogComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type FullComment = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             title: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             commentId: number;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             content: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//           }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalTypes=true#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAHlwgCsgt3ZQbDxCMUlpKDkFZSw1Ik1dIvBoAAVTIw5TZGQQIZH2MewAGihJMmzaVvklIgbPWAQUdAwp0eQD9hYZecWcPAAyMqdai-Er-T6Sw8cXNwIoQ5nxyeGRww1jsHz8wAWAHI4glITh9AB6BFeKAAPT4xUGgLBX0aeiRKMJKJhEB4uVSlFsUAAPlBmNQIIppBBqIjkUTCT5Pv4giEwpFovj2RyvD5-G5yfkhRzCpiGIxxjj-N9fmMJqrjiCHL43AtKBB0EZ4dKvOioHKmIqdcq8QSRUSSZLKWz7USueDeVBQhEoi7XSixdlgE70ibXYUgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个结果是正确的，也是有效的显示方式。但其实有更简洁的表示：FullComment 就是 BlogComment。我们可以通过判断这种情况让类型更简洁：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extends</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // special case</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // extra conditional to preserve distribution over unions</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ?</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Omit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> never</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FullComment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartiallyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BlogComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">never</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type FullComment = BlogComment</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDOB7ANgNwgHgCoD4oF4osoIAPYCAOwBN4oAxAV0oGNgBLRSqAfiKgBcUAN4BtANJR23ANYQQiAGZEAukKwSVAXwDcAKGkUATooCGLaACFkiAOYBhRAFsnVYCL1QoLZ68rAASWohSkYnACMII30vDmBkCCF4YCNpWxjvLgp-JJS0-S09UEgoAAVTIw5TZGQQcsr2auwScipaKERwgCsINgAaKEkybPa5BWVcAk8oTRaRulFKCHQjFWm+YigAei2oeEgWRuRvU3gIafU5trpmGUpEAHdubd3ho1NMmnYOLmqoYEQUDARgQUXQUGo7GSqXCjB+3EQKygzE4lHg61gCBQ6Aw9SqyFx7BYMmwA3EODwADIoAB5JzfUmDCkXKBLFb6IrgaBMGqOFxuAhlCr42p4o4Yax2Pl+YADNlRHD6HZeKAAPT4xW5jF5vgFhElDl1-j0QA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为什么用元组包裹条件（<code>[K]</code> 而不是 <code>K</code>），以及为什么加上 <code>T extends unknown</code>，可以参考第 53 条的解释。加上这个特殊分支不会改变 PartiallyPartial 的行为，只是让它在某些情况下显示得更好看。</p><p>你可能还会见到其他调整类型显示的技巧，比如：</p><ul><li>用 <code>Exclude&lt;keyof T, never&gt;</code> 内联 <code>keyof</code> 表达式</li><li>用 <code>unknown &amp; T</code> 或 <code>{} &amp; T</code> 内联对象类型 这些都可以用 <code>Resolve</code> 替代，效果一样但更稳健。</li></ul><p>当你调整类型的显示方式时，要确保不会为了某种情况的可读性而牺牲了其他情况。由于这些操作很微妙且不会影响赋值兼容性，回归问题很容易被忽略。TypeScript 的新版本也可能影响类型的显示方式。因此，建立类型显示的测试体系非常重要。第 55 条会介绍如何做。</p>`,53)]))}const y=i(p,[["render",l]]);export{o as __pageData,y as default};
