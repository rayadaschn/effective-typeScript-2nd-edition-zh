import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.D53w8jfx.js";const c=JSON.parse('{"title":"第 19 条: 不同类型使用不同变量","description":"","frontmatter":{},"headers":[],"relativePath":"ch-inference/one-var-one-type.md","filePath":"ch-inference/one-var-one-type.md"}'),t={name:"ch-inference/one-var-one-type.md"};function e(l,s,h,r,k,d){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="第-19-条-不同类型使用不同变量" tabindex="-1">第 19 条: 不同类型使用不同变量 <a class="header-anchor" href="#第-19-条-不同类型使用不同变量" aria-label="Permalink to &quot;第 19 条: 不同类型使用不同变量&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>变量的值可以变，但它的类型基本是固定的。</li><li>别把不同类型的值塞进同一个变量里，这样人看得糊涂，TypeScript 也容易报错。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>在 JavaScript 里，把一个变量反复拿来装不同类型的值是没问题的，也常这么干：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12-34-56&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expects a string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">productId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProductBySerialNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Expects a number</span></span></code></pre></div><p>这在 TypeScript 中，你也可以这么做，但 TypeScript 会给你报错：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12-34-56&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">productId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~~~~~~ Type &#39;number&#39; is not assignable to type &#39;string&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProductBySerialNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                         ~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Argument of type &#39;string&#39; is not assignable to parameter of type &#39;number&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABMAplCALACgJzgExGgAoZ8AuRAZyhxjAHMBKRAbwF8AoUSWBZNJlwEiUAEIBPAMoo6AQwA2AORABbAEazSFRGDWacLDpwVpEABzyFoASXyIAvIgBEARgBMAWgDMAFk8ArABszgDc3ILYVqLEliK2+EzhnHHWUHaOiB5+weEA9HmIAH4lpYgAKhLmKIgA5HoasrWIMFS6cFCIclRUMAxgcuqmiFBwI1U1tTR0jLUR6FHx4tKyMIoqjTix0QlJnAWIh0fHJ6fHpRcl+4UAgjgMaihgnXDA49V10-QMza3tnd1ev1BsNRhY5Dg5Ko0LJEK93pMGgY5kA" target="_blank" rel="noreferrer">💻 playground</a></p><p>将鼠标悬停在编辑器里第一个 <code>productId</code> 上，你就能看出点端倪（见图 3-3）。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202505182134897.png" alt="Figure 3-3. The inferred type of productId is string."></p><p>根据值 <code>&quot;12-34-56&quot;</code>，TypeScript 推断出 <code>productId</code> 是个字符串（string）。 你不能把数字赋值给字符串类型的变量，所以才会报错。</p><p>这就引出了 TypeScript 中一个关键的概念：变量的值可以变，但它的<strong>类型一般不会变</strong>。 类型唯一比较常见的“变化”方式是<strong>收窄</strong>（详见第 22 条），也就是说类型变得更具体、更小，而不是扩展去包含更多种值。第 25 条有个比较特别的例外，但那是个例外，不是常规做法。</p><p>那该怎么改这个例子呢？ 要让 <code>productId</code> 的类型不变，就得一开始就设成一个能同时包含字符串和数字的类型——这正是联合类型（<code>string | number</code>）的用武之地。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> productId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12-34-56&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">productId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProductBySerialNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABMAplCALACgJzgExGgAoZ8AuRAZyhxjAHMBKRAbwF8AoUSWBZNJlwEiUAEIBPAMoo6AQwA2AORABbAEazSFRGDWacLDpwVpEABzyFoASR006jRAB9d+2YgC8iAEQBGACYAWgBmABYggFYANh8Abm5BbCtRYksRW3wmBM506yg7L0RA8Ji4xEQAekrEAHkAaUT0ZIzxaVkYRRUNLTzRO2yK6rrGoA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这样就不会报错了。有意思的是，TypeScript 能根据赋的值判断 <code>id</code> 的真实类型：第一次是字符串，第二次是数字。它自动把联合类型“收窄”成了具体的类型。</p><p>虽然联合类型能用，但它可能会带来更多麻烦。相比 <code>string</code> 或 <code>number</code> 这种单一类型，联合类型更难处理，因为你通常得先判断它到底是哪种类型，才能继续操作。</p><p>更好的做法是：干脆新建一个变量。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> productId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12-34-56&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> serial</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProductBySerialNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(serial) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABMAplCALACgJzgExGgAoZ8AuRAZyhxjAHMBKRAbwF8AoUSWBZNJlwEiUAEIBPAMoo6AQwA2AORABbAEazSFRGDWacLDpwgIaiAA55C0AJL5EAXkQAiAIwAmALQBmACxeAKwAbC4A3NyC2NaixFYidvhMESZmUNSyMIpOiJ7+IWGIiAD0xYgA8gDSkejRCeLSmYoqGlpUTQrJRaUV1UA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在之前的版本中，第一次和第二次用到的 <code>productId</code> 其实语义上没什么关系，只是你复用了同一个变量而已。这不仅会让 TypeScript 搞不清楚，也会让人看代码时一头雾水。</p><p>而使用两个变量的版本就好多了，原因有好几个：</p><ul><li>把两个不相关的概念（比如 ID 和序列号）拆开了，各管各的。</li><li>可以起更贴切的变量名，让人一眼看懂。</li><li>类型推断更精准，根本不需要写类型注解。</li><li>类型更简单，不用混用 <code>string | number</code>，直接是字符串或数字字面量。</li><li>可以用 <code>const</code> 声明变量，而不是 <code>let</code>，这让代码更容易理解，对类型检查器也更友好。</li></ul><p>这一整章反复强调的一个主题就是：<strong>变量的“变”会让类型检查器更难跟上你的思路</strong>。尽量避免会变类型的变量。如果你能用不同的名字代表不同的东西，不管是对人还是对 TypeScript，代码都会更清晰。</p><p>你写的 <code>const</code> 应该比 <code>let</code> 多得多。</p><p>不过这里说的不是“变量遮蔽”（shadowing），比如下面这种情况就另说：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> productId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12-34-56&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fetchProduct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> productId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123456</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  fetchProductBySerialNumber</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(productId) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABMAplCALACgJzgExGgAoZ8AuRAZyhxjAHMBKRAbwF8AoUSWBZNJlwEiUAEIBPAMoo6AQwA2AORABbAEazSFRGDWacLDpwgIaiAA55C0AJL5EAXkQAiAIwAmALQBmACxeAKwAbC4A3NyC2NaixFYidvhMEZysnIiIpmDm8TZQ9k6Inv4hYRkA9OWIAPIA0ukC6NEJ4tKyMIoqGlq5ovbJFVV1nFxAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然这两个 <code>productId</code> 名字一样，但其实是两个完全不相关的变量，类型不同也没问题，TypeScript 能分得清。但人就不一定了，看代码的人可能会觉得混乱。</p><p>一般来说，不同的概念最好用不同的名字。很多团队会用 linter（比如 ESLint 的 <code>no-shadow</code> 规则）来禁止这种变量“遮蔽”的写法。</p><p>本条讲的是标量值（像字符串、数字这些），但同样的道理也适用于对象。更多细节可以参考第 21 条。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>变量的值可以变，但它的类型基本是固定的。</li><li>别把不同类型的值塞进同一个变量里，这样人看得糊涂，TypeScript 也容易报错。</li></ul>`,34)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
