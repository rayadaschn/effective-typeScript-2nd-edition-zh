import{_ as i,c as a,o as p,ag as t}from"./chunks/framework.D53w8jfx.js";const d=JSON.parse('{"title":"第 1 条：理解 TypeScript 与 JavaScript 的关系","description":"","frontmatter":{},"headers":[],"relativePath":"ch-intro/ts-vs-js.md","filePath":"ch-intro/ts-vs-js.md"}'),n={name:"ch-intro/ts-vs-js.md"};function l(e,s,h,k,r,g){return p(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第-1-条-理解-typescript-与-javascript-的关系" tabindex="-1">第 1 条：理解 TypeScript 与 JavaScript 的关系 <a class="header-anchor" href="#第-1-条-理解-typescript-与-javascript-的关系" aria-label="Permalink to &quot;第 1 条：理解 TypeScript 与 JavaScript 的关系&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li><strong>TypeScript 是 JavaScript 的超集</strong>：所有 JavaScript 程序在语法上都是有效的 TypeScript 程序，但并非所有 TypeScript 程序都是有效的 JavaScript 程序。</li><li><strong>TypeScript 增加了一个静态类型系统</strong>，它模拟 JavaScript 的运行时行为，并尝试发现那些会在运行时抛出异常的代码。</li><li><strong>代码可以通过类型检查器，但仍然可能在运行时抛出异常</strong>。</li><li><strong>TypeScript 禁止一些合法但值得怀疑的 JavaScript 代码</strong>，例如使用错误数量的参数调用函数。</li><li><strong>类型注解会告诉 TypeScript 你的意图</strong>，并以此检测代码是否有误。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>如果你经常使用 TypeScript，你可能会听到 ”TypeScript 是 JavaScript 的超集”这样的说法。这是什么意思呢？TypeScript 和 JavaScript 之间的关系是什么？由于这两种语言紧密相连，深入理解它们之间的关系是高效使用 TypeScript 的基础。</p><p>如果说 A 是 B 的“超集”，意味着 B 中的所有内容也包含在 A 中。从语法的角度来看，TypeScript 是 JavaScript 的超集：只要你的 JavaScript 程序没有语法错误，那它也是一个 TypeScript 程序。(虽然很可能 TypeScript 的类型检查器也会标记出一些代码问题，但这是另一个问题) 。</p><p>虽然 TypeScript 文件使用 <code>.ts</code> 扩展名，而不是 JavaScript 文件的 <code>.js</code> 扩展名。但这并不意味着 TypeScript 是一门完全不同的语言！由于 TypeScript 是 JavaScript 的超集，你的 <code>.js</code> 代码就已经是&quot;合规&quot;的 TypeScript 代码了。完全可以将 <code>main.js</code> 重命名为 <code>main.ts</code> 并可以正常运行。</p><p>但反过来不行。有些 TypeScript 程序不是 JavaScript 程序。这是因为 TypeScript 为指定类型添加了额外的语法。(后面章节会介绍到)</p><p>举一个例子，这是一个正确的 Typescript 代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">who</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, who)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwE4FN1QBQHcAWcAXIgM5SoxjICUiA3gFCKIQKlwA26AdJ3MmwByABLpO-IQBpEBODQDcjAL6MgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但是你将其在 js 中运行时，会报错：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">who</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                  ^</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SyntaxError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Unexpected </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">token</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAxglmCeEC8EDkA7EB3C8D2ATgNbRzyoDcAUFHugM56gB0weA5gBSwLNh4BVAA5CQBKAEN6ITgEpZ1IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这是因为 <code>: string</code> 是 TypeScript 语法，JavaScript 不支持。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503221019504.png" alt="所有的 JavaScript 都是 TypeScript，但并非所有 TypeScript 都是 JavaScript"></p><p>从图中可以看出，所有的 JavaScript 都是 TypeScript，但并非所有 TypeScript 都是 JavaScript。</p><p>这并不是说 TypeScript 对 JavaScript 程序没有用，例如，以下这个 JavaScript 程序：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new york city&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(city.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAxglmCeEC8EDkA7EB3C8D2ATgNbRzyoDcAUFHugM56gB0weA5gBSwLNh4BVAA5CQBKAEN6ITgEpZ1IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你直接运行，它会抛出这样的一个错误：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TypeError</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: city.toUppercase is not a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span></span></code></pre></div><p>这是因为 JavaScript 中的字符串方法名称是 <code>toUpperCase</code>，而不是 <code>toUppercase</code>。如果你使用 TypeScript，你可以在编译时捕获这个错误，而不是在运行时：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> city </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;new york city&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(city.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUppercase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//               ~~~~~~~~~~~ Property &#39;toUppercase&#39; does not exist on type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                           &#39;string&#39;. Did you mean &#39;toUpperCase&#39;?</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAxglmCeEC8EDkA7EB3C8D2ATgNbRzyoDcAUFHugM56gB0weA5gBSwLNh4BVAA5CQBKAEN6ITgEpZ1APSKIqteo0A-bTt2aIABQJ5RBBGn7DTk6aggATPCHoR0eSCAAeMepDoQEUSplDVCw8LRfAhh0dlRmCAARGHtcPABXCABbEAl0C0ERMQBhKRBUAH4qIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>而在 Typescript 中你并不需要注明 <code>city</code> 的类型是 <code>string</code>，它会根据初始值自动推断出来。<strong>类型推断是 TypeScript 的一个关键特性</strong>，第 3 节中会讲到。</p><p>TypeScript 类型系统能够在<strong>不运行代码的前提下</strong>，检测出那些在运行时可能会抛出异常的代码。所以当你听到 TypeScript 被称为“静态”类型系统时，说的正是这种能力。</p><p>不过类型检查器无法百分之百发现所有会导致异常的代码。所以如果你的 ts 代码没有抛出异常，它也有可能不会按你期望的方式运行。TypeScript 也会尝试帮你捕捉到这类问题。例如，下面这个 JavaScript 程序：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alabama&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capital: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Montgomery&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alaska&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capital: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Juneau&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Arizona&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capital: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Phoenix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.capitol)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBNCGUCmEYF4YG0BQMYG8x4BbJALhgHIBBAG3gCMT5KAaGYeABwEsp5aFSgFlwUAOYhSAJwCelAL6tcBIqSF14EANYt2HbnwFCAUgFcwSeGcXK8hEuSrVpPAF7g9B3v0FUACgAWIEhgPAAetioA9NEwAHSJ2AC6ANzYAGYg0jAAFKCQsAjIMCAZcPzIEACUBCoFECC0SPG0IOK5xS2cPk3V6QrYQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然这个程序是合法的 JavaScript（因此也是合法的 TypeScript），并且它运行时没有抛出任何错误。但它显然没有实现你预期的效果。</p><p>即使你没有添加任何类型注解，TypeScript 的类型检查器仍然能够发现这个错误，并提供有用的建议。这正是 TypeScript 强大之处————它可以在你编译阶段就指出潜在问题，而不必等到运行时才发现。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.capitol)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~ Property &#39;capitol&#39; does not exist on type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        &#39;{ name: string; capital: string; }&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        Did you mean &#39;capital&#39;?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYDwDg9gTgLgBAbwL4G4BQBjCA7AzvfAQxmFzgF44BtNORbQgW2AC44ByAQQBtCAjJoXYAaOBkJgAljELc27ALI4YAcwjMoAT3ZJhtek1YcehXAGshosROmz5AKQCu2YIUc69dBA2bzOUSQAvHEtrKRk5DgAFAAsIYGxJEA99AHpUuAA6bLQAXXQAM2g4AAosPAIZEjgIArgiElwASkR9ctwIbmBM7ggVEobu8XDOpvQ6dLop6Zm6AD8Fxbm4KKgIMGBYTQ5h6U72OAATeLJsCHhQSXwa7DgYTQ20jNmX17p2BDgfI3wA7BUUGFbJFfpJ-oCkOxMk83rCZgARSSHOCaCCOODMQi3di7CLsAD8aCQaCAA" target="_blank" rel="noreferrer">💻 playground</a></p><blockquote><p>实际上，我们确实是想写带有字母 “a” 的 <code>capital</code>。州和国家都有首都（capital，带 “a”），而立法机关则在议会大厦（capitol，带 “o”）中召开。</p></blockquote><p>虽然即使你不提供类型注解，TypeScript 也能帮你发现一些错误，但如果你加上类型注解，它能做得更彻底、更精准。这是因为类型注解明确表达了你的<strong>意图</strong>，这样 TypeScript 就可以检查出代码运行后是否与你的预期相符。</p><p>比如说，如果你在之前的例子中反过来，把 <code>capital</code> 和 <code>capitol</code> 拼写搞错了会怎么样？（在定义时把正确的写成错误的）</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alabama&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Montgomery&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alaska&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Juneau&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Arizona&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Phoenix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.capital)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~ Property &#39;capital&#39; does not exist on type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        &#39;{ name: string; capitol: string; }&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        Did you mean &#39;capitol&#39;?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBNCGUCmEYF4YG0BQMYG8x4BbJALhgHIBBAG3gCMT5KAaGYeABwEsoRaFSgFlwUAOYhSAJwCelAL6tcBIqSF14EANYt2HbnwFCAUgFcwSeGcXK8hEuSrVpPAF7g9B3v0FUACgAWIEhgPAAetioA9NEwAHSJ2AC6ANzYAGYg0jAAFKCQsAjIMCAZcFCIKACUBCoFEAJI8bQg4rnFzZw+8LTV6XixeMMjo3gAfpNT4zD+0iBcSNJQslTdfL2UMAAmIahgILBI4TzQpWAwK4sxcWN393iU+DBqTtCuYOKp3kZ+7zyfb4KSjxG4PcGjAAiPG2MFkIDMMFI8AulHWvkoAH5sApsEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>之前那个看起来非常有帮助的错误提示，但现在却有问题！它将你的同一个属性拼成了两种不同的写法，而 TypeScript 并不知道哪个是正确的。虽然它会猜测，但这种猜测并不一定是准确的。</p><p>解决方法是：<strong>通过显式声明 <code>states</code> 的类型，明确表达你的意图</strong>，这样 TypeScript 就能准确理解你想要的结构，帮你检测到不一致的地方。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  capital</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alabama&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Montgomery&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alaska&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Juneau&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Arizona&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Phoenix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~ Object literal may only specify known properties,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        but &#39;capitol&#39; does not exist in type &#39;State&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                        Did you mean to write &#39;capital&#39;?</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> states) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.capital)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpjpZBvAUM5EOAWwgC5kBnMKUAcwG59kE4AHYDAGwutpEa4AvrgQB7ENSoZIlCukwQA2gF1kAXmRLm2IqQoByAIJc4AIxJwDAGhbtOYnsgMBZCWDpjSUAJ4Gh1swA9EEEYeERBAB+MbFROnrkziZwlADWVrZ2HGCOhgBSAK4gEHCF-oEEIZE1YXGxCSRJxrQAXhKZ2Q5OBgAKABZiECDAAB4VwaG1NfUxyADyZgBWEAhgyFyc0HBcyMRwPsgSXIeUbKvAMIdpIGIA7iDIbFBi51BgwBCUlcjV0--hMyFdYGVg5RwGZAAEyGlEIYnWEFGwCkoGQYB852cCkgBgAdJMAUTkAARYBQ5A+MSFPalR65ZB3WhYUH2bgGAD8hLxPNwKiYMDEUGQAApxJJ1tRFEcYNJFJQAJQ4ZjiyiOCB4rhiOgiqWQPFgzg7BVMERAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>现在，错误提示准确反映了问题，TypeScript 给出的修复建议也是正确的。通过明确表达你的意图，你不仅解决了当前的问题，也让 TypeScript 能够发现其他潜在的问题。</p><p>举个例子：如果你只在数组中的某一项拼错了一次 <code>capitol</code>，在没有类型注解的情况下，TypeScript 是无法发现这个错误的。但加上类型注解后，TypeScript 就能立刻提示你这个拼写不一致的问题，避免 bug 的产生。</p><p>比如说，如果你之前只是 <strong>在数组中的某一项</strong> 拼错了一次 <code>capitol</code>，在没有类型注解的情况下，TypeScript 并不会报错——因为它无法确定正确的属性结构。但一旦你添加了类型注解，TypeScript 就会立即发现这个拼写错误，因为它已经清楚地知道你期望的属性是什么。</p><p>这种显式声明类型的做法，大大增强了代码的可读性和可维护性，也让 TypeScript 的类型系统能够更有效地帮你发现隐藏问题。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> states</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alabama&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capital: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Montgomery&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alaska&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capitol: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Juneau&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                ~~~~~~~ Did you mean to write &#39;capital&#39;?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Arizona&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, capital: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Phoenix&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpjpZBvAUM5EOAWwgC5kBnMKUAcwG59kE4AHYDAGwutpEa4AvrgQB7ENSoZIlCukwQA2gF1kAXmRLm2IqQoByAIJc4AIxJwDAGhbtOcHsgMBZCWDpjSUAJ4Gh1jp65M4mcJQA1la2dhxgYk4GAFIAriAQcCn+gQQA9LkEhUXFBAB+5RWlyAAiwAAmyD5iKcikcCDI8cgA7rRYBqxxjgYA-EEkIca0AF4S0bEOiQAKABZiECDAAB7ZzPnIAHRHuCpMQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>待你你熟悉 TypeScript 的类型检查器之后，这种“动态”会变得非常熟悉：<strong>你提供给它的信息越多，它能帮你发现的问题就越多</strong>。</p><p>如果用维恩图（Venn Diagram）来表示，可以在“TypeScript 程序”这个集合中，新增一个子集：<strong>通过类型检查器检查的 TypeScript 程序</strong>。</p><p>这个子集里的程序，不仅是有效的 TypeScript 程序，同时也满足了类型系统的所有规则和检查条件。换句话说，它们更接近你真实的意图，运行时出错的风险也更低。TypeScript 的强大就在于，你越清晰地声明类型，类型系统就能帮你越多，给你更安全、更健壮的代码。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503221042095.png" alt="所有的 JavaScript 程序都是合法的 TypeScript 程序。但只有一部分 JavaScript（以及 TypeScript）程序能够通过类型检查器的检查。"></p><p>TypeScript 接受所有 JavaScript 语法，但它提供了额外的类型检查机制。虽然并不是所有符合语法的程序都能满足类型系统的要求，只有那些类型正确、符合预期的程序，才能顺利通过类型检查器。这也是 TypeScript 能够帮助你提前发现潜在错误的核心优势所在。</p><p>现在，如果你觉得“TypeScript 是 JavaScript 的超集”这句话听起来有点奇怪，可能是因为你在思考维恩图中的<strong>第三个集合</strong> ：<strong>能够通过类型检查器的 TypeScript 程序</strong>。</p><p>实际上，这个集合才是我们日常使用 TypeScript 时最关心的部分。通常情况下，我们在使用 TypeScript 时，都会尽量让自己的代码<strong>通过所有类型检查</strong>，以保持类型系统的不提示错误。</p><p>此外，虽然 TypeScript 的类型系统是<strong>对 JavaScript 运行时行为的一种检测</strong>，但它并不会改变 JavaScript 的运行机制。这对于一些拥有更严格运行时检查机制的语言（比如 Java 或 C#）的开发者来说，可能会有一些困惑。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const x: string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const y: string</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBAHjAvDATDA1DA5AZiwbhhgHpiYB5AaQChSiiA9AfhlEljgC4ZoAnASzABzam2gwAnkmwosGGDkIkyVWmXrNW4cRO59BIoA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这些语句虽然看起来有点可疑，但它们都能通过 TypeScript 的类型检查器。换做许多其他语言，这些写法可能会在运行时抛出错误。但 TypeScript 这样设计，是为了<strong>模拟了 JavaScript 的运行时行为</strong> ———— 在 JavaScript 中，这两种写法都会被隐式转换为字符串 <code>&quot;23&quot;</code>，并正常运行。</p><p>不过，TypeScript 并不是对所有 JavaScript 行为都无条件接受。它还是会在一些地方提示报错。即使某些代码在 JavaScript 运行时不会抛出异常，<strong>TypeScript 的类型检查器依然会对它们发出警告</strong>，例如下面这些写法：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 7</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Evaluates to 7 in JS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        ~~~~ The value &#39;null&#39; cannot be used here.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Evaluates to &#39;12&#39; in JS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        ~~~~~~~ Operator &#39;+&#39; cannot be applied to types ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;TypeScript&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// alerts &quot;Hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//             ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBAhjAvDMBXANumBqGB2AbhhgHoSYBRANznVTigFMIYoR8YBLMGAKQGUAUGWKjRAP0niYAFQAWjGDTqKA5GkyqYwOGDAhYAI0WoIjACYwFAJ0YA6QaEhGkMANoBdHDACMAJiJScmpaeiYWNhhVfy1uPiERMQkpKRgAeQAHRmsGEGso7C0dPQMYY3gMjPROC1Z2KABPLJY7VsFabKgAClUACUZMEFUAGiiZJsZ+YGtODKhVAEpAkQ7rKBYAIn7BjeFyJIOYFOPUigAPLOAmSwAGAFofeGsAc1QAW0YwddHDVFhn0p+QRAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 类型系统的核心原则是，它应该尽可能模拟 JavaScript 的运行时行为。然而，在上述所有情况下，TypeScript 认为这些不寻常的用法更可能会导致错误的结果，这并不是开发者的意图。因此，TypeScript 不仅仅局限于模拟运行时的行为，还会尽力帮助开发者发现潜在的问题。</p><p>我们在之前的 <code>capital</code> 和 <code>capitol</code> 例子中看到过另一个类似的例子。在那个程序中，代码并没有抛出异常（它只是打印了 <code>undefined</code>），但类型检查器仍然标记出了错误。这就是 TypeScript 的一个特点：它不仅仅依赖于程序是否会抛出异常来判断是否有问题，还会通过静态分析检查代码中可能的逻辑错误。</p><p>不过如果你喜欢使用上述 <code>null+7</code> 或 <code>[]+12</code> 这样的语法，或者在函数调用时传递多余的参数，那么 TypeScript 可能不太适合你！</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> names</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Alice&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Bob&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toUpperCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// TypeError: Cannot read properties of undefined (reading &#39;toUpperCase&#39;)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBGCGBbAphGBeGBtA5AQQBsBLYZHAGhhwCEQAjHAXQG4AoUSEA5AOgJADmACgQoIWAEyMeUEAFUADguQAnAMLwIyIQEodbIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>上述代码中，TypeScript 假设数组访问会在有效范围内进行，但实际上并没有。这导致了一个异常的发生。</p><p>此外，当你使用 <code>any</code> 类型时，未捕获的错误也经常会出现，这些异常的根本原因在于，TypeScript 对一个值的类型（静态类型）和其在运行时的实际类型理解发生了偏差。一个能够保证其静态类型准确性的类型系统被称为<strong>完善</strong>的类型系统。而 TypeScript 的类型系统<strong>并不是完善的</strong>，它也从未被设计成完善的。</p><p>如果类型系统的健全性对你来说很重要，你可能需要考虑其他语言，如 Reason、PureScript 或 Dart。这些语言确实提供了更多的运行时安全保障，但这也有其代价：你需要花更多的精力去确保你的代码是正确的，以让程序正常运行。而且这些语言都<strong>不是 JavaScript 的超集</strong>，所以从 JavaScript 迁移到这些语言将会更为复杂。</p><p>总结来说：</p><ul><li><strong>类型检查器允许 JavaScript 运行时能正常运行的隐式行为</strong>，如字符串拼接或类型转换。</li><li>但 <strong>它也会尽可能帮你发现那些虽然运行不报错，但存在潜在 bug 或不符合预期的代码</strong>。这正体现了 TypeScript 设计上的平衡 ———— 灵活但不放纵，严格但不死板。</li></ul><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li><strong>TypeScript 是 JavaScript 的超集</strong>：所有 JavaScript 程序在语法上都是有效的 TypeScript 程序，但并非所有 TypeScript 程序都是有效的 JavaScript 程序。</li><li><strong>TypeScript 增加了一个静态类型系统</strong>，它模拟 JavaScript 的运行时行为，并尝试发现那些会在运行时抛出异常的代码。</li><li><strong>代码可以通过类型检查器，但仍然可能在运行时抛出异常</strong>。</li><li><strong>TypeScript 禁止一些合法但值得怀疑的 JavaScript 代码</strong>，例如使用错误数量的参数调用函数。</li><li><strong>类型注解会告诉 TypeScript 你的意图</strong>，并以此检测代码是否有误。</li></ul>`,75)]))}const E=i(n,[["render",l]]);export{d as __pageData,E as default};
