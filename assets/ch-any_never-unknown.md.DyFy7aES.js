import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.D53w8jfx.js";const g=JSON.parse('{"title":"第 46 条：对于未知类型的值，使用 unknown 替代 any","description":"","frontmatter":{},"headers":[],"relativePath":"ch-any/never-unknown.md","filePath":"ch-any/never-unknown.md"}'),l={name:"ch-any/never-unknown.md"};function p(h,s,t,k,o,d){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="第-46-条-对于未知类型的值-使用-unknown-替代-any" tabindex="-1">第 46 条：对于未知类型的值，使用 <code>unknown</code> 替代 <code>any</code> <a class="header-anchor" href="#第-46-条-对于未知类型的值-使用-unknown-替代-any" aria-label="Permalink to &quot;第 46 条：对于未知类型的值，使用 \`unknown\` 替代 \`any\`&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li><code>unknown</code> 类型是 <code>any</code> 的类型安全替代品。当你知道有一个值，但不知道或不关心它的类型时，使用 <code>unknown</code>。</li><li>使用 <code>unknown</code> 强制用户进行类型断言或其他形式的类型收窄。</li><li>避免仅返回类型的参数，因为它们可能会带来虚假的安全感。</li><li>理解 <code>{}</code>、<code>object</code> 和 <code>unknown</code> 之间的区别。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>假设你想要编写一个 YAML 解析器（YAML 可以表示与 JSON 相同的值集合，但允许 JSON 语法的超集）。你的 <code>parseYAML</code> 方法的返回类型应该是什么？很容易想到使用 <code>any</code>（就像 <code>JSON.parse</code> 一样）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但这违背了第 43 条建议避免&quot;传染性&quot; <code>any</code> 类型的建议，特别是不要从函数中返回它们。（第 71 条将探讨如何&quot;修复&quot; <code>JSON.parse</code> 使其不返回 <code>any</code>。）</p><p>理想情况下，你希望用户立即将结果分配给另一个类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  author</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: Wuthering Heights</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  author: Emily Brontë</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsEQCEyIAEYJiQzxSYgAvCgYOAQkpAAGqcYMAOq2duHZiAAS2DBsdlCYGvkOTj5UMDR8segIUADXgt0cnkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但是，如果没有类型注解，<code>book</code> 变量会悄悄地获得 <code>any</code> 类型，在它被使用的任何地方都会阻止类型检查：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: Jane Eyre</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  author: Charlotte Brontë</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(book.title) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No error, logs &quot;undefined&quot; at runtime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No error, throws &quot;book is not a function&quot; at runtime</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsEQCEyIAEYJyQC8KBg4BCSkAAapxgwAUjwxSuRaGvkOTlJ2GDRwUGFx6AhQANeC7RyeFWCYcDTYAHTTbKS1SXuwULvrIt6+cIjhC+hWh5iIpuAAJtjArNgfLqgoJpwLB0oITolSAByLSoD5Qq5iCS3e7oR5WewLADur1MEMQMFeYBm1kQoEgsAQAKB6BBMDBQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>一个更安全的替代方案是让 <code>parseYAML</code> 返回 <code>unknown</code> 类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeParseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yaml)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeParseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: The Tenant of Wildfell Hall</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  author: Anne Brontë</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(book.title)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          ~~~~ &#39;book&#39; is of type &#39;unknown&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: &#39;book&#39; is of type &#39;unknown&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlghAITIgARgnJALw1dQ1Yky0ABqnGDAAqdjGn2EZgUIhwwIgA6jA0ACZ1NDSIABKoXxp8g4nIh8GAwDFYugEFAANeCA5zBZLOA0bAAOhocDYpDWSXRsCgaKR3hEZPJAD8qRTEAByPGJWmIGCYe6PKDkZAxWk9PqDWmCBmkUxaVBvUwkiRKdDQkH09ZMllsxAcrl03kDMACoA" target="_blank" rel="noreferrer">💻 playground</a></p><p>要理解 <code>unknown</code> 类型，从可赋值性的角度思考 <code>any</code> 是有帮助的。<code>any</code> 的力量和危险来自两个属性：</p><ul><li>所有类型都可以赋值给 <code>any</code> 类型。</li><li><code>any</code> 类型可以赋值给所有其他类型。</li></ul><p>如果我们&quot;将类型视为值的集合&quot;（第 7 条），第一个属性意味着 <code>any</code> 是所有其他类型的超类型，而第二个意味着它是子类型。这很奇怪！这意味着 <code>any</code> 不适合类型系统，因为一个集合不能同时是所有其他集合的子集和超集。这是 <code>any</code> 力量的来源，但也是它有问题的原因。由于类型检查器是基于集合的，使用 <code>any</code> 实际上禁用了它。</p><p><code>unknown</code> 类型是适合类型系统的 <code>any</code> 替代品。它具有第一个属性（任何类型都可以赋值给 <code>unknown</code>），但不具有第二个属性（<code>unknown</code> 只能赋值给 <code>unknown</code> 和，当然，<code>any</code>）。它被称为&quot;顶部&quot;类型，因为它位于类型层次结构的顶部。<code>never</code> 类型则相反：它具有第二个属性（可以赋值给任何其他类型），但不具有第一个属性（没有其他类型可以赋值给 <code>never</code>）。它被称为&quot;底部&quot;类型。</p><p>尝试访问 <code>unknown</code> 类型值的属性是错误的。尝试调用它或对其进行算术运算也是错误的。你几乎不能用 <code>unknown</code> 做任何事情，这正是重点。关于 <code>unknown</code> 类型的错误会鼓励你选择更具体的东西：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> book</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeParseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  name: Villette</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  author: Charlotte Brontë</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(book.title)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//               ~~~~~ Property &#39;title&#39; does not exist on type &#39;Book&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;read&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Error: This expression is not callable</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlghAITIgARgnJALw1dQ1Yky0ABqnGDABqMDQ02mEa+Q5OUnYYNHBQYXHoCFAA14IHHNZMHF1p5FmBMHArgA6F5sUhrJJQ2BQK5zQTeESYrHYgB+eLxiDkn2Q4SgfAA5MiruTEAATODYIF9KCIbAADxgy2qZJJiHJ8SS5MECMSpHJWlQtPJaO8SnQnweABU7JzWWzkFpMJh4EhVczEBBUJdUCsroIgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这些错误更合理。由于 <code>unknown</code> 不能赋值给其他类型，你需要类型断言。但这也是合适的：我们确实比 TypeScript 更了解结果对象的类型。</p><p>当你知道会有一个值，但你不知道或不关心它的类型时，<code>unknown</code> 是合适的。<code>parseYAML</code> 的结果就是一个例子，但还有其他例子。例如，在 GeoJSON 规范中，特征的 <code>properties</code> 属性是任何可 JSON 序列化内容的集合。所以 <code>unknown</code> 是有意义的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  geometry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Geometry</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  properties</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlIWBhEVExAOLYcOnMfPzBoeGR0YgAYtioozFCIjAAJgD8RVnsiAA+hiBUAEbhuYhsG1t0OQGOtNtogb9kOg4MhwrBsJhumBegMwPMgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你编写一个函数来检查数组是否少于 10 个元素，你并不特别关心元素的类型。所以 <code>unknown</code> 在这里也有意义：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isSmallArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlIWBhEVExAOLYcOnMfPzl4NDwSDCYKlSoNDT46Oio5KQYTprYqAAmCDR8PX2DANoAulxEAAjBI0Z5DEQjXRIB4AOjB7HsiAAPIgAIwABnmQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>正如你所看到的，你可以使用类型断言从 <code>unknown</code> 获得更具体的类型。但这不是唯一的方法。<code>instanceof</code> 检查也可以：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ^? (parameter) value: Date</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlIWBhEVExAOLYcOnMfPzl4NDwSMjocNGYmABqqDQg2KQAbte33WC9A2AcKSIwwIgPTzFWEweNE4L9-Kgwp8hCIRI8btgNCJvAA9AD8fzQ6GMS0+8OeiAhYQ0wWCQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你也可以使用用户定义的类型守卫：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> is</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Book</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;name&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;author&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> processValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isBook</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(value)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    value</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ^? (parameter) value: Book</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CrFDY6MCoENiIAEJwcADWAhpGVCaMzKxsniI29o4MTCzsnsGgkLAIjKjA2HIYOAQkFNT0mSWcDOCJYHAA7voaWjp6KI14RGSUtBxlIWBhEVExAOLYcOnMfPzl4NDwSDCY8UmkAG6oNCAZPX2DXIiX1zHHcQnJQiIjukikGiIRFByMgNsALlcbhxEABeOGIADkcAARgArbDQBGIABk2KekJiAEJ4WAQDQaDjsQDAQi0tgsax8S9KYj8g50AykM8bho5kFBBUDtVkOg4NFMJgAGoEiEvbpgXoDMDQr6IGDARCkY6nRKyqEq6nc7C5QHeAB6AH5NWh0MYltCjQwdRpgsEgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 需要相当多的证明来收窄 <code>unknown</code> 类型：为了避免 <code>in</code> 检查的错误，你首先必须证明 <code>val</code> 是一个对象类型并且它不是 <code>null</code>（因为 <code>typeof null === &#39;object&#39;</code>）。与任何用户定义的类型守卫一样，记住它不比类型断言更安全。没有什么检查你是否正确实现了守卫或保持它与你的类型同步。（第 74 条讨论了这个难题的解决方案。）</p><p>你有时会看到使用类型参数而不是 <code>unknown</code>。你可以这样声明 <code>safeParseYAML</code> 函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeParseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">yaml</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseYAML</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(yaml)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwIYCcDOBTAmgQQFkAZACgE9UBbAGwC5FMp0YwBzASgdTHMQG8AUIkQB6UYgDCAeUIAFAEoBRAMorhidNigh0SfojDVsDAESmANIlQgoACzjozpxAF8A3BvGIlAOQAigq6CoJCwCIyowNhyGDgEJAA8ACoAfBTU9IzMrJwMyQIaWjp6KHF4RGSUtBxyewUA" target="_blank" rel="noreferrer">💻 playground</a></p><p>然而，这在 TypeScript 中通常被认为是糟糕的风格。它看起来与类型断言不同，但它并不更安全，功能上是一样的。最好只是返回 <code>unknown</code> 并强制用户使用断言，或收窄到他们想要的类型。这是不必要使用泛型的一个常见例子，这是第 51 条的主题。</p><p><code>unknown</code> 也可以在&quot;双重断言&quot;中代替 <code>any</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> barAny </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> barUnk </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Bar</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGIHt3IN7JpgLmQGcwpQBzZAXwChRJZEUAhOKHZAI3aNPJBU6AEwgIANuxQJ0IUnkJpMAblriIYbuwCCIAJ7IAvAqxxiyOPovm2UVes08oAVRABrIyevIAru5DoAO4g3raqQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这些在功能上是等价的，但 <code>unknown</code> 版本防止了你和你的同事在看到 <code>as any</code> 时可能产生的本能反应。</p><p>最后，你可能会看到使用 <code>object</code> 或 <code>{}</code> 的代码，类似于本条目中描述的 <code>unknown</code> 的使用方式。它们也是宽泛的类型，但比 <code>unknown</code> 稍微窄一些：</p><ul><li><code>{}</code> 类型包含除 <code>null</code> 和 <code>undefined</code> 之外的所有值。</li><li><code>Object</code> 类型（大写&quot;O&quot;）几乎与 <code>{}</code> 相同。字符串、数字、布尔值和其他原始类型可以赋值给 <code>Object</code>。</li><li><code>object</code> 类型（小写&quot;o&quot;）包含所有非原始类型。这不包括 <code>true</code> 或 <code>12</code> 或 <code>&quot;foo&quot;</code>，但包括对象、数组和函数。</li></ul><p>你很少真的想要允许除 <code>null</code> 和 <code>undefined</code> 之外的任何值，所以 <code>unknown</code> 通常比 <code>{}</code> 或 <code>Object</code> 更可取。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li><code>unknown</code> 类型是 <code>any</code> 的类型安全替代品。当你知道有一个值，但不知道或不关心它的类型时，使用 <code>unknown</code>。</li><li>使用 <code>unknown</code> 强制用户进行类型断言或其他形式的类型收窄。</li><li>避免仅返回类型的参数，因为它们可能会带来虚假的安全感。</li><li>理解 <code>{}</code>、<code>object</code> 和 <code>unknown</code> 之间的区别。</li></ul>`,51)]))}const A=i(l,[["render",p]]);export{g as __pageData,A as default};
