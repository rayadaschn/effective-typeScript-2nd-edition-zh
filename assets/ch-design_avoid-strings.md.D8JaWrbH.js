import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const A=JSON.parse('{"title":"第 35 条: 使用更精确的替代方案代替字符串类型","description":"","frontmatter":{},"headers":[],"relativePath":"ch-design/avoid-strings.md","filePath":"ch-design/avoid-strings.md"}'),p={name:"ch-design/avoid-strings.md"};function h(e,s,l,k,g,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="第-35-条-使用更精确的替代方案代替字符串类型" tabindex="-1">第 35 条: 使用更精确的替代方案代替字符串类型 <a class="header-anchor" href="#第-35-条-使用更精确的替代方案代替字符串类型" aria-label="Permalink to &quot;第 35 条: 使用更精确的替代方案代替字符串类型&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>避免“stringly typed”（大量使用宽泛字符串）代码，尽量用更合适的类型，而不是让任何字符串都成为可能。</li><li>如果一个变量的取值域更准确地用字符串字面量联合类型表示，就优先用联合类型代替宽泛的 <code>string</code>，这样能让类型检查更严格，也让开发体验更好。</li><li>对于期望传入对象属性名的函数参数，优先用 <code>keyof T</code> 代替 <code>string</code>。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>还记得第 7 条提到的“类型的值域”吗？意思是某个类型可以接受的所有值的集合。比如 <code>string</code> 类型的值域非常大，&quot;x&quot; 和 &quot;y&quot; 属于它，但《白鲸记》整本书的文本（开头是 “Call me Ishmael...”，大约有 120 万个字符）也属于它。</p><p>所以当你声明一个 <code>string</code> 类型的变量时，你应该想一想：有没有更具体、更窄的类型会更合适？</p><p>比如你正在做一个音乐收藏系统，需要定义一个专辑（album）的类型，可以这样尝试：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  artist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  releaseDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // YYYY-MM-DD</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  recordingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // E.g., &quot;live&quot; or &quot;studio&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIIBsBGBXAtsgbwChlk4oxgBnMALmRqlAHMBuE5SsdCexl9qSgQecKhAAicSHzBMQbUgHolyAJoa1AWgCyOrRIkdhCAPZQAJiwAqATwAOvBnIHLVAUQB0zTwBpkAETowABuEAHI5oE02FamAUQAvkRAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>接口中大量使用 <code>string</code> 类型，以及用注释来补充类型信息（参考第 31 条），这两个信号都强烈说明这个接口设计可能不太合理。以下是可能出错的地方：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kindOfBlue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  artist: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Miles Davis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Kind of Blue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  releaseDate: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;August 17th, 1959&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Oops!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  recordingType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Studio&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Oops!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIIBsBGBXAtsgbwChlk4oxgBnMALmRqlAHMBuE5SsdCexl9qSgQecKhAAicSHzBMQbUgHolyAJoa1AWgCyOrRIkdhCAPZQAJiwAqATwAOvBnIHLVAUQB0zTwBpkAETowABuEAHI5oE02FamAUQAvkRmIDTIANagFgDyMABC6NhOGDj4ALyEHOSUNPQA5DrAPFTIUiHU9b4cXDwNANLZkTDIhcVdxiIQYpLSTvWo2MzY6QCMAOxgABb+qwCcAKx7XW7IOab2VACEk2aWNg7zAMpgscCmJ8gqZxfXSaynHL9IhAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>比如 <code>releaseDate</code> 字段的格式和注释里要求的不一样，而 <code>studio</code> 的值应该是小写，却写成了大写的 &#39;Studio&#39;。但因为它们都是字符串，这个对象依然可以赋值给 <code>Album</code> 类型，TypeScript 的类型检查器也不会报错。</p><p>即使对象本身是合法的 <code>Album</code>，这种宽泛的 <code>string</code> 类型也可能掩盖一些错误。比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> recordRelease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">recordRelease</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(kindOfBlue.releaseDate, kindOfBlue.title) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK, should be error</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIIBsBGBXAtsgbwChlk4oxgBnMALmRqlAHMBuE5SsdCexl9qSgQecKhAAicSHzBMQbUgHolyAJoa1AWgCyOrRIkdhCAPZQAJiwAqATwAOvBnIHLVAUQB0zTwBpkAETowABuEAHI5oE02FamAUQAvkRmIDTIANagFgDyMABC6NhOGDj4ALyEHOSUNPQA5DrAPFTIUiHU9b4cXDwNANLZkTDIhcVdxiIQYpLSTvWo2MzY6QCMAOxgABb+qwCcAKx7XW7IOab2VACEk2aWNg7zAMpgscCmJ8gqZxfXSaynHL9IgwbAgBCUUwgZAmcwWABKUxmAApek5+Ap-BY5rJ5MwAJSEL4AKmQnnJyGJqmSsMsiNE4mRWRAuQKRQgnmEDNmkH8zNZYw5aPxAK+qiB-ioW1M2HQFmQmBQ0Cg5iIQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在调用 <code>recordRelease</code> 时，两个参数的位置写反了，但因为它们都是字符串，类型检查器也不会报错。正因为这种情况经常发生，所以人们把这种大量依赖字符串的代码叫做 “stringly typed”。</p><p>你能否通过缩小类型范围来避免这类问题？比如说，虽然把整本《白鲸记》当作歌手名或专辑名有点夸张，但理论上是说得通的，所以 <code>artist</code> 和 <code>title</code> 字段使用 <code>string</code> 类型是合适的。</p><p>但是 <code>releaseDate</code> 字段最好用 <code>Date</code> 对象，这样可以避免格式错误的问题。</p><p>至于 <code>recordingType</code> 字段，可以定义成只有两个值的联合类型（你也可以用枚举类型，但我通常建议避免使用它；详见第 72 条）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecordingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;studio&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;live&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  artist</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  releaseDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  recordingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecordingType</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7cQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>通过这些修改，TypeScript 就能更严格地检查错误了。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kindOfBlue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  artist: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Miles Davis&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Kind of Blue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  releaseDate: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;1959-08-17&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  recordingType: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Studio&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ~~~~~~~~~~~~ Type &#39;&quot;Studio&quot;&#39; is not assignable to type &#39;RecordingType&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7cSJgUUADWWKgA8kIAQkyUFlBSsgrEyqrqmjqkALLo5mRQrqxaJAA0KlCm5rokANLJUIhCUJnZTS12Dk6eOZgQAO61bhAAFCQAjACcAKyrALQADAAcW8sA7CQAlM2qPiiheAQdAMpUNCTcAPSvUAB+3z+-31DhUgAIke1HQiCBdC0UEwiGAajIZHQ2EwImk5laiFaBFIwWu-gIL0iPCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这种做法的好处不只是类型检查更严格。</p><p>首先，显式地定义类型可以确保它的含义在传来传去的过程中不会丢失。比如你想找出某种特定录音类型（<code>recordingType</code>）的专辑，可能会写这样一个函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAlbumsOfType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">recordingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7cQpSY8JqImFDYEMBSsnJkAPJC4QAUPiiheASWwAY4AJS6GfIA2gC6SipQAPRtUADC2QCyAAowAKIAyiOtdlTIyU02HVBDAHLO3NHcQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>那调用这个函数的人怎么知道 <code>type</code> 应该传什么？虽然实际只支持 &#39;studio&#39; 或 &#39;live&#39;，但类型是 <code>string</code>，没法明确表达这个约束。而解释这些值含义的注释藏在 <code>Album</code> 类型的定义里，调用者可能根本不会去看。</p><p>其次，显式定义类型还能让你为它写文档（详见第 68 条），提升可读性和维护性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** What type of environment was this recording made in? */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecordingType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;live&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;studio&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PQKhAIHUAsEMBdzwJ4AcCm4D2Azc6A7ANwEsAnLAgW0MQHdYBnJaE5s9AYyzIBMSCAc3BVYvTAID84EMABQKDOABKXHvyEAVNJgC84AOQAbEkXQHwAH0ON4AV35YDAbjlA" target="_blank" rel="noreferrer">💻 playground</a></p><p>当你把 <code>getAlbumsOfType</code> 的参数类型从 <code>string</code> 改为 <code>RecordingType</code> 后，调用这个函数的人就可以点进去查看 <code>RecordingType</code> 的文档了（见图 4-1）。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506082202084.png" alt="图 4-1. Using a named type instead of string makes it possible to attach documen‐ tation to the type that is surfaced in your editor."></p><p>另一个常见的字符串误用场景是在函数参数中。</p><p>比如你想写一个函数，从一个对象数组中提取某个字段的所有值。Underscore 和 Ramda 这样的工具库把这个函数叫做 <code>pluck</code>。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">records</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[key])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwDYggawBQCcCmEcuAJgM4A0im+AngJSIDeAUIogVCLkgUaWQB0AWwCGyPIgC8APg4BtGrQC69ANwsAviyA" target="_blank" rel="noreferrer">💻 playground</a></p><p>那你该怎么给这个函数写类型呢？下面是一个最初的尝试：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[key])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwDYggawBQCcCmEcuAJgM4BciAhmAJ4DaAugDSKb51VlS4xgBzAJRVajJogDeAKESICUELiQEipMgDoAttWR5EAXgB88hhzpMhAbmkBfaUA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然这样写类型检查不会报错，但效果很差。特别是返回值的 any 类型，会带来很多问题（详见第 43 条）。</p><p>改进这个类型签名的第一步，是引入一个泛型类型参数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[key])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                      ~~~~~~ Element implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                             because type &#39;{}&#39; has no index signature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwDYggawDwBUB8AFAE4CmEcxAJgM4BciuA2gLoA0impAngzVMRhgA5gEoGAQzDdWiAN4AoRIjJQQxJGQrUaAOgC2E5CUQBefCqZduLUQG4liAPRPlb9x8-KAfr7+IAUVRSfVIwKEQYfTQYCBgoVG5EAAsJGkQpRAByKW4sxChuZFJHFy9yio8AI3IJEBpSAqLGrLkAX3zU9LA4SLAqUgAPRBoYYTAJNTIFNoUgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 现在会提示：<code>key</code> 的类型是 <code>string</code> 太宽泛了。而这个提示是对的 —— 如果你传入的是 <code>Album</code> 类型的数组，那 <code>key</code> 实际上只能是 <code>&quot;artist&quot;</code>、<code>&quot;title&quot;</code>、<code>&quot;releaseDate&quot;</code> 或 <code>&quot;recordingType&quot;</code>，而不是任意字符串。</p><p>这正是 <code>keyof Album</code> 类型要表达的意思 —— 它表示 <code>Album</code> 类型所有属性名组成的联合类型。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Album</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type K = keyof Album</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      (equivalent to &quot;artist&quot; | &quot;title&quot; | &quot;releaseDate&quot; | &quot;recordingType&quot;)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7coJBQANJQxADWECCIQlBSsnI8APR5qlAAegD8ULHQiSlpGVky8jEEsBBkiEzsADwwIgDuAHxJsH1QEAAeApioZFAAYpSY8JqImFDlPb1QuooA2olYUKnpmRsAukF9e6eRPJVQAMogmMAAFtUtbR0QnfH9+YWqMoVZqPZ5vIYAInUmgoEIYUAhpnMcMYELsDicnggKIRPhQoTwBAhvCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>所以解决办法就是把 <code>string</code> 替换成 <code>keyof T</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[key])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7cQpSY8JqImFBgTJTwANYAPLgAfAAUPiioZLq4ANoAugA0UBkQILr1IIhCULgAlEoqthBUyMlFaGQAdHIiYIVQhLm25c2VHVHcQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个版本可以通过类型检查，而且我们还让 TypeScript 自动推断返回类型。那么推断得怎么样呢？如果你在编辑器里把鼠标悬停在 <code>pluck</code> 上，看到的返回类型是：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">record</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][]</span></span></code></pre></div><p>这个类型表示：<code>T</code> 中任意字段的值组成的数组。换句话说，可能是 <code>T</code> 里任何字段的值类型。</p><p>但如果你只传入了一个确定的字符串作为 <code>key</code>，这个推断就太宽泛了。例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> releaseDates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;releaseDate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const releaseDates: (string | Date)[]</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAShDGB7ATgEwJYDsDmAVc0AvFAOQDOwArhoiVAD6kA26AbhCQNwBQ3WwEZADMAhvGgBBJgCNKAWygBvblCgjkwdBQBcUCsizYeqzcCYRd+w8ajII5kWQgAREQN2uBNu0jSH8kLpwvhg4ARA8AL7cQpSY8JqImFBgTJTwANYAPLgAfAAUPiioZLq4ANoAugA0UBkQILr1IIhCULgAlEoqthBUyMlFaGQAdHIiYIVQhLm25c2VHVHcqAhM6tDmwGoy8qVQUrJyVTxImBS9Dk6eEGTTKWmZ+SK7cmS1JHZXLm4cS9wAegBqlUAD0APxQM4XL4QRw-AT7fJWHAMKA3DpVbhAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>返回类型应该是 <code>Date[]</code>，而不是 <code>(string | Date)[]</code>。虽然 <code>keyof T</code> 比 <code>string</code> 要窄很多，但仍然不够精确。</p><p>要进一步缩小类型范围，我们需要引入第二个类型参数，这个参数是 <code>keyof T</code> 的子类型，通常是某个具体的属性名：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">records</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">][] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> records.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r[key])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwDYggawDwBUA0iA0ogKYAeUpYAJgM6KakCecwiuAfABQBOpEOL3oAuDgG0AuoSbMxRAJRjc4opKmIA3gChEiflBC8k-QcLoA6ALYBDZH0QBeTvvGzJCgNzaAvtqA" target="_blank" rel="noreferrer">💻 playground</a></p><p>现在类型签名就完全正确了。我们可以通过不同的调用方式来验证这一点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;releaseDate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const dates: Date[]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> artists</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;artist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const artists: string[]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> types</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;recordingType&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const types: RecordingType[]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> mix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">random</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;releaseDate&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;artist&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const mix: (string | Date)[]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> badDates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pluck</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(albums, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;recordingDate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                             ~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Argument of type &#39;&quot;recordingDate&quot;&#39; is not assignable to parameter of type ...</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABwDYggawDwBUA0iA0ogKYAeUpYAJgM6KakCecwiuAfABQBOpEOL3oAuDgG0AuoSbMxRAJRjc4opKmIA3gChEiflBC8k-QcLoA6ALYBDZH0QBeTvvGzJCgNzaAvtqjMyKSIAEoCQjQwYADmuIHBjogA5HSGkXBJiAA+yagwAG6kSd7aUVS8wDYQwQCCqABGIFZauog2vLCpYqm8UdHeerBQqKTdUL0xA-qkIzZ0pAAiNlRiS1RTphF9cUFiYWaRMTuk3n40AqjtwSNQbQ1NdGJ1jVZS3oJgqYg0y6QMiWgMJhuDZ7lY6IQkvxZvM1kUvNoAPSIvR6AB6AH5EB8vj8qI9EHCpNocbd2p0oP8UOgsCCwRDkuSYKkkgjkajEJjsQgvkzUgSen1iaTEAEglTAbTQS8GVDwsJtvFWd52aiuSKxX89vLDrF4sKebcrDByE5qUC6TLCABZZYACwsvBstDgVm4CkQ2EQAAYLABWRBYuUwxa-TJiJJ8qDKpEotVYkXG8hibiCmLZQm-BQGz63eo2GhwiU04HSh6QzYKmJwmOqjn1huN+sAP1bbfbHdjiBqvGiTWotzYoviyQARJXdXDR5lmYgwHAyXQ6DBomAbPURqK4Ch2jYrKRyogh5rEBYz9ogA" target="_blank" rel="noreferrer">💻 playground</a></p><p>语言服务还能根据 <code>Album</code> 的键提供自动补全功能（如图 4-2 所示）。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506082211155.png" alt="图 4-2.Using a parameter type of keyof Album instead of string results in better autocomplete in your editor."></p><p><code>string</code> 类型和 <code>any</code> 有些类似的问题：用得不恰当时，它允许无效的值出现，还会隐藏类型之间的关系。这会干扰类型检查器，掩盖真实的 bug。</p><p>TypeScript 能定义字符串的子集，这是给 JavaScript 代码带来类型安全的强大手段。使用更精确的类型，不仅能捕获错误，还能提升代码的可读性。</p><p>本条重点讲的是有限集合的字符串，但 TypeScript 也支持建模无限集合，比如所有以 &quot;http:&quot; 开头的字符串。这种情况可以用模板字面量类型，详见第 54 条。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>避免“stringly typed”（大量使用宽泛字符串）代码，尽量用更合适的类型，而不是让任何字符串都成为可能。</li><li>如果一个变量的取值域更准确地用字符串字面量联合类型表示，就优先用联合类型代替宽泛的 <code>string</code>，这样能让类型检查更严格，也让开发体验更好。</li><li>对于期望传入对象属性名的函数参数，优先用 <code>keyof T</code> 代替 <code>string</code>。</li></ul>`,73)]))}const o=i(p,[["render",h]]);export{A as __pageData,o as default};
