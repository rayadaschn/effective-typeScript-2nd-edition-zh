import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D53w8jfx.js";const g=JSON.parse(`{"title":"Item 69: Provide a Type for this in Callbacks if It's Part of Their API","description":"","frontmatter":{},"headers":[],"relativePath":"ch-declarations/this-in-callbacks.md","filePath":"ch-declarations/this-in-callbacks.md"}`),t={name:"ch-declarations/this-in-callbacks.md"};function l(p,s,e,k,d,E){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="item-69-provide-a-type-for-this-in-callbacks-if-it-s-part-of-their-api" tabindex="-1">Item 69: Provide a Type for this in Callbacks if It&#39;s Part of Their API <a class="header-anchor" href="#item-69-provide-a-type-for-this-in-callbacks-if-it-s-part-of-their-api" aria-label="Permalink to &quot;Item 69: Provide a Type for this in Callbacks if It&#39;s Part of Their API&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Understand how <code>this</code> binding works.</li><li>Provide a type for <code>this</code> in callbacks if it&#39;s part of your API.</li><li>Avoid dynamic <code>this</code> binding in new APIs.</li><li>理解 <code>this</code> 绑定是如何工作的。</li><li>如果 <code>this</code> 是你 API 的一部分，在回调中提供 <code>this</code> 的类型。</li><li>避免在新 API 中使用动态 <code>this</code> 绑定。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>JavaScript 的 <code>this</code> 关键字是该语言中最令人困惑的部分之一。与使用 <code>let</code> 或 <code>const</code> 声明的变量（它们是词法作用域的）不同，<code>this</code> 是动态作用域的：它的值不取决于它在代码中出现的位置，而是取决于你如何到达那里。</p><p><code>this</code> 最常用于类中，它通常引用对象的当前实例：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  logSquares</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.vals) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">c.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">logSquares</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDC0G8BQ1oDcwhgXmgbQEYAaaAJhIGYBdAbhWhAHsBzAZQEcBXMAJwFMIACgCUieqgBmjHtEHBGAOwgAXdJmiMJ0ZQAsAlhAB0GLKOSoL0eUsYg+hps0EnoAKldlhdSwF96fvyRrFStoXAU+AHc4ETpgBxYObn4hLyQgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这会输出：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1</span></span>
<span class="line"><span>4</span></span>
<span class="line"><span>9</span></span></code></pre></div><p>现在看看如果你尝试将 <code>logSquares</code> 放入变量并调用会发生什么：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.logSquares</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDC0G8BQ1oDcwhgXmgbQEYAaaAJhIGYBdAbhWhAHsBzAZQEcBXMAJwFMIACgCUieqgBmjHtEHBGAOwgAXdJmiMJ0ZQAsAlhAB0GLKOSoL0eUsYg+hps0EnoAKldlhdSwF96fv2sVK2hcBT4AdzgROiDVAFs+XUYAE1CrBxYObn4IOkTklJikIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个版本在运行时抛出错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>for (const val of this.vals) {</span></span>
<span class="line"><span>                           ^</span></span>
<span class="line"><span>TypeError: Cannot read properties of undefined (reading &#39;vals&#39;)</span></span></code></pre></div><p>问题在于 <code>c.logSquares()</code> 实际上做了两件事：它调用 <code>C.prototype.logSquares</code> 并将该函数中的 <code>this</code> 值绑定到 <code>c</code>。通过提取 <code>logSquares</code> 的引用，你已经分离了这些，<code>this</code> 被设置为 <code>undefined</code>。</p><p>JavaScript 让你完全控制 <code>this</code> 绑定。你可以使用 <code>call</code> 显式设置 <code>this</code> 并修复问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> C</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> method</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c.logSquares</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">method.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(c) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logs the squares again</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDC0G8BQ1oDcwhgXmgbQEYAaaAJhIGYBdAbhWhAHsBzAZQEcBXMAJwFMIACgCUieqgBmjHtEHBGAOwgAXdJmiMJ0ZQAsAlhAB0GLKOSoL0eUsYg+hps0EnoAKldlhdSwF96fv2sVK2hcBT4AdzgROiDVAFs+XUYAE1CrBxYObn4IOkTklMNgTBA5L1QAekroABkWGF0+aAguXgFoMGYwPQUkIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>没有理由说 <code>this</code> 必须绑定到 <code>C</code> 的实例。它可以绑定到任何东西。所以库可以，也确实将 <code>this</code> 的值作为其 API 的一部分。甚至 DOM 在事件处理程序中也会这样做，例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">querySelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;input&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;change&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logs the input element on which the event fired.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDC0G8BQ1oDcwhgXmgbQEYAaaAJhIGYBdAbhWhAHsBzAZQEcBXMAJwFMIACgCUieqgBmjHtEHBGAOwgAXdJmiMJ0ZQAsAlhAB0GLKOSoL0eUsYg+hps0EnoAKldlhdSwF96fvwATRmBOAFs+BWVDLj4eAE9WPjtgZWlBAHI9BQAHTmUM4QB+QzBAwIBRNEjlABkDZUi4zOAdMAVmPgySCU4FVL1FQT4zemsIW3tHQV0DL1QAegXoWpYYXT5obLzVZL4IqI0FaAB3fVbtHU2+asOJPX5AwyQfLyQgA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>this</code> 绑定经常出现在像这样的回调上下文中。如果你想在类中定义 <code>onClick</code> 处理程序，例如，你可能会尝试这样做：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Reset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Reset \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFsoBrEAIWQwzwAoAHGHOgZwC54BvDEADw3eYYYWVAHMANPDwBhCFjDF2NAJTwAvAD54ANxxZg8AL7L2u-QG4AUJCjNm8AEohmIDBSp5Ol+PDipQMCpePj5wGMgw+ESk7tSoNFy8-PAA5E4uGCmSMnIK7BgAFljMAHQ58sTGVj6G3lKoshVBHHU+UBAgMBg0AAbprvAAJFxFzIY9ytVGlrVAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>当用户点击按钮时，它会弹出 &quot;Reset undefined&quot;。糟糕！通常的罪魁祸首是 <code>this</code> 绑定。一个常见的解决方案是在构造函数中创建方法的绑定版本：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Reset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Reset \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFsoBrEAIWQwzwAoAHGHOgZwC54BvDEADw3eYYYWVAHMANPDwBhCFjDF2NAJTwAvAD54ANxxZg8AL7L2u-QG4AUJCjNm8AEohmIDBSp5Ol+PDB5BMMiYODAqXj4+GAAWWMwAdDJyCurw0bEJqLLyxHEARiLANGnMylY+ht7wcKigoaoclT5wGMgw+ESk7tSoNFy8-PAA5E4uGIOSidnsxRlZCsZlRpWTCmENEfBQECAwGDQABiOu8AAkXDHMhvullRUVQA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>onClick() { ... }</code> 定义在 <code>ResetButton.prototype</code> 上定义了一个属性。这由所有 <code>ResetButton</code> 实例共享。当你在构造函数中绑定 <code>this.onClick = ...</code> 时，它会在 <code>ResetButton</code> 实例上创建一个名为 <code>onClick</code> 的属性，并将 <code>this</code> 绑定到该实例。<code>onClick</code> 实例属性在查找序列中位于 <code>onClick</code> 原型属性之前，所以 <code>this.onClick</code> 在 <code>render()</code> 方法中引用绑定的函数。</p><p>有一个非常方便的 <code>this</code> 绑定简写：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Reset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Reset \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;this&quot; refers to the ResetButton instance.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;alwaysStrict=false&amp;moduleResolution=2&amp;module=99&amp;target=8#code/CYUwxgNghgTiAEAzArgOzAFwJYHtXwFsoBrEAIWQwzwAoAHGHOgZwC54BvDEADw3eYYYWVAHMANPDwBhCFjDF2NAJTwAvAD54ANxxZg8AL7L2u-QG4AUJCjNm8AEohmIDBSp5Ol+PDipQMCpePj5wGMgw+ESk7tSoNFy8-PAA5E4uGCmSMnIK7BgAFljMAHQ58sTGVj6G3lKoshXq8EGawSFQECAwGDQABumu8AAkXEXMhn3K5vAA9LPwAESFxYu+IIjd9tTwhQiDbpRx8CKCUOggJXW1tUA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这里我们用箭头函数替换了 <code>onClick</code>。这将在每次构造 <code>ResetButton</code> 时定义一个新函数，并将 <code>this</code> 设置为适当的值。查看生成的 JavaScript 是有启发性的：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ResetButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Reset \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;this&quot; refers to the ResetButton instance.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ text: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Reset&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.onClick })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEBKCmF4BcBCBXZyD2A7aA3gFDTTB4TIBO6wOVAFAJSEmnTIAWAlhAHR4AwiG7AA1tAC80ZlIB8rduzAh4VZAwAGCJMmgASAl14BfTUwDc0APTXoAImMR70KvABmamDg6d4cRBQMLDxoblxKMFxgeD42UhMLNhM2N1wAEzVZYiU3ZHQqfABbMDF4YJxcBgIOeAAPZAAuaAByHRQWgBpoIRFxZqcBXGFRCRNLZKIUoA" target="_blank" rel="noreferrer">💻 playground</a></p><p>那么这一切与 TypeScript 有什么关系呢？因为 <code>this</code> 绑定是 JavaScript 的一部分，TypeScript 会建模它。这意味着如果你正在编写（或类型化）一个在回调上设置 <code>this</code> 值的库，那么你也应该建模它。</p><p>你可以通过在回调中添加 <code>this</code> 参数来实现：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyboardEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keydown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> listener.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, e))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAQwCaoNIFMCeAZGAZyizCwCcAKAKEUSwBsAuRACQBUBZPAUQawC2pKABpaiBkRJlyLSlAAWRFh259BwkfRbYcAIzjJyqHgDdhASkQBeAHyJTcGKmpWA3uMYA6NCfNgoAmJSCkoAcgBrXFQ4AHcwMK0sG3tJYJkvCGQGBkpGJIsLAG5qAF9qIA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>this</code> 参数是特殊的：它不仅仅是另一个位置参数。如果你尝试用两个参数调用它，你可以看到这一点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyboardEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keydown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //           ~ Expected 1 arguments, but got 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAQwCaoNIFMCeAZGAZyizCwCcAKAKEUSwBsAuRACQBUBZPAUQawC2pKABpaiBkRJlyLSlAAWRFh259BwkfRbYcAIzjJyqHgDdhASkQBeAHyJTcGKmpWA3uMYA6NCfNgoAmJSCkoAcgBrXFQ4AHcwMK0sG3sPOjpJYJlKRiSLAG5xOgB6YvTy8oA-RB4ADwAHLGgsVEQARhRyAHMQIQDCLT0QKEQuuBGAJnEAXwLqaeogA" target="_blank" rel="noreferrer">💻 playground</a></p><p>更好的是，TypeScript 会强制你用正确的 <code>this</code> 上下文调用函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  listener</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> KeyboardEvent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  el.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addEventListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;keydown&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    listener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(e)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ~~~~~~~~ The &#39;this&#39; context of type &#39;void&#39; is not assignable</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //          to method&#39;s &#39;this&#39; of type &#39;HTMLElement&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAQwCaoNIFMCeAZGAZyizCwCcAKAKEUSwBsAuRACQBUBZPAUQawC2pKABpaiBkRJlyLSlAAWRFh259BwkfRbYcAIzjJyqHgDdhASkQBeAHyJTcGKmpWA3uMYA6NCfNgoAmJSCkoAcgBrXFQ4AHcwMK0sG3sPOjpJYJlKLAsAbnE6AHoixAA-CsqKxHYFZLDFIjDECAQSAA8oRDhgRCgcAAd6x2dmokQwOC7kQkIYAHMwZD1+QsQS9M30qDhEIUU4VDDCRAalQmaevsH61V5+IQCw8QBffOoX6iA" target="_blank" rel="noreferrer">💻 playground</a></p><p>作为这个函数的用户，你可以在回调中引用 <code>this</code> 并获得完整的类型安全：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.innerHTML)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //          ^? this: HTMLElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAQwCaoNIFMCeAZGAZyizCwCcAKAKEUSwBsAuRACQBUBZPAUQawC2pKABpaiBkRJlyLSlAAWRFh259BwkfRbYcAIzjJyqHgDdhASkQBeAHyJTcGKmpWA3uMYA6NCfNgoAmJSCkoAcgBrXFQ4AHcwMK0sG3sPOjpJYJlKLAsAbnE6AHoixAA-CsqKxHYFZLDFIjDECAQSAA8oRDhgRCgcAAd6x2dmokQwOC7kQkIYAHMwZD1+QsQS9M30qDhEIUU4VDDCRAalQmaevsH61V5+IQCw8QBffOoX6lQsCAYjZP4XUYKi49w0AQKvl0QWkoUYWlAkFgCBy7nErTAhDg-C8DDg83k5y8MDAMju72KpS2mwAegB+PrnEFqB7CD7vIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>当然，如果你在这里使用箭头函数，你会覆盖 <code>this</code> 的值。TypeScript 会捕获这个问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  registerHandler</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    addKeyListener</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(el, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">e</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.innerHTML)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //               ~~~~~~~~~ Property &#39;innerHTML&#39; does not exist on &#39;Foo&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAQwCaoNIFMCeAZGAZyizCwCcAKAKEUSwBsAuRACQBUBZPAUQawC2pKABpaiBkRJlyLSlAAWRFh259BwkfRbYcAIzjJyqHgDdhASkQBeAHyJTcGKmpWA3uMYA6NCfNgoAmJSCkoAcgBrXFQ4AHcwMK0sG3sPOjpJYJlKLAsAbnE6AHoixAA-CsqKxHYFZLDFIjDECAQSAA8oRDhgRCgcAAd6x2dmokQwOC7kQkIYAHMwZD1+QsQS9M30qDhEIUU4VDDCRAalQmaevsH61V5+IQCw8QBffOoX6ggGGZOAMTguzSiHIWHmUgorGQYFQ-CojBUXHuGgC7jWvl0QWkoUYSRSiGBm1aYEIcH4XgYcHm8nOXhgYBkd3eW3WpRZ7PKVSqiAACuQ4ENyP1TvTGUjmjEsCdJl0sO0pN0kGEAXBnps3gU6J9PkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>不要忘记 <code>this</code>！如果你在回调中设置 <code>this</code> 的值，那么它就是你的 API 的一部分，你应该在类型声明中包含它。</p><p>如果你正在设计一个新的 API，尽量不要使用动态 <code>this</code> 绑定。虽然它在历史上很流行，但它一直是混乱的根源，而箭头函数的普及使得这种 API 在现代 JavaScript 中使用起来更加困难。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>理解 <code>this</code> 绑定是如何工作的。</li><li>如果 <code>this</code> 是你 API 的一部分，在回调中提供 <code>this</code> 的类型。</li><li>避免在新 API 中使用动态 <code>this</code> 绑定。</li></ul>`,55)]))}const o=i(t,[["render",l]]);export{g as __pageData,o as default};
