import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const F=JSON.parse('{"title":"Item 78: 注意编译器性能","description":"","frontmatter":{},"headers":[],"relativePath":"ch-write-run/performance.md","filePath":"ch-write-run/performance.md"}'),p={name:"ch-write-run/performance.md"};function l(h,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="item-78-注意编译器性能" tabindex="-1">Item 78: 注意编译器性能 <a class="header-anchor" href="#item-78-注意编译器性能" aria-label="Permalink to &quot;Item 78: 注意编译器性能&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>TypeScript 性能问题有两种形式：构建性能（<code>tsc</code>）和编辑器延迟（<code>tsserver</code>）。识别每种问题的症状并相应地指导你的优化。</li><li>将类型检查与构建过程分开。</li><li>删除死代码和依赖项，警惕类型依赖中的代码膨胀。使用树形图可视化 TypeScript 正在编译的内容。</li><li>使用增量构建和项目引用来减少 <code>tsc</code> 在构建之间所做的工作。</li><li>简化你的类型：避免大型联合类型，使用 <code>interface</code> 扩展而不是交叉类型，并考虑为函数返回类型添加注解。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>正如 Item 3 所解释的，当你将代码编译为 JavaScript 时，TypeScript 类型会被擦除。因此，一般来说，TypeScript 对你的代码运行时性能没有影响。</p><p>然而，TypeScript 可能会影响你的开发工具的性能。TypeScript 带有两个可执行文件：<code>tsc</code> 和 <code>tsserver</code>（Item 6）。谈论两者的性能是有意义的：</p><p><strong>tsc，TypeScript 编译器</strong> 这里的性能慢意味着你的代码在批处理过程中（可能在你的 CI 系统上）进行类型检查需要更长时间，并且生成构建产物（.js 和 .d.ts 文件）需要更长时间。</p><p><strong>tsserver，TypeScript 语言服务</strong> 这里的性能慢意味着你的编辑器可能感觉迟钝或无响应。在你更改代码后，错误出现或消失可能需要令人沮丧的长时间。</p><p>如果构建或编辑器性能在你的项目中成为问题，有许多可用的技术可能会有所帮助。本条目将介绍几个最有影响力的技术。对于每一个，都会说明它影响哪种类型的性能。</p><h3 id="将类型检查与构建分开" tabindex="-1">将类型检查与构建分开 <a class="header-anchor" href="#将类型检查与构建分开" aria-label="Permalink to &quot;将类型检查与构建分开&quot;">​</a></h3><p>这只影响 <code>tsc</code>（构建）性能，不影响 <code>tsserver</code>（编辑器）。</p><p>在高层次上，TypeScript 做两件事：检查代码的类型错误并发出 JavaScript。类型检查通常是两者中 CPU 密集型的。如果你不需要类型检查，那么跳过这一步可以节省大量时间。</p><p>乍一看，这听起来像是一件奇怪的事情。类型检查不是使用 TypeScript 而不是 JavaScript 的全部意义吗？然而，在实践中，你可能通过其他工具间接运行 TypeScript，可能是打包工具（webpack、vite 等）或 ts-node。默认情况下，这些工具会类型检查你的代码，然后打包或运行生成的 JavaScript。但它们不需要这样做。你可以告诉它们中的任何一个以&quot;仅转译&quot;模式运行以跳过检查。</p><p>即使对于简单的程序，这也可能产生明显的差异：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// hello.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello World!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEAsFMBtoewHQBcDOAoAxnAdiu1IF4BzACgHIAJGeUAdTgCdoATAQnIEoBuNIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>以下是使用 ts-node 进行和不进行类型检查的运行速度：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --transpileOnly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ts-node</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --transpileOnly</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.12s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.02s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 110%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.123</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> time</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.ts</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> World!</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ts-node</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 1.60s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> user</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.08s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> system</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 255%</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> cpu</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.656</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> total</span></span></code></pre></div><p>这个简单的程序进行类型检查需要 1.6 秒，但不进行类型检查只需要 0.12 秒。如果 ts-node 或打包工具是你工具链的一部分，关闭类型检查可以显著缩短你的迭代周期并改善你的开发体验（DX）。你甚至可能能够插入替代的 TypeScript 编译器，如 swc，以获得更大的加速。</p><p>当然，类型检查仍然很重要！你在编辑器中开发代码时仍然会得到类型错误（通过 <code>tsserver</code>），你应该确保在 CI 服务上运行 <code>tsc</code> 以确保只提交通过类型检查器的代码。</p><h3 id="删除未使用的依赖项和死代码" tabindex="-1">删除未使用的依赖项和死代码 <a class="header-anchor" href="#删除未使用的依赖项和死代码" aria-label="Permalink to &quot;删除未使用的依赖项和死代码&quot;">​</a></h3><p>这影响构建和编辑器性能。</p><p>你拥有的代码越少，TypeScript 处理它的速度就越快。更少的类型和符号也意味着 <code>tsserver</code> 的 RAM 使用量更低，这将使你的编辑器更响应。</p><p>缩小项目的一个好方法是通过死代码消除。如果你设置 <code>noUnusedLocals</code> 标志，TypeScript 将检测一些未使用的代码和类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       ~~~ &#39;foo&#39; is declared but its value is never read.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;noUnusedLocals=true#code/GYVwdgxgLglg9mABMOcAUBKRBvAvgKAHpDFSzEA-KxAchThsRgGdEATAUwgBsBDAJw5tEAIxBQmUVgDde3EByaswHaR36JBvNgDp8+DgA8ADnH4TQkWAlEDMOAkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这对于未导出的符号效果很好。但导出的符号也可能是未使用的，如果它从未在任何地方被导入。要检测这一点，你需要一个更复杂的工具，如 knip。这也会报告未使用的第三方依赖项（例如，node modules）。删除这些可能是一个巨大的胜利，因为它们的类型声明可能有数万行。</p><p>事实上，你项目中的大部分类型可能来自第三方代码。你可以运行 <code>tsc --listFiles</code> 来获得进入你 TypeScript 项目的所有源的打印输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --listFiles</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./lib/node_modules/typescript/lib/lib.es5.d.ts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./lib/node_modules/typescript/lib/lib.es2015.d.ts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./lib/node_modules/typescript/lib/lib.es2016.d.ts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">..</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./lib/node_modules/typescript/lib/lib.es2017.d.ts</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">...</span></span></code></pre></div><p>结果可能会让你惊讶！有时一个依赖项可以拉入数百或数千个其他依赖项（Item 70 描述了一种避免这种情况的方法）。可视化这个的一个好方法是使用树形图。由于 <code>tsc</code> 在大型文件上花费的时间比小型文件多，你想要可视化正在编译的每个文件中的字节数。</p><p>这是神奇的咒语（stat 语法可能因你的平台而异）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --noEmit</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --listFiles</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> xargs</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> stat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -f</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;%z %N&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> webtreemap-cli</span></span></code></pre></div><p>对于作者的一个项目，结果看起来像图 9-8。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506240901002.png" alt="图 9-8. TypeScript 考虑的文件树形图，按文件大小加权。"></p><p>这是很多代码：接近 110 MB！而且大部分显然是 Google API？其中许多是 API（compute、dialogflow、dfareporting、healthcare），我的项目没有使用。事实证明，Google 将其所有 300+ 个 API 打包为一个包，重量达到令人印象深刻的 80.5 MB。我的项目只依赖一两个 API，但这种设计意味着它仍然拉入了所有三百个 API。</p><p>在这种情况下，更新到更新版本的 googleapis 解决了问题，因为它们添加了对仅依赖一个 API 的支持。如果依赖项特别大，你可能想要寻找替代方案。你可能还会注意到你正在拉入同一库的多个版本。解决方案是更新版本直到你的依赖项对齐（Item 66）。</p><p>无论你采取什么行动，树形图可视化都会让你更清楚地了解你正在构建什么，并让你嗅到潜在问题的气味。在查看我的树形图之前，我没有太多考虑我的项目对 googleapis 的使用。之后，我想不出其他什么了！</p><h3 id="增量构建和项目引用" tabindex="-1">增量构建和项目引用 <a class="header-anchor" href="#增量构建和项目引用" aria-label="Permalink to &quot;增量构建和项目引用&quot;">​</a></h3><p>这些只影响构建（<code>tsc</code>）性能。</p><p>如果你连续运行 <code>tsc</code> 两次，它会在第二次调用时重复所有工作。但如果你设置 <code>incremental</code> 选项，它会做一些更聪明的事情：在第一次调用时，它会写入一个 <code>.tsbuildinfo</code> 文件，保存它已完成的一些工作。在第二次调用时，它会读取该文件并使用它来更快地检查你的类型。</p><p>TypeScript 允许你通过&quot;项目引用&quot;将这种增量方法更进一步。这里的想法是，如果你的代码库有不同的部分（比如客户端/服务器或源代码/测试），那么对一部分的更改应该对另一部分有有限的影响。特别是，如果你更改源代码中函数的实现（但不是其类型签名），那么 TypeScript 不应该重新进行测试的类型检查。对测试的任何更改都不应该要求 TypeScript 重新进行源代码的类型检查。</p><p>要设置项目引用，你为仓库的每个不同部分创建一个 <code>tsconfig.json</code> 文件。这些文件说明它们可以引用代码的哪些其他部分。你的测试将引用你的源代码，但反之则不然。你通常还有一个顶级的 <code>tsconfig.json</code> 用于共享配置。设置可能看起来像这样：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>root</span></span>
<span class="line"><span>├── src</span></span>
<span class="line"><span>│ ├── fib.ts</span></span>
<span class="line"><span>│ └── tsconfig.json</span></span>
<span class="line"><span>├── test</span></span>
<span class="line"><span>│ ├── fib.test.ts</span></span>
<span class="line"><span>│ └── tsconfig.json</span></span>
<span class="line"><span>├── tsconfig-base.json</span></span>
<span class="line"><span>└── tsconfig.json</span></span></code></pre></div><p>这些文件看起来像这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig-base.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // other settings</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;declaration&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;composite&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;files&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [],</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;./test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../tsconfig-base.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../dist/src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// src/fib.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;noUnusedLocals=true#code/PTAEGcCcGNgMwJYCMB0AXcAoApgDwA4D2kaocArgHbRoKGVnIAUlAXKJeQLZLaQCU7Tjz6gA3plCgEcUC1AAeUACZ+4yVNCRsacpAaUA3BoC+G7bv2Mk8gLSgAjGoDU1uyv7GzQA" target="_blank" rel="noreferrer">💻 playground</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// test/tsconfig.json</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;extends&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../tsconfig-base.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;outDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../dist/test&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;rootDir&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;references&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;../src&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// test/fib.test.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { fib } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../src/fib&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">describe</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fib&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should handle base cases&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  it</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;should handle larger numbers&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fib</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">987</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;noUnusedLocals=true#code/PTAEBcFMGd2AzAlgIwHRVu6AoRBbABwHsAncUAbyWQF9R4Si9QByVVYaEgYwRRYDc2bABMY3EikgAKFtRYAaUNICUoALwA+StlChE4WdAAWRAK4AbEaGMBDAHYiLkUMlvQX3dzEXK1WnT09SAAPAkhuQ2ppAAYVFXQiAFEARzNbC1iVISDQUPDI6WiARnjE1PTM0pzQGhVhPQMjU0trO0dnUAtbEgBzSBJQezM8ZAHoX1UNbQpdIPyIqJRpACYy8GS0jOlqueCwxaLlgGZ1zcrV7L28g8LogBYziu3Tmv2CpeRpAFYnrczfm8bh8jl9igA2P4XACcAA4AOxXPR1IQo7BAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这是很多配置！以下是有趣的部分：</p><ul><li>src 和 test <code>tsconfig.json</code> 继承共享的基础配置，设置 <code>composite</code> 和 <code>declaration</code>（输出 .d.ts 文件）。</li><li>顶级 <code>tsconfig.json</code> 只包含对子项目的引用列表。</li><li>test <code>tsconfig.json</code> 引用 src，但反之则不然。</li></ul><p>有了这个设置，你可以使用 <code>-b / --build</code> 标志运行 <code>tsc</code>，使其充当一种构建协调器。在第一次运行后，如果你对 <code>src/fib.ts</code> 进行不影响 API 的更改，你会看到类似这样的内容：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tsc</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;src/tsconfig.json&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> out</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> of</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> because</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> output</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">&#39;dist/src/tsconfig.tsbuildinfo&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> older</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> than</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> input</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;src/fib.ts&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Building</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;src/tsconfig.json&#39;...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Project</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;test/tsconfig.json&#39;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> up</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> to</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> date</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> with</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .d.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> files</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> its</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dependencies</span></span></code></pre></div><p>最后一行是重要的。我们的更改没有影响 .d.ts 文件（这是一个实现更改，而不是 API 更改），所以测试项目不需要重建。</p><p>使用项目引用时需要注意几个注意事项：</p><ul><li>为了使它们有用，你必须设置 <code>declaration</code>，以便 <code>tsc</code> 在磁盘上输出 .d.ts 文件。如果你使用 <code>noEmit</code> 或通过 webpack、vite 或其他工具运行 <code>tsc</code>，那么项目引用不会帮助你。</li><li>项目引用在大型单体仓库中最有用。一般经验法则是，它们主要在你拥有比第三方代码更多的第一方代码时有用（即，你自己的代码行数比 node modules 中的多）。这对于中小型项目很少是这种情况，但在大公司中通常是这种情况。</li><li>虽然创建少量项目可以加速你与 TypeScript 的交互，但创建太多项目可能会产生相反的效果。尝试将项目范围限定为代码的大块。为 src 和 test，或 client 和 server 创建不同的项目，在大型应用程序上会是一个胜利。但为你的一千个 UI 组件中的每一个创建单独的项目将创建组织开销，不太可能改善 TypeScript 性能。</li></ul><h3 id="简化你的类型" tabindex="-1">简化你的类型 <a class="header-anchor" href="#简化你的类型" aria-label="Permalink to &quot;简化你的类型&quot;">​</a></h3><p>这影响构建和编辑器性能。</p><p>假设你想创建一个类型来表示年份。Item 29 鼓励你制作只能表示有效状态的类型，所以你制作了一个应该在本千年剩余时间里保持的类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Digit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;0&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;3&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;4&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;5&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;6&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;7&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;8&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;9&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`2\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Digit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Digit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Digit</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> validYear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;2024&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> invalidYear</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Year</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1999&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ~~~~~~~~~~~ Type &#39;&quot;1999&quot;&#39; is not assignable to type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                &#39;&quot;2000&quot; | &quot;2001&quot; | &quot;2002&quot; | ... 996 more ... | &quot;2999&quot;&#39;.</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;noUnusedLocals=true#code/C4TwDgpgBAIglgczsKBeKByADBqAfTARlwIwCYTMBmSjAFloFZaA2WgdloA5aBODANwAoUJCgBNCAEMATmigADMgBIA3vCTAAvmo3Id6xPoXCAxgHsAdgGcUANykAbOABNJsgFwTpc9OSxkDGZWtlBwlg7Obj5e7r5EvImCQgD0KVAZUAB+Obl5WVAAKuDQGABEhIm8Zbhw1lCW5ihS1taIllIARo7QwOZQohCp6ZmjY5nlZFjTZfhQZVNYhLMEC9NkK1AAdDtQiSxQALbmMtA7W3MLVTVbQkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然我们可以使用 TypeScript 的类型系统表示这个类型很有趣，但这可能不明智。错误提示了原因：Year 类型是一个有一千个元素的联合类型！每次 TypeScript 必须对这个类型做某事时，它都必须检查所有这些。这可能会使 <code>tsc</code> 和 <code>tsserver</code> 变得迟钝。最好使用更简单的东西，如字符串或数字，或者如果你想要明确地建模这个，甚至使用品牌类型（Item 64）。</p><p>这是一个极端的例子，但巨大的联合类型确实有时会出现，你应该意识到它们可能是性能问题。使你的类型更高效的其他方法包括：</p><ul><li>扩展接口而不是交叉类型别名。Item 13 详细讨论了 type 和 interface 之间的相似性和差异。通常它们是可互换的。但对于子类型化，TypeScript 能够更高效地与 extends 一起操作。</li><li>注解返回类型。Item 18 讨论了添加类型注解的利弊，但为函数的返回类型提供显式注解可以节省 TypeScript 推断类型的工作。</li></ul><p>如果你正在编写复杂的递归类型，你应该特别小心。Item 57 更详细地介绍了如何防止这些类型爆炸。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>TypeScript 性能问题有两种形式：构建性能（<code>tsc</code>）和编辑器延迟（<code>tsserver</code>）。识别每种问题的症状并相应地指导你的优化。</li><li>将类型检查与构建过程分开。</li><li>删除死代码和依赖项，警惕类型依赖中的代码膨胀。使用树形图可视化 TypeScript 正在编译的内容。</li><li>使用增量构建和项目引用来减少 <code>tsc</code> 在构建之间所做的工作。</li><li>简化你的类型：避免大型联合类型，使用 interface 扩展而不是交叉类型，并考虑为函数返回类型添加注解。</li></ul>`,66)]))}const g=i(p,[["render",l]]);export{F as __pageData,g as default};
