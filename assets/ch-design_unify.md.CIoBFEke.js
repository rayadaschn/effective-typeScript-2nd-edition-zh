import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const A=JSON.parse('{"title":"第 39 条：优先统一类型，而非细化类型差异","description":"","frontmatter":{},"headers":[],"relativePath":"ch-design/unify.md","filePath":"ch-design/unify.md"}'),e={name:"ch-design/unify.md"};function p(l,s,h,k,g,r){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="第-39-条-优先统一类型-而非细化类型差异" tabindex="-1">第 39 条：优先统一类型，而非细化类型差异 <a class="header-anchor" href="#第-39-条-优先统一类型-而非细化类型差异" aria-label="Permalink to &quot;第 39 条：优先统一类型，而非细化类型差异&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>拥有多个相似类型，会增加理解成本，还需要写很多转换逻辑。</li><li>如果两个类型只在细节上有区别，尽量去掉差异，统一成一个类型。</li><li>为了统一类型，可能需要调整一些运行时代码。</li><li>如果类型不在你掌控之内（比如数据库或 API），那就只能新建类型。</li><li>但如果两个类型本来就是不同的东西，就不要强行统一。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>TypeScript 的类型系统非常强大，能帮你在类型之间进行各种转换。第 15 条和第六章讲了很多这方面的技巧。一旦你意识到可以用类型系统来“类型转换”，你可能会产生一种冲动：太有趣了！各种类型玩出花来，感觉代码安全又酷炫！</p><p>但比起用类型系统去刻意区分两种类型，<strong>更好的办法是：干脆消除它们的差异</strong>。这样你就不需要写额外的类型转换逻辑，也不用费脑筋记住当前用的是哪个版本的类型。</p><p>举个例子，假设你有个接口 <code>StudentTable</code>，它是从数据库表生成的，而数据库一般用 <code>snake_case</code> 命名：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StudentTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  birth_date</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpgK4BMLgCpwBGANigN4BQyyMwUAzmAPohwC2EAXMo1KAOYBuKsmJxGLdlx5g+IISMJ0wACyZY4kbrwHCAvhSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>而在 TypeScript 代码里，通常我们喜欢用 <code>camelCase</code> 命名。于是你可能会定义另一个更“TS 风格”的版本：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  lastName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  birthDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpgK4BMLgCpwBGANigN4BQyyMwUAzmAPohwC2EAXMo1KAOYBuKsmJxGLdlx5g+IISMJ0wACyZY4kbrwHCAvhVCRYiFOmy4wyStVoMwAOSnbZukWMZOOLuQupKoVQARTWkdeX0KIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你甚至可以写个函数把这两个类型之间做转换，甚至还能用模板字面量类型自动生成另一个类型，比如这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ObjectToCamel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">StudentTable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type Student = {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        firstName: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        lastName: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        birthDate: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpgK4BMLgCpwBGANigN4BQyyMwUAzmAPohwC2EAXMo1KAOYBuKsmJxGLdlx5g+IISMJ0wACyZY4kbrwHCAvhTABPAA4o8AewDCU4gB5UyCAA9IILPRlz+APmQBeEWpHFzcPZAADABIyUBhoZAAJCDgsPSYYuISCYGI9CKDkAH5ImOTUvRibE2AwOGJgAC8IO0sbDnsc4h8ffMLuVGFjM2QAeUIAKwgEMDbbVqdXXHCLSemwP39kSmoAbQBpZFBkAGsIIwsYZDxkcWvrecOAMi8BHwBdbjwD94o9YRwCDEUBQMAwIBmwAsIGQqymM0sqFYZwAFM5uHAQEYAJQYrFDUwodDYXBgAJjNYIh4dByYHD4IikHzCAD0LOoyAAeiVhkS6aTyZQ2RyRTQ6IwAHJSbSyXQUYWi6hiSXS17yVnsxXIJRQVQAEU00h06vlmpFBiAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>效果惊艳！类型自动转换，好像很高级。</p><p>但很快你就会踩坑：当你把 <code>Student</code> 类型的对象传给需要 <code>StudentTable</code> 类型的函数时，会报错：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeStudentToDb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeRowToDb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(db, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;students&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, student)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                                 ~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Type &#39;Student&#39; is not assignable to parameter of type &#39;StudentTable&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpgK4BMLgCpwBGANigN4BQyyMwUAzmAPohwC2EAXMo1KAOYBuKsmJxGLdlx5g+IISMJ0wACyZY4kbrwHCAvhTABPAA4o8AewDCU4gB5UyCAA9IILPRlz+APmQBeEWpHFzcPZAADABIyUBhoZAAJCDgsPSYYuISCYGI9CKDkAH5ImOTUvRibE2AwOGJgAC8IO0sbDnsc4h8ffMLuVGFjM2QAeUIAKwgEMDbbVqdXXHCLSemwP39kSmoAbQBpZFBkAGsIIwsYZDxkcWvrecOAMi8BHwBdbjwD94o9YRwCDEUBQMAwIBmwAsIGQqymM0sqFYZwAFM5uHAQEYAJQYrFDUwodDYXBgAJjNYIh4dByYHD4IikHzCAD0LOoyAAeiVhkS6aTyZQ2RyRTQ6IwAHJSbSyXQUYWi6hiSXS17yVnsxXIJRQVQAEU00h06vlmpFBkBwNB4Mh0OQAHc+JAAEoWe2WPWEFFYQh4owAGmQdRIRtl8kDUDdA35DJDuOQAAVI2xgPQWgA3CzALDMigIaGMZA+8kgDDEYjCcRGCE0G1gKEwx21CDE+mzCyelGMEngaM9sDY7YiOD2uC1B1OiCu90dr0+wMAcm7bfoC8Dy9J2OE1AVWr3+61AD9jyfDyJhXhCcgF63SQujp4QBYyeJ6MB+KwQ0GLMgTHAoFIkBQLCVy8tet6xqQC4AHR-BQQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>错误提示可能不明显，但实际是你忘了调用那个转换函数了：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeStudentToDb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">student</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Student</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> writeRowToDb</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(db, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;students&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">objectToSnake</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(student)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMpgK4BMLgCpwBGANigN4BQyyMwUAzmAPohwC2EAXMo1KAOYBuKsmJxGLdlx5g+IISMJ0wACyZY4kbrwHCAvhTABPAA4o8AewDCU4gB5UyCAA9IILPRlz+APmQBeEWpHFzcPZAADABIyUBhoZAAJCDgsPSYYuISCYGI9CKDkAH5ImOTUvRibE2AwOGJgAC8IO0sbDnsc4h8ffMLuVGFjM2QAeUIAKwgEMDbbVqdXXHCLSemwP39kSmoAbQBpZFBkAGsIIwsYZDxkcWvrecOAMi8BHwBdbjwD94o9YRwCDEUBQMAwIBmwAsIGQqymM0sqFYZwAFM5uHAQEYAJQYrFDUwodDYXBgAJjNYIh4dByYHD4IikHzCAD0LOoyAAeiVhkS6aTyZQ2RyRTQ6IwAHJSbSyXQUYWi6hiSXS17yVnsxXIJRQVQAEU00h06vlmpFBkBwNB4Mh0OQAHc+JAAEoWe2WPWEFFYQh4owAGmQdRIRtl8kDUDdA35DJDuOQAAVI2xgPQWgA3CzALDMigIaGMZA+8kgDDEYjCcRGCE0G1gKEwx21CDE+mzCyelGMEngaM9sDY7YiOD2uC1B1OiCu90dr0+wMAcm7bfoC8DcPWiOREC7MYH2ME1GFFhOfwoQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然 TypeScript 能帮你提前发现这个错误，但如果你一开始就只有一个统一的 <code>Student</code> 类型，那这些问题根本不会出现。</p><p>那么你该保留哪个版本的 <code>Student</code> 呢？</p><ul><li><p><strong>保留 camelCase 的版本</strong>：你需要做一些适配工作，让数据库返回 camelCase 风格的数据。你用的类型生成工具也得支持这个转换。好处是所有的类型风格一致，看起来更统一。</p></li><li><p><strong>保留 snake_case 的版本</strong>：你啥都不用做，只需接受命名风格略显不统一，但整体类型更加统一。</p></li></ul><p>两种方式都行，但第二种 <strong>更简单直接</strong>。</p><p><strong>总结一句话：与其去区分两个类型的细微差异，不如直接把它们统一成一个类型。</strong></p><p>当然也有一些例外：</p><ul><li><p>如果你无法控制数据库或 API 返回的结构，那你只能通过类型转换来新建类型。这样至少能让你在写转换逻辑时更容易发现 bug。</p></li><li><p>千万别把本来就不一样的类型“统一”起来！比如用联合类型（tagged union）表示不同状态的对象时，每个状态都应该有自己独立的结构，不该强行合并。</p></li></ul><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>拥有多个相似类型，会增加理解成本，还需要写很多转换逻辑。</li><li>如果两个类型只在细节上有区别，尽量去掉差异，统一成一个类型。</li><li>为了统一类型，可能需要调整一些运行时代码。</li><li>如果类型不在你掌控之内（比如数据库或 API），那就只能新建类型。</li><li>但如果两个类型本来就是不同的东西，就不要强行统一。</li></ul>`,31)]))}const o=i(e,[["render",p]]);export{A as __pageData,o as default};
