import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const E=JSON.parse('{"title":"Item 60: Know How to Iterate Over Objects","description":"","frontmatter":{},"headers":[],"relativePath":"ch-recipes/iterate-objects.md","filePath":"ch-recipes/iterate-objects.md"}'),h={name:"ch-recipes/iterate-objects.md"};function p(e,s,l,k,r,g){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="item-60-know-how-to-iterate-over-objects" tabindex="-1">Item 60: Know How to Iterate Over Objects <a class="header-anchor" href="#item-60-know-how-to-iterate-over-objects" aria-label="Permalink to &quot;Item 60: Know How to Iterate Over Objects&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Be aware that any objects your function receives as parameters might have additional keys.</li><li>Use <code>Object.entries</code> to iterate over the keys and values of any object.</li><li>Use a ++for-in++ loop with an explicit type assertion to iterate objects when you know exactly what the keys will be.</li><li>Consider <code>Map</code> as an alternative to objects since it&#39;s easier to iterate over.</li><li>要注意函数接收的任何对象作为参数可能包含额外的键。</li><li>使用 <code>Object.entries</code> 来遍历任何对象的键和值。</li><li>当你确切知道对象的键时，使用 <code>for-in</code> 循环并进行显式的类型断言来遍历对象。</li><li>考虑使用 <code>Map</code> 作为对象的替代品，因为它更容易进行迭代。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>这段代码运行正常，但 TypeScript 却标记了一个错误。为什么？</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  one: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uno&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  two: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dos&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  three: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tres&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[k]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //        ~~~~~~ Element implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //               because type ... has no index signature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBCBGArGBeGBvAUDOYCmAXDAOQCuYIxANNjFAO4hHEAmIE1tUAFgE56ESUfhxoBfANyYAZiF4wAFKEiwA1jACWYOEgCUGWsugwAbqh2IA2qoC6UnAHoHOFy4B+HzzACiAGzwAtnhgsBoBAA6+GsAaUL4AnjDcAIYQMMnaxBnxxHTx4Xi0Tq4lpfB4wMmkEHh5BTAAdE1JqTAUmmAseAAeMBAaAOZgyVCk-JhimEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>检查 <code>obj</code> 和 <code>k</code> 符号会给出线索：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { one: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uno&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, two: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dos&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, three: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tres&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const obj: {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         one: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         two: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         three: string;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//       }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //       ^? const k: string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBCBGArGBeGBvOYCmAuGA5AK5ggEA0MUA7iPgQCYgQVUAWATtnoVFyzAC+AbgBQAenExpMAHoB+GKEiwEifOglSZOrD2gcAlmADmYybp006MA8bNbLMqJ2747p89t2DRAMxAOGAAKZWgYAGsYYzgkAEoMUWkLSwUlcHCI9z57JJgLADoi0V8gA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>k</code> 的类型是 <code>string</code>，但你试图索引一个类型只有三个特定键的对象：<code>&#39;one&#39;</code>、<code>&#39;two&#39;</code> 和 <code>&#39;three&#39;</code>。除了这三个之外还有其他字符串，所以这必须失败。</p><p>使用类型断言来获得 <code>k</code> 的更窄类型可以解决这个问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //    ^? const k: &quot;one&quot; | &quot;two&quot; | &quot;three&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[k] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBCBGArGBeGBvAUDOYCmAXDAOQCuYIxANNjFAO4hHEAmIE1tUAFgE56ESUfhxoBfANyYAZiF4wAFKEiwA1jACWYOEgCUGWsugwAbqh2IA2qoC6UnAHoHOFy4B+HzzACiAGzwAtnhgsBoBAA6+GsAaUL4AnjDcAIYQMMnaxBnxxHTx4Xi0Tq4lpfB4wMmkEHh5BTAAdE1JqTAUmmAseAAeMBAaAOZgyVCk-JhiMnKKRmoAysIdFvpYOLMw6miqC-KtqnjxINJ1eEcW9jDFLgB6APww66pEAETgeM8wAD4wzwwgH99fnwBM9DOBjGY0AgrLYJI5nAB5ADSE0wQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>所以真正的问题是：为什么在第一个例子中 <code>k</code> 的类型被推断为 <code>string</code> 而不是 <code>&quot;one&quot; | &quot;two&quot; | &quot;three&quot;</code>？</p><p>为了理解，让我们看一个稍微不同的例子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //       ^? const k: string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc[k]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //        ~~~~~~ Element implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //               because type &#39;ABC&#39; has no index signature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBCBGArGBeGBvAUDOYCmAXDAOQCuYIxANNjFAO4hHEAmIE1tUAFgE56ESUfhxoBfANyYAZiF4wAFKEiwA1jACWYOEgCUGWsugwAbqh2IA2qoC6UnAHoHOFy4B+HzzACiAGzwAtnhgsBoBAA6+GsAaUL4AnjDcAIYQMMnaxBnxxHTx4Xi0Tq4lpfB4wMmkEHh5BTAAdE1JqTAUmmAseAAeMBAaAOZgyVCk-JhimFpQeLzSycC1AIIAQgDCBjjJRNC8WgP2MPA7wvuHwERgpAHlvFKTMuTAUBrgMLIgCsnwFzCra-osDhZPIlOBjOotOkfoDaI5nKUAHoAfhgRjUJz2YAGcLR4NgZjQ32A1jsuOKpRgni8fkCwVCESiMTiiRSaQyJGyuSg+UKrgplLKFSqNTqtWI-1ybLaIA6XV6-SGIzGfJgk0mQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这是和之前一样的错误。你可以使用相同类型的类型断言来&quot;修复&quot;它（<code>k as keyof ABC</code>）。但在这种情况下，TypeScript 的抱怨是正确的。原因如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { a: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, c: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, d: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBCBGArGBeGBvAUDOYCmAXDAOQCuYIxANNjFAO4hHEAmIE1tUAFgE56ESUfhxoBfANyYAZiF4wAFKEiwA1jACWYOEgCUGWsugwAbqh2IA2qoC6UnAHoHOFy4B+HzzACiAGzwAtnhgsBoBAA6+GsAaUL4AnjDcAIYQMMnaxBnxxHTx4Xi0Tq4lpfB4wMmkEHh5BTAAdE1JqTAUmmAseAAeMBAaAOZgyVCk-JhimFpQeLzSycC1AIIAQgDCBjjJRNC8WgP2MPA7wvuHwERgpAHlvFKTMuTAUBrgMLIgCsnwFzCra-osDhZPIlOBjOotOkfoDaI5nKUAHoAfhgRjUJz2YAGcLR4NgZjQ32A1jsuOKpRgni8fkCwVCESiMTiiRSaQyJGyuSg+UKrgplLKFSqNTqtWI-1ybLaIA6XV6-SGIzGfJgk0m6JgvTQ6G2nOoR2Y8ANvwATFQYCxLnh6DAACIjPAKXSSGQgT7dXQSeEwADyAGlMEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>函数 <code>foo</code> 可以用任何可赋值给 <code>ABC</code> 的值调用，而不仅仅是具有 <code>&#39;a&#39;</code>、<code>&#39;b&#39;</code> 和 <code>&#39;c&#39;</code> 属性的值。完全有可能该值还有其他属性（参见 Item 4 了解原因）。为了允许这种情况，TypeScript 给 <code>k</code> 它唯一能确定的类型，即 <code>string</code>。</p><p>使用类型断言到 <code>keyof ABC</code> 在这里还有另一个缺点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //  ^? let k: keyof ABC (equivalent to &quot;a&quot; | &quot;b&quot; | &quot;c&quot;)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc[k]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    ^? const v: string | number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIICEDCyDeAoZZOALmQGcwpQBzAbgOQCNSKqQ6GFSQBXAW0bR6AXzwweIBGGAB7EMhgyZACjiMuaLAEpcDRVGTKEcisgDaAawA0yAG4BdZDJjIA8owBWEKQDoI4KggyVXUtHXxCQgB6KMi45AA9AH5kYxBTCxZKGgZCNLIZABsIH0KZamVbLXo4mPj45NSTMDtSOBAATwZRUSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果 <code>&quot;a&quot; | &quot;b&quot; | &quot;c&quot;</code> 对 <code>k</code> 来说太窄，那么 <code>string | number</code> 对 <code>v</code> 来说肯定也太窄。在前面的例子中，其中一个值是 <code>Date</code>，但它可能是任何东西。这可能导致运行时的混乱。正如 Item 9 所解释的，类型断言应该总是让你紧张，因为 TypeScript 可能发现了什么。（令人惊讶的是，TypeScript 会让你在这个 for-in 循环上方声明 <code>let k: keyof ABC</code> 并使用 <code>k</code> 作为迭代器，但这并不比类型断言更安全，而且不够明确。）</p><p>那么如果你只想遍历对象的键和值而不出现类型错误怎么办？<code>Object.entries</code> 让你可以同时遍历两者：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(abc)) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //        ^? const k: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //          ^? const v: any</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIICEDCyDeAoZZOALmQGcwpQBzAbgOQCNSKqQ6GFSQBXAW0bR6AXzwweIBGGAB7EMhgyZACjiMuaLAEpcDRVGTKEcisgDaAawA0yAG4BdZDJjIA8owBWEKQDoI4KggyVXUtHXxCQgB6KMi45AA9AH5kYxBTCxZKGgZCNLIZABsIH0KZamVbLXo4mPj45NSTMDtSOBAATwZRUSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然这些类型可能很难处理，但它们至少是诚实的！</p><p>TypeScript 在 for-in 循环中推断 <code>string</code> 的另一个原因是原型污染。这是一个安全问题，其中定义在 <code>Object.prototype</code> 上的属性被所有其他对象继承。这些继承的属性将被 for-in 循环枚举，所以 <code>string</code> 是一个更安全的选择。（<code>Object.entries</code> 排除了继承的属性。）</p><p>获得更精确类型的安全方法是明确列出你感兴趣的键：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">abc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ABC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;a&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //       ^? const k: &quot;a&quot; | &quot;b&quot; | &quot;c&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> abc[k]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    ^? const v: string | number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIICEDCyDeAoZZOALmQGcwpQBzAbgOQCNSKqQ6GFSQBXAW0bR6AXzwweIBGGAB7EMhgyZACjiMuaLAEpcnORWQBrCAE8yyALzIA2gHI4tgDTJbjJy4S2AukXMJ9YPSEilDIyv4gBobIMjBGpmQ6+ISEAPSpKZkAegD8yBFRpABEcEXIAD7IRYxllUUIRQyEBWDIAG6WROrWhl5BKenZeS3tLJQ0Fci8AtAMoqJAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你的意图是覆盖 <code>ABC</code> 中的所有键，你需要某种方式来保持键数组与类型同步。</p><p>虽然遍历对象有很多危险，但遍历 <code>Map</code> 则没有：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> m</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  ^? const m: Map&lt;string, string&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;one&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;uno&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;two&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dos&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;three&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;tres&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">k</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> m.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //        ^? const k: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //          ^? const v: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgIICEDCyDeAoZZOALmQGcwpQBzAbgOQCNSKqQ6GFSQBXAW0bR6AXzwIA9iArI+yALzIQEAO7IAsnAAOACgDaDAPQHCAPQD8yCVLAzSGzQB5WNADTlKNAHwNdAckkQvm6+PCDivgC6Lj6+YMrhwQAm4mSR0YR+YAAWUBCBwZQQqVF4EQCU9DDiUMjaVtK6ANZuAG4RyOIwMgB0EOBURdplZbiGxoQTphb1No0sHuyckmTiADYQ3avi1NotFWOTh8jmlss2LfNs1HiiQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>Map 更容易遍历，因为它们没有与对象相同的结构行为：你永远不会在不使用类型断言或通过 <code>any</code> 类型的情况下在 <code>Map&lt;string, string&gt;</code> 中放入数字值。但如果你的数据来自 JSON 或已经设计为使用对象的另一个 API，它们可能不太方便使用。Item 16 有一个例子，说明如何用 Map 替换对象类型可以提高代码的类型安全性。</p><p>如果你想遍历不可变对象中的键和值，你可以在 for-in 循环中对键使用显式类型断言。要安全地遍历可能具有额外属性的对象，请使用 <code>Object.entries</code>。它总是安全的，尽管键和值类型更难处理。并考虑 Map 是否可能是合适的替代方案。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>要注意函数接收的任何对象作为参数可能包含额外的键。</li><li>使用 <code>Object.entries</code> 来遍历任何对象的键和值。</li><li>当你确切知道对象的键时，使用 <code>for-in</code> 循环并进行显式的类型断言来遍历对象。</li><li>考虑使用 <code>Map</code> 作为对象的替代品，因为它更容易进行迭代。</li></ul>`,42)]))}const o=i(h,[["render",p]]);export{E as __pageData,o as default};
