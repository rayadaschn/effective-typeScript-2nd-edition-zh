import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const y=JSON.parse('{"title":"Item 50: Think of Generics as Functions Between Types","description":"","frontmatter":{},"headers":[],"relativePath":"ch-generics/functions-on-types.md","filePath":"ch-generics/functions-on-types.md"}'),h={name:"ch-generics/functions-on-types.md"};function p(k,s,l,e,g,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="item-50-think-of-generics-as-functions-between-types" tabindex="-1">Item 50: Think of Generics as Functions Between Types <a class="header-anchor" href="#item-50-think-of-generics-as-functions-between-types" aria-label="Permalink to &quot;Item 50: Think of Generics as Functions Between Types&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Think of generic types as functions between types.</li><li>Use <code>extends</code> to constrain the domain of type parameters, just as you&#39;d use a type annotation to constrain a function parameter.</li><li>Choose type parameter names that increase the legibility of your code, and write TSDoc for them.</li><li>Think of generic functions and classes as conceptually defining generic types that are conducive to type inference.</li><li>把泛型类型看作是类型之间的函数。</li><li>使用 <code>extends</code> 来约束类型参数的领域，就像你用类型注解来约束函数参数一样。</li><li>选择能增加代码可读性的类型参数名称，并为它们编写 TSDoc 文档。</li><li>把泛型函数和类看作是概念上定义了有利于类型推断的泛型类型。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>Item 15 展示了如何使用类型操作（extends、映射类型、索引、keyof）来减少相关类型之间的重复。在值层面，函数是提取重复代码的关键方式之一。在类型层面，函数的等价物是泛型类型。泛型类型接受一个或多个类型参数，并产生一个具体的、非泛型的类型。你&quot;调用&quot;函数，而&quot;实例化&quot;泛型类型。</p><p>内置的 <code>Partial</code> 泛型类型使另一个类型的所有属性变为可选。以下是你自己定义它的方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAsiAKBDATsAlogNgHgCoD4oBeKAbwG0BpKNAOygGsIQB7AMylwF0B+ALk5UuAXwDcAKCA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这里 <code>T</code> 是类型参数。你可以看到这与内置的 <code>Partial</code> 类型完全一样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPartPerson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPartial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type MyPartPerson = { name?: string; age?: number; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PartPerson</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type PartPerson = { name?: string; age?: number; }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;exactOptionalPropertyTypes=true#code/C4TwDgpgBAsiAKBDATsAlogNgHgCoD4oBeKAbwG0BpKNAOygGsIQB7AMylwF0B+ALk5UuAXwDcAKDrAIyNogDG0eDIDOLeqXFQotRAFsIAlcGR0A5hO2IzhnQFc9AIxkTh48aEiwEKYMuRq9CRwSKgYOP6B+BIA9DHaUAB6PFCe0CG+kerEZDr6EPxQxqa0FlDWBQK0Ds7IolBuHuBKmarZJKHoWNhZtNHicQnJqc1Qnb05pHkGhcXm9RWF1U4uDeJAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>通过定义这个泛型类型，我们封装了将另一个类型的所有属性变为可选所需的类型级操作。这完全类似于函数如何封装获取一个值并产生另一个值的逻辑。你不需要知道 <code>Math.cos</code> 是如何实现的细节，就能知道它计算数字的余弦值。</p><p>你可以编写接受多个类型参数的泛型类型。以下是你尝试定义内置 <code>Pick</code> 泛型等价物的方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //    ~        Type &#39;K&#39; is not assignable to type &#39;string | number | symbol&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //        ~~~~ Type &#39;P&#39; cannot be used to index type &#39;T&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAsiAKBLAxgawDwBUA0UDSAfFALxQDeAUFFANrxSIB2+AugFxSZ0tVQD0fatQB+QsZ3DQA5HikMAzlEYB7YFACG8+YgDmjdQCMANtGDKooSFCnzgAJyY6oAHyUBXALYGIdl1HkgXspGUgB0vALiQsIxopiS1vByyOqMKmreUG7yEAAmFuZMuRAAHhYJUphhFAC+ANwUQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>即使你在类型级别编程，TypeScript 也会应用所有相同的静态分析工具来检查可分配性和代码中的其他错误。这里它发现了两个问题：</p><ul><li>我们在 <code>K</code> 上进行映射，但 TypeScript 没有理由相信它包含可以用作属性键的类型，即 <code>string</code>、<code>number</code> 或 <code>symbol</code>。</li><li>即使它是有效的属性键，TypeScript 也没有理由相信 <code>P</code> 可以用来索引 <code>T</code>。<code>T</code> 可能不是对象类型，也可能没有那个键。</li></ul><p>处理类型级错误的方法有很多，就像处理非泛型代码中的类型错误有很多方法一样。也许最简单的方法是忽略它们。这出人意料地有效！</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @ts-expect-error (don&#39;t do this!)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgeOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type AgeOnly = { age: number; }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EA9COQABMBgC0EAB4AHCAjByoULFGQAKACY4A5GGQHkYABbAMAQgCUBMAE9lyALJPUwBAGsAPAAqADTIANIAfMgAvPjIANqoyKBhALrUAQkpyIIszq4AghwA8iAANk7R7p7e-uhQ2CAhhuwQhuEsYsTIAHoA-OYuKIUQJeWVeGwc1CA8-FBM2QRAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你可以将其视为 TypeScript 在存在类型错误的情况下发出 JavaScript 的类型级等价物（Item 3）。仅仅因为它不喜欢你的泛型类型实现，并不意味着 TypeScript 不会让你使用它。</p><p>当然，TypeScript 抱怨是对的。这个版本的 <code>MyPick</code> 很容易出错：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstNameOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firstName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type FirstNameOnly = { firstName: unknown; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type Flip = {}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EA9COQABMBgC0EAB4AHCAjByoULFGQAKACY4A5GGQHkYABbAMAQgCUBMAE9lyALJPUwBAGsAPAAqADTIANIAfMgAvPjIANqoyKBhALrUAQkpyIIszq4AghwA8iAANk7R7p7e-uhQ2CAhhuwQhuEsYsTIAHoA-OYuKIUQJeWVeGwc1CA8-FBM2Y6DyABiwPVgAHLkI2UVMR5evn51DU0w67TbFG0d4sR9A65rG9e7YzETF6871FwgPhAWAA7iAFsI8igVqVgIpKocan5mhxDCFTjh2qJ7j1+pDVjC4Z9hEA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>MyPick</code> 的错误使用没有产生类型错误，而是返回了错误的类型。这几乎就像在 JavaScript 中编程一样！</p><p>另一种让错误消失的方法是添加与 TypeScript 期望的类型相交。以下是这样的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PropertyKey</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgeOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type AgeOnly = { age: number; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstNameOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firstName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type FirstNameOnly = { firstName: never; }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EwATwAOKALKjUwBAGsAPABUANMgDSAPmQBefMgDaqZKC3IAZGihZJUMZoiiAutRUmryBc6wxkKi7IgiwiEigAghwA8iAANqL6yDJyikroUNggGgDk7BA52iwA9MXEyAB6APzIYpLIURCxCUl4bBzUIDz8UEzBYfUAYsCZYABy5E3xiQYp8soZWbkwI7QTFIUlZcTVteHIw6PrUy0GbStHk50QAG4C-UA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>PropertyKey</code> 是 <code>string | number | symbol</code> 的内置别名。你可以将这种交集视为类型级的 <code>as any</code> 等价物。它让实现中的类型错误消失了，并让正确的使用保持不变。错误的使用结果略有不同，这也许是一个改进：<code>never</code> 通常表示出现了问题。</p><p>但保持类比，<code>as any</code> 在值层面很少是正确的选择，这些交集在类型层面通常也不是最佳选择。你经常通过让函数接受更窄的参数类型来解决类型错误，这正是我们在这里想要做的。你可以使用 <code>extends</code> 关键字在类型参数上添加约束：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AgeOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type AgeOnly = { age: number; }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FirstNameOnly</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;firstName&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                                  ~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//            Type &#39;&quot;firstName&quot;&#39; does not satisfy the constraint &#39;keyof Person&#39;.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flip</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                 ~~~~~ Type &#39;string&#39; does not satisfy the constraint &#39;object&#39;.</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EwATwAOKALKjUwBAGsAPABVkEAB6QQAEwzIsvAFYQEYADTIA0uq0Rd+hRFFYYyFQD5kAXnwBtVGRQawBdahUAkMEWEQkUAEEOAHkQABtRH2QZOUUldChsEEsAcnYIYo8WAHoq4mQAPQB+ZDFJZESIFPTMvDYOahAefigmZGFWlAAxYAKwADlyTrSM32z5ZXzCkpgZ2gWKCuraupPTs-OLgD9rm9vLghqLk5U45GKAIh3Z-Yh34uQdFgIPoQFgwDQ4GBgBgYBkwAALFAIHC0KBwUDg4pOFxuTY4YoAOlibUmqWA4kya1ypQ4xUseJAlQexyeZzu7lexVRjH+gOBJDBEKhMLhiOQyJAqPR4DehhMZkJBCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>通过将 <code>T</code> 约束为对象类型，并将 <code>K</code> 约束为 <code>T</code> 键的子类型，我们一举解决了两个问题：我们消除了实现中的类型错误，并在 <code>MyPick</code> 的无效实例化上产生了类型错误。</p><p>当你设置了 <code>noImplicitAny</code> 时，TypeScript 要求你为所有函数参数提供类型注解。对于类型参数没有等价物。如果你不指定约束，它默认为 <code>unknown</code>，这允许用户传入任何类型。当你定义泛型类型时，考虑是否要给用户少一点自由，多一点安全性。</p><p>当你编写函数时，你选择描述性的参数名称并编写 TSDoc 注释（Item 68）。你也应该为泛型类型这样做。有一个使用单字母名称作为类型参数的约定（如本条目所示），但你应该在类型级代码中对这些保持警惕，就像你对单字母变量名称一样。</p><p>命名的一般经验法则是，名称的长度应该与其作用域匹配。长期存在的全局变量应该有长而描述性的名称，而像 <code>i</code>、<code>k</code> 或 <code>v</code> 这样的短名称在作用域有限的简洁箭头函数中实际上可以提高可读性。对于像 <code>MyPick</code> 这样的短泛型，<code>T</code> 和 <code>K</code> 是可以的。但对于类型参数具有更广泛作用域的较长定义（比如泛型类），更长、更有意义的名称将提高清晰度。</p><p>你可以为泛型类型编写 TSDoc，TypeScript 语言服务会在相关情况下显示它，就像对函数一样。<code>@param</code> 的类型级等价物是 <code>@template</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * Construct a new object type using a subset of the properties of another one</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * (same as the built-in \`Pick\` type).</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> T</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> The original object type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> K</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> The keys to pick, typically a union of string literal types.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyPick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">P</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EA9ACoxRMcgDCOWlC4IwbEhADuyLLwBWEZcjABPAA4ouGRqoxdeGCCqwxDACxQmoWM1DDAIGLWc4ECwwNygtEAgpZAAKDHIUOACwlF4uYAAbMABaUGQAA1RgBABrAsNTCABKADoYgAFIMhNMuEhkABUuty16BlA4TK1dfRVjM0bm1vaUAGkelFKIIxSsZBMS0oAaSs2EIcyjVS4QYBxAmjorTOBIKCG9-3rkMRECCZQAWSNisoAeboQAAekBAABMAto9MpdgsQWDIchlkYnF0AHzIAC8+FYAG1UMh8nMALrUToEkkEQQsIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你在实例化站点检查 <code>MyPick</code>，你会得到完整的文档。如果你在定义中将鼠标悬停在 <code>T</code> 或 <code>K</code> 上，你会看到仅针对该类型参数的文档（图 6-1）。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506221433295.png" alt="图 6-1. @template TSDoc 标签可用于记录类型参数。"></p><p>TypeScript 类型最好被视为值的集合（Item 7），因此泛型类型本质上操作集合。这与 JavaScript 函数完全不同，在 JavaScript 函数中你知道每次调用函数时每个参数都会有一个单一的值。在实践中，这意味着你总是需要考虑你的泛型类型如何处理联合类型。Item 53 向你展示如何做到这一点。</p><p>你为值级代码编写测试，那么类型级代码呢？你绝对应该测试你的类型！这是一个有趣且足够深入的主题，值得有自己的条目。查看 Item 55。</p><p>你也可以为一些值级结构（如函数和类）添加类型参数。例如，我们可能用相应的 <code>pick</code> 函数来配合我们的 <code>Pick</code> 泛型类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">keys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> picked</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Partial</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> keys) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    picked[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj[k]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> picked </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Matilda&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const age: Pick&lt;Person, &quot;age&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// logs { age: 5.5 }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EYXEAjDAcyAA7AEAawA8AFWQQAHpBAATDMiy8AVhAkAaZAGl1WiLv0KIATywxkKgHwAKVoaPUVCwA6EMcnDGpLAG0AXQIASmpUeWVAqw98VgQcWlkUiB0kuChJOAAbJWTFVQtLDwyAXnxBFmIYLChkL2yQXIUDNzCMeMziYjlFAqiFGOQmv2mY1uRhYigIMC4oXAnHHTZ9KtTajyECAh7cmSTMaSa8EnJOAHIAWThJMp04Z4t2TgArEEASsWJcwGwOHM8oovDILM9-s94iwAPSosbIAB6AH5kODIZwjpVbiALAAif7kjwXHJYMoQIJlLAMLz-FHEdHIZkMfQPf7UIEg4RAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>只看类型并忽略括号之间的部分，这看起来很像之前 <code>MyPick</code> 类型的定义：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> P</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pick</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type P = &lt;T extends object, K extends keyof T&gt;(</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         obj: T, ...keys: K[]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      ) =&gt; Pick&lt;T, K&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EYXEAjDAcyAA7AEAawA8AFWQQAHpBAATDMiy8AVhAkAaZAGl1WiLv0KIATywxkKgHwAKVoaPUVCwA6EMcnDGpLAG0AXQIASmpUeWVAqw98VgQcWlkUiB0kuChJOAAbJWTFVQtLDwyAXnxBFmIYLChkL2yQXIUDNzCMeMziYjlFAqiFGOQmv2mY1uRhYigIMC4oXAnHHTZ9KtTajyECAh7cmSTMaSa8EnJOAHIAWThJMp04Z4t2TgArEEASsWGAnDIUKg5shwZDXHlFCwAPTIsYAPQA-LCIVCYaobNo9AZjKYwLVCXZiWEEZ4fKixoziH4AsFQs4IlZYgQGUyRg0MkcaukCEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你可以将泛型函数视为概念上定义相关的泛型类型。然而，泛型函数的美妙之处在于，当函数被调用时，TypeScript 通常可以从值中推断出类型参数。在前面的例子中，我们只是写了 <code>pick(p, &#39;age&#39;)</code>。这比显式写出类型要简洁得多（并产生完全相同的结果）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(p, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const age: Pick&lt;Person, &quot;age&quot;&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EYXEAjDAcyAA7AEAawA8AFWQQAHpBAATDMiy8AVhAkAaZAGl1WiLv0KIATywxkKgHwAKVoaPUVCwA6EMcnDGpLAG0AXQIASmpUeWVAqw98VgQcWlkUiB0kuChJOAAbJWTFVQtLDwyAXnxBFmIYLChkL2yQXIUDNzCMeMziYjlFAqiFGOQmv2mY1uRhYigIMC4oXAnHHTZ9KtTajyECAh7cmSTMaSa8EnJOAHIAWThJMp04Z4t2TgArEEASsWJcwGwOHM8tV0FBsCALM9-s9vDIkSj4iwAPTYsbIAB6AH5kODIZwjpVbojkAAif60jwEIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>另一个优势是你的 <code>pick</code> 函数的用户根本不需要知道他们正在使用泛型类型或类型级操作。他们可以只是享受准确、精确的类型。<code>age</code> 的类型暗示了类型级编程在工作，但如果你愿意，这也可以被隐藏。Item 56 展示了如何做到这一点。</p><p>类也可以接受类型参数，这些也可以从使用中推断出来：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> dateBox</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Box</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const dateBox: Box&lt;Date&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyIcAthAFzIZhSgDmA3EcnA1SQK5kBG0LAL4EYXEAjDAcyAA7AEAawA8AFWQQAHpBAATDMiy8AVhAkAaZAGl1WiLv0KIATywxkKgHwAKVoaPUVCwA6EMcnDGpLAG0AXQIASmpUeWVAqw98VgQcWlkUiB0kuChJOAAbJWTFVQtLDwyAXnxBFmIYLChkL2yQXIUDNzCMeMziYjlFAqiFGOQmv2mY1uRhYigIMC4oXAnHHTZ9KtTajyECAh7cmSTMaSa8EnJOAHIAWThJMp04Z4t2TgArEEASsWAgynAMPoAEJYDSqDKEYgAN3KXE4KmWlzoXAkHS8qLK6ICIyRYzAAAtgBggoT0XNkHSIMthMILjkwMhvpBYRoGSAIAB3ZC8rwC4UAEQ+EC88XiLAA9AqxsgAHoAfmQ2K50t51F5SilkA8BCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>回想 Item 8，<code>class</code> 是 TypeScript 中少数同时引入类型和值的结构之一。对于泛型类，它引入了一个泛型类型，将类型参数（<code>T</code>）与该类的属性和方法联系起来。</p><p>就像类善于捕获你原本必须自己跟踪的相关状态位一样，泛型类是捕获类型的好方法。泛型类的类型参数在构造时设置，当你调用其方法时不需要传递给它们（尽管其方法可以有自己的类型参数）。Item 28 探讨了如何使用它来获得对类型推断的更细粒度控制。</p><p>在值层面，你可以编写像 <code>map</code>、<code>filter</code> 和 <code>reduce</code> 这样的&quot;高阶函数&quot;，它们接受其他函数作为参数。这给了你巨大的灵活性来提取共享行为。这些有类型级等价物吗？</p><p>在撰写本文时，答案是否定的。这些将是&quot;类型函数的函数&quot;或通常称为&quot;高阶类型&quot;。它们会让你提取常见操作，比如将泛型类型应用于对象中的值类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MapValues</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">K</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //              ~~~~~~~ Type &#39;F&#39; is not generic.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAsghmAanANgVwgZwDwBUoQAewEAdgCaZQD2ARgFYQDGwANFAGIB8UAvFAG8AUFCgBtANJQAlqSgBrCCGoAzKLgC6ALk55JGrgG4RUAPSnRlq9YB+d+zfXhoAcg4uZVUtWBQA5mQQAE7STAB0QgC+xkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>好消息是，这并不限制你可以用泛型类型做什么。它只限制你表达自己的方式。在这种情况下，你需要使用映射类型而不是 <code>MapValues</code>。同样，也没有匿名泛型类型这样的东西。</p><p>泛型类型最好被视为类型之间的函数。当你编写它们时，请记住这一点。你现在在类型级别工作，这令人兴奋且新颖。但你仍在编码，你学到的所有编写值级代码的最佳实践仍然适用。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>把泛型类型看作是类型之间的函数。</li><li>使用 <code>extends</code> 来约束类型参数的领域，就像你用类型注解来约束函数参数一样。</li><li>选择能增加代码可读性的类型参数名称，并为它们编写 TSDoc 文档。</li><li>把泛型函数和类看作是概念上定义了有利于类型推断的泛型类型。</li></ul>`,66)]))}const A=i(h,[["render",p]]);export{y as __pageData,A as default};
