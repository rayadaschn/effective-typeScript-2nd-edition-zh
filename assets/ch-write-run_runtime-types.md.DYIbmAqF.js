import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.D53w8jfx.js";const g=JSON.parse('{"title":"Item 74: 了解如何在运行时重建类型","description":"","frontmatter":{},"headers":[],"relativePath":"ch-write-run/runtime-types.md","filePath":"ch-write-run/runtime-types.md"}'),t={name:"ch-write-run/runtime-types.md"};function h(k,s,l,e,E,r){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="item-74-了解如何在运行时重建类型" tabindex="-1">Item 74: 了解如何在运行时重建类型 <a class="header-anchor" href="#item-74-了解如何在运行时重建类型" aria-label="Permalink to &quot;Item 74: 了解如何在运行时重建类型&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>TypeScript 类型在代码运行前会被擦除。没有额外工具的情况下，你无法在运行时访问它们。</li><li>了解运行时类型的选项：使用独立的运行时类型系统（如 Zod）、从值生成 TypeScript 类型（<code>json-schema-to-typescript</code>）、从 TypeScript 类型生成值（<code>typescript-json-schema</code>）。</li><li>如果你的类型有其他规范（例如模式），使用那个作为真相来源。</li><li>如果需要引用外部 TypeScript 类型，使用 <code>typescript-json-schema</code> 或等效工具。</li><li>否则，权衡是否更喜欢额外的构建步骤或指定类型的其他系统。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>在学习 TypeScript 的过程中，大多数开发者都会有一个顿悟时刻，当他们意识到 TypeScript 类型并不是&quot;真实的&quot;：它们在运行时被擦除了（Item 3）。这可能会伴随着一种恐惧感：如果类型不是真实的，你如何信任它们？</p><p>类型与运行时行为的独立性是 TypeScript 和 JavaScript 之间关系的关键部分（Item 1）。大多数时候这个系统工作得很好。但不可否认的是，有时在运行时访问 TypeScript 类型会非常方便。本条目探讨了这种情况可能出现的原因以及你的选择。</p><p>想象你正在实现一个 Web 服务器，并为在博客文章上创建评论定义了一个 API 端点（我们在 Item 42 中见过这个 API）。你为请求体定义了一个 TypeScript 类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  postId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMJQnSqD2BbPCcZAbwChlkAHHAZzAEkATALmXqlAHMBuC5MMDAAbCGw7c+lAEY4mAT3FhOIXmQC+ZIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你的请求处理器应该验证请求。其中一些验证将在应用层面进行（postId 是否引用了存在且用户可以评论的文章？），但有些将在类型层面进行（请求是否具有我们期望的所有属性，它们是否是正确的类型，是否有额外的属性？）。</p><p>这可能是这样的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/comment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;postId&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body.postId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;title&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body.title </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;body&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body.body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateComment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... application validation and logic ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMJQnSqD2BbPCcZAbwChlkAHHAZzAEkATALmXqlAHMBuC5MMDAAbCGw7c+lAEY4mAT3FhOIXmQC+ZYHhpQwyCAA8qGWrWQwo+ZAHIjJiGZt8EOEPWRwqVZAF4Dxqa0ABQAlHxeVAB0NPTBNgD0rgREYDYANMjBGACOAK6OYJmmNO4QoX4AfKT8ru76JLIK6n7IuQX0UsjAMFn8lACETfLIAD6j-QLyVBA4vcPIA77+NjjSAFYQCGljE5SUAPIbW2BRANYQ8iHDoVGiqmAAFovLyADMu5MD8bGMTDbdEDIG67KYzObAuTyGJ0P4vFYSVQA8ZfeKCEQQAGgSEKCrjMGzeZQqLo0Tw2yIrjIvb7b42YZYoEg-FgaaEnHQhZLBHKbg2fgVcj7NoQMB5KBAkpuWgQKL0LB5EIAFgADCrbjKQEx4gwQAA3ODCYBMEX5Qo2cL8TSUOoeZKEYj+BZwczoTDYfAOsBdBIJZBRAOebxGhBYYBuZAGo1MMMRuBa5DCHBcYAIf0B-gYMUSkW0UoyuVgBUhABMao1RG1qzOFr46ktQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这已经是很多验证代码了，即使只有三个属性。更糟的是，没有任何东西确保检查是准确的并与我们的类型同步。没有任何东西检查我们是否正确拼写了属性。如果我们添加一个新属性，我们也需要记住添加一个检查。</p><p>这是最糟糕的代码重复。我们有两个需要保持同步的东西（类型和验证逻辑）。如果有一个单一的真相来源会更好。接口似乎是自然的真相来源，但它在运行时被擦除，所以不清楚如何以这种方式使用它。</p><p>让我们看看这个难题的几个可能解决方案。</p><h3 id="从另一个来源生成类型" tabindex="-1">从另一个来源生成类型 <a class="header-anchor" href="#从另一个来源生成类型" aria-label="Permalink to &quot;从另一个来源生成类型&quot;">​</a></h3><p>如果你的 API 以某种其他形式指定，也许使用 GraphQL 或 OpenAPI 模式，那么你可以使用那个作为真相来源，并从中生成你的 TypeScript 类型。</p><p>这通常涉及运行外部工具来生成类型，可能还有验证代码。例如，OpenAPI 规范使用 JSON Schema，所以你可以使用像 <code>json-schema-to-typescript</code> 这样的工具来生成 TypeScript 类型，并使用像 Ajv 这样的 JSON Schema 验证器来验证请求。</p><p>这种方法的缺点是需要添加一些复杂性和构建步骤，每当你的 API 模式更改时都必须运行。但如果你已经在使用 OpenAPI 或其他系统指定你的 API，那么这具有不引入任何新真相来源的巨大优势，这是你应该首选的方法。</p><p>如果这适合你的情况，那么 Item 42 包含了从模式生成 TypeScript 类型的示例。</p><h3 id="使用运行时库定义类型" tabindex="-1">使用运行时库定义类型 <a class="header-anchor" href="#使用运行时库定义类型" aria-label="Permalink to &quot;使用运行时库定义类型&quot;">​</a></h3><p>TypeScript 的设计使得从静态类型派生运行时值是不可能的。但走相反的方向（从运行时值到静态类型）使用类型级别的 <code>typeof</code> 操作符是直接的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { postId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;First&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, body: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;That is all&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ValType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> val</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type ValType = { postId: string; title: string; body: string; }</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBAbgQwDYwLwwN4wA4mgSQBMAuGAcgEYAmAZjIBoYoBLKJAU1LIDFmAnaAxgAjEIQCeXACoALBLGYQYyJGQC+AbgBQUcdnYwAasil6D6XfpAAzeMm0B6BzBcA9APxMzRk9-RZcAhIYaD5mMABzDSZWDlJQ8KiRMUkQqDDI6LUtIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>所以一个选择是使用运行时构造定义你的类型，并从中派生静态类型。这通常使用库来完成。有很多这样的库，但目前最受欢迎的是 Zod（React 的 PropTypes 是另一个例子）。</p><p>使用 Zod 的请求验证逻辑会是这样的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { z } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;zod&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// runtime value for type validation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> createCommentSchema</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  postId: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  body: z.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// static type</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateComment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">infer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createCommentSchema&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type CreateComment = { postId: string; title: string; body: string; }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">app</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/comment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } = </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    const</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> createCommentSchema.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(body)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    ^? const comment: { postId: string; title: string; body: string; }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ... application validation and logic ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } catch (e) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    return response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(400).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYWwDg9gTgLgBAUwB5iggzuuAzKERwDkyqG6hA3AFADGEAduvAIZhhwC8iKamAFAEpqoSLDgBvOAC84AXxx4ChKRAAmlKlQD0WuFACu9GKARwAbswA2+09mhwYATzCmLl4KubGGtBkzg0aF4IAML4IAhGAMo0ABYIIMyc0gB0EABGAFYINDB84lRwcJBMAJKqAFypTFDA9ADmggA0hQ7AMJYIVVIpNXWNAi1F6WqO3b0wtQ3NVLJCmjpwTF7ANA7OCFROLnAhQTCh4ZHwXD112AhQADzbCBDYAfuHIBHRcQnMAHzUi0UAegB+dY7PYIYJhF7HZKSEowcpVPoNChtDpdJaTfrIkaqMboqb1ZGyTSsMApWF8QhaOiQoyEJpwPhoACONiY9N4kEYCAEnE+EladEY8HE2Mc8i4zNZMGoRUmjn5RSKgv81NeJ0eYIOELVMXiiTJzCg6AQfFF80VcF+-yByvgquOVRhEDKlTxmJRnQRGKRcFFXvxhNaRUWKVDcBJ7hoKwY5isHmj9HD9FUcEsEHqqzgoZSQb0CBg+igiY5fgQEy8+nQfAATAAGWsCXqRVQUiAAa0I5rkAS8cQZ3IVirQBaLefQnON5YLVYALPXG8bkxTSvQ3B48yyMDBOzK5LN5kA" target="_blank" rel="noreferrer">💻 playground</a></p><p>Zod 完全消除了重复：值 <code>createCommentSchema</code> 现在是真相来源，静态类型 <code>CreateComment</code> 和模式验证（<code>createCommentSchema.parse</code>）都从中派生。</p><p>Zod 和其他运行时类型库在解决这个问题方面非常有效。那么使用它们有什么缺点呢？</p><ul><li>你现在有两种定义类型的方式：Zod 的语法（<code>z.object</code>）和 TypeScript 的（<code>interface</code>）。虽然这些系统有很多相似之处，但它们并不完全相同。你已经在使用 TypeScript，所以假设你的团队已经承诺学习如何使用它定义类型。现在每个人都需要学习使用 Zod。</li><li>运行时类型系统往往具有传染性：如果 <code>createCommentSchema</code> 需要引用另一个类型，那么该类型也需要重新设计为运行时类型。这可能使得与其他类型来源的互操作变得困难，例如，如果你想引用外部库的类型或从数据库生成一些类型（Item 58）。</li></ul><p>拥有独立的运行时类型验证系统还有一些其他优势：</p><ul><li>像 Zod 这样的库可以表达许多难以用 TypeScript 类型捕获的约束，例如&quot;有效的电子邮件地址&quot;或&quot;整数&quot;。如果你不使用像 Zod 这样的工具，你将不得不自己编写这种验证。</li><li>没有额外的构建步骤。一切都是通过 TypeScript 完成的。如果你期望你的模式经常更改，那么这将消除一个失败模式并收紧你的迭代周期。</li></ul><h3 id="从你的类型生成运行时值" tabindex="-1">从你的类型生成运行时值 <a class="header-anchor" href="#从你的类型生成运行时值" aria-label="Permalink to &quot;从你的类型生成运行时值&quot;">​</a></h3><p>如果你愿意引入新工具和构建步骤，那么还有另一种可能性：你可以反转前一节的方法，从你的 TypeScript 类型生成运行时值。JSON Schema 是一个流行的目标。</p><p>为了使这个工作，我们将把我们的 API 类型放在 <code>api.ts</code> 文件中：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// api.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateComment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  postId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEEMAcEsDoBcDOAoApgD0gewE71NAHbyo4Bm4AxqqAMI6rgm1YC2rqxoA3sqKNkTwAkgBMAXKCE4iAcwDcfUPGjwANqknS5i-gCMsogJ5b4MwguQBfZEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>然后我们可以运行 <code>typescript-json-schema</code> 来为这个类型生成 JSON Schema：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> typescript-json-schema</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api.ts</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> api.schema.json</span></span></code></pre></div><p>这个文件看起来像这样：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;$schema&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://json-schema.org/draft-07/schema#&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;definitions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;CreateComment&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;object&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;properties&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;body&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;postId&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;title&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;string&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>现在我们可以在运行时加载 <code>api.schema.json</code>。如果你启用 TypeScript 的 <code>resolveJsonModule</code> 选项，这可以通过普通的 import 完成。你可以使用任何 JSON Schema 验证库执行验证。这里我们使用 Ajv 库：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Ajv </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ajv&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> apiSchema </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./api.schema.json&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { CreateComment } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./api&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ajv</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Ajv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">app.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/comment&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ajv.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">validate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(apiSchema.definitions.CreateComment, body)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">400</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Invalid request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> comment</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CreateComment</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... application validation and logic ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;resolveJsonModule=true&amp;esModuleInterop=true#code/JYWwDg9gTgLgBAUwB5iggzuuAzKERwDkyqG6hA3AFADGEAduvAIZhhwC8iKamAFAEpqoSLDgBBAFYA3HHgKFmMylSojoLMMADKNABYIQzOfiIA6APStgZ9PsPMzk9AxXqxAbwDCaZjARe+CAI9DAAviYKltYqtAxMcEqyXPQIAO4SMoLUVKxgZpBMfIQWdCDBoYQANHB8aACOAK4YMDW8kIwIApwAfHAeVHBwdIzwHgBGEAAmAJ4RXA3NTNRDwNi1AIRJZtLMADbAU34IfNa6BkZmUwjYwPTAMMDxZj4Ix4HlIa1wk7MC3QMhkM0DBGlB6HB2vEELYYH5Gug+AAWAAMKIEthCU2KAEl6LsDlNIQgmi1CEJBnAwpSRgkyhV4FxfjNElhXu8gl8VnALBY4GYBYk2AcaH4nhCCYcxQxEvQiXsIABzYA0fkCykgsEQqGdWHwxEAJjRGPQWOKEAA1uTqGEKUA" target="_blank" rel="noreferrer">💻 playground</a></p><p>从你的 TypeScript 类型生成值的巨大优势是你可以继续使用你熟悉和喜爱的所有 TypeScript 工具来定义你的类型。你不需要学习第二种定义类型的方式，因为 JSON Schema 是一个实现细节。你的 API 类型可以引用来自 <code>@types</code> 或其他来源的类型，因为它们只是 TypeScript 类型。</p><p>缺点是引入了新工具和新的构建步骤。每当你更改 <code>api.ts</code> 时，你需要重新生成 <code>api.schema.json</code>。在实践中，你会想要使用你的持续集成系统来强制这些保持同步。</p><p>虽然你通常不需要在运行时访问 TypeScript 类型，但偶尔会有像输入验证这样的情况，在那里它非常有用。我们已经看到了解决这个问题的三种方法。那么你应该选择哪一个呢？</p><p>不幸的是，没有完美的答案。每个选项都是一个权衡。如果你的类型已经以某种其他形式表达，比如 OpenAPI 模式，那么使用那个作为你的类型和验证逻辑的真相来源。这将产生一些工具和过程开销，但拥有单一真相来源是值得的。</p><p>如果不是，那么决定就更棘手了。你宁愿引入构建步骤还是定义类型的第二种方式？如果你需要引用只使用 TypeScript 类型定义的类型（也许它们来自库或是生成的），那么从你的 TypeScript 类型生成 JSON Schema 是最好的选择。否则，你需要选择你的毒药！</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>TypeScript 类型在代码运行前会被擦除。没有额外工具的情况下，你无法在运行时访问它们。</li><li>了解运行时类型的选项：使用独立的运行时类型系统（如 Zod）、从值生成 TypeScript 类型（<code>json-schema-to-typescript</code>）、从 TypeScript 类型生成值（<code>typescript-json-schema</code>）。</li><li>如果你的类型有其他规范（例如模式），使用那个作为真相来源。</li><li>如果需要引用外部 TypeScript 类型，使用 <code>typescript-json-schema</code> 或等效工具。</li><li>否则，权衡是否更喜欢额外的构建步骤或指定类型的其他系统。</li></ul>`,53)]))}const y=i(t,[["render",h]]);export{g as __pageData,y as default};
