import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D53w8jfx.js";const E=JSON.parse('{"title":"第 36 条：为特殊值使用特殊类型","description":"","frontmatter":{},"headers":[],"relativePath":"ch-design/in-domain-null.md","filePath":"ch-design/in-domain-null.md"}'),l={name:"ch-design/in-domain-null.md"};function t(p,s,k,e,d,r){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="第-36-条-为特殊值使用特殊类型" tabindex="-1">第 36 条：为特殊值使用特殊类型 <a class="header-anchor" href="#第-36-条-为特殊值使用特殊类型" aria-label="Permalink to &quot;第 36 条：为特殊值使用特殊类型&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>避免使用那些在类型中本身就是合法值的“特殊值”，否则会削弱 TypeScript 检查 bug 的能力。</li><li>如果要用特殊值，优先考虑 <code>null</code> 或 <code>undefined</code>，不要用 <code>0</code>、<code>-1</code> 或 <code>&quot;&quot;</code>。</li><li>如果 <code>null</code> 或 <code>undefined</code> 的含义不够清晰，建议用“标记联合类型”来明确表达你的意图。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>JavaScript 的字符串 <code>split</code> 方法非常方便，可以用分隔符把字符串拆开：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;abcde&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ &#39;ab&#39;, &#39;de&#39; ]</span></span></code></pre></div><p>我们想写一个类似功能的函数，不过是针对数组的。尝试写成这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> splitAround</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index), vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAZwA4BsZQIICc7gAmAPACoB8AFAG4CG6yAXIrgKa2ELoCeipA2gF0ANIjrpmpAJTN+AkXyGDEAbwBQiRBATIoiGGEKsAHogC8Y+sgB0Bo8YDywGvSkBuDS1ZQQuJP3EbZEwIVkoABlE7EylRQOtgmFDKaOMAagBGKUEPAF81IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>用法和预期一样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitAround</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ [1, 2], [4, 5] ]</span></span></code></pre></div><p>但是，如果你传入的元素不在数组里，结果就很奇怪了：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">splitAround</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// [ [1, 2, 3, 4], [1, 2, 3, 4, 5] ]</span></span></code></pre></div><p>虽然函数在这种情况下该怎么处理不太明确，但结果肯定不是预期的。为什么这么简单的代码会出现这种奇怪行为？</p><p>根本原因是：<code>indexOf</code> 找不到元素时返回 <code>-1</code>。这个 <code>-1</code> 是一个特殊值，表示查找失败，而不是有效索引。</p><p>但 <code>-1</code> 本身只是一个普通数字。你把它传给数组的 <code>slice</code> 方法，也能做算术运算。传负数给 <code>slice</code> 表示从数组末尾往回数。当你对 <code>-1</code> 加 1 时，结果是 0。</p><p>所以最终执行的是：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;[vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span></code></pre></div><p>即：</p><ul><li><code>vals.slice(0, -1)</code>：从开头到倒数第一个元素（不包含最后一个元素）</li><li><code>vals.slice(0)</code>：从开头到结尾（整个数组）</li></ul><p>第一个 <code>slice</code> 返回数组除了最后一个元素以外的所有元素，第二个 <code>slice</code> 返回整个数组的完整拷贝。</p><p>这种行为其实是个 bug。而且很遗憾，TypeScript 并没有帮我们发现这个问题。问题的根源是 <code>indexOf</code> 找不到元素时返回了 <code>-1</code>，而不是比如返回 <code>null</code>。</p><p>为什么会这样呢？</p><p>虽然我们不能穿越回 1995 年去访问 Netscape 办公室，但可以推测一下：JavaScript 受到 Java 影响很大，而 Java 的 <code>indexOf</code> 也是这样设计的。在 Java（和 C）里，函数不能返回一个基本类型或者 <code>null</code>，只有对象（或指针）可以是可空的。所以这个设计很可能是源于 Java 的技术限制，而 JavaScript 并没有这个限制。</p><p>在 JavaScript（和 TypeScript）里，函数返回数字或者 <code>null</code> 都没问题，所以我们可以对 <code>indexOf</code> 做个封装：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeIndexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">indexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(val)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAZwIbAKYEkwBMMAeA8sADwAqAfABQBuqANsgFyIBOGquCDAnouQDaAXQA0ieg1bkAlKzAgAtgCMMbRAB9EChg0QBvAFCJEEBMiiIYeQogC8ExsgB01-MWB1GMgNzH2GFAgbEhutnYRiAC0AIyIAPzaILqIrGEEfgC+hkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果我们把这个封装版的 <code>indexOf</code> 用在最开始的 <code>splitAround</code> 函数里，立刻就会遇到两个类型错误：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> splitAround</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeIndexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vals, val)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index), vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                    ~~~~~              ~~~~~ &#39;index&#39; is possibly &#39;null&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAZwIbAKYEkwBMMAeA8sADwAqAfABQBuqANsgFyIBOGquCDAnouQDaAXQA0ieg1bkAlKzAgAtgCMMbRAB9EChg0QBvAFCJEEBMiiIYeQogC8ExsgB01-MWB1GMgNzH2GFAgbEhutnYRiAC0AIyIAPzaILqIrGEEfgC+hqCQsAgoAA4MMFAAgmxw4LgUNJIsAVw8-EJijlICcoiCreKtwgb+ZmAWVjYE9ijo2OMkXkzikr7+HEEh3fXOyCUQGNQADOLpMotOWzt76QDUMTLCfiYA9I8mr2-vHwB+398ff4g-X4AcnSQKsyEQhTgyGQMGUfEQQJ0DCBhmyQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这正是我们想要的效果！使用原生的 <code>indexOf</code>，TypeScript 无法区分查找成功和失败两种情况。但用我们封装后的版本，TypeScript 能明确知道有两种可能：返回的是 <code>number</code> 或 <code>null</code>，并且能提醒我们只处理了其中一种情况。</p><p>解决办法就是显式地处理查找失败的情况：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> splitAround</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">vals</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> readonly</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">val</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> safeIndexOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vals, val)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">vals], []]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, index), vals.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">slice</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAZwIbAKYEkwBMMAeA8sADwAqAfABQBuqANsgFyIBOGquCDAnouQDaAXQA0ieg1bkAlKzAgAtgCMMbRAB9EChg0QBvAFCJEEBMiiIYeQogC8ExsgB01-MWB1GMgNzH2GFAgbEhutnYRiAC0AIyIAPzaILqIrGEEfgC+hqCQsAgoAA4MMFAAgmxw4LgUNJIsAVw8-EJijlICcoiCreKtwgb+ZmAWVjYE9ijo2OMkXkzikr7+MMCI1On2kToMMoMmJhxBId2Czuf1bSLCfibZh4HBSIL1zsglEBjUAAzi6TKLJxvD5fdIAahiMhuJgA9DDEHAANaGbJAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这是不是“正确行为”还值得讨论，但至少 TypeScript 迫使我们认真思考这个问题！</p><p>第一个实现的根本问题在于，<code>indexOf</code> 有两种完全不同的情况，但它在特殊情况（返回 -1）下的返回值类型和正常情况（返回找到的索引）一样，都是 <code>number</code>。这就导致在 TypeScript 看来，这只是一个统一的情况，它无法察觉我们有没有去检查 -1 的返回值。</p><p>这种情况在设计类型时经常会遇到。比如你有一个用来描述商品的类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  priceDollars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAZwIbAKYEkwBMMAeA8sADwAqAfABQBuqANsgFyIBOGquCDAnouQDaAXQA0ieg1bkAlKzAgAtgCMMbRAB9EChg0QBvAFCJEEBMiiIYeQogC8ExsgB01-MWB1GMgNzH2GFAgbEhutnYRiAC0AIyIAPzaILqIrGEEfgC+htZQasCoEBiIAApscLgg0Ab+sFAMGKwWbNYA5n4mAA4tRQAicLqobCxJKmpZhkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>然后你意识到，有些商品的价格是未知的。如果把这个字段改成可选的，或者改成 <code>number | null</code>，可能就需要做数据迁移，还要改很多代码。于是你决定引入一个特殊值来表示未知价格：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Product</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /** Price of the product in dollars, or -1 if price is unknown */</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  priceDollars</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgApQPYBMCuCzIDeAUMsmMGADYQBcyAzmFKAOYDcpyA9AFS9oWSZBhjkAFigAOmXPmShkWDFSpwoDADQioyALQBGBWJnBhwBshwgA1iAwB3EMl7cuppABEVajfRA4ALYARtCcAL7EQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你把这个改动上线了。一周后，你老板大发雷霆，质问为什么你会往客户的银行卡里打钱。你们团队开始紧急回滚改动，而你被安排去写事故复盘。事后看来，如果一开始就认真处理那些类型错误，反而会轻松得多！</p><p>选择一些“在领域内”的特殊值，比如 <code>-1</code>、<code>0</code> 或 <code>&quot;&quot;</code>，其实就和关闭 <code>strictNullChecks</code> 差不多。当关闭了 <code>strictNullChecks</code>，你就可以把 <code>null</code> 或 <code>undefined</code> 赋值给任何类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// @strictNullChecks: false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> truck</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Product</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Tesla Cybertruck&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  priceDollars: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ok</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5&amp;strictNullChecks=false#code/JYOwLgpgTgZghgYwgAgApQPYBMCuCzIDeAUMsmMGADYQBcyAzmFKAOYDcpyA9AFS9oWSZBhjkAFigAOmXPmShkWDFSpwoDADQioyALQBGBWJnBhwBshwgA1iAwB3EMl7cuppABEVajfRA4ALYARtCcAL7E3NzIAAJMQmAAcjiqAMKSCDYM9PBUDBDECBggTORQeDb06Nh4BAC8RFwU1HTIAOQAKhAMashpAJ6hUMyV7ZruQhDequo5yAGq2jwxGDbE4ZxAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这会让大量的 bug 悄无声息地绕过类型检查器，因为 TypeScript 并不会区分 <code>number</code> 和 <code>number | null</code>，它会把 <code>null</code> 当作所有类型的合法值。而当你开启了 <code>strictNullChecks</code>，TypeScript 才会区分这些类型，从而能发现更多潜在问题。 当你使用像 <code>-1</code> 这样的“领域内特殊值”时，实际上是在你的类型系统中人为挖了一个“非严格的漏洞”。虽然这样做图省事，但从长远看并不是个好选择。</p><p>当然，<code>null</code> 和 <code>undefined</code> 并不总是最合适的“特殊值”，因为它们的含义可能会因上下文不同而变化。比如，如果你在表示一个网络请求的状态，使用 <code>null</code> 代表出错、<code>undefined</code> 代表等待中，这其实会让语义很模糊。更好的做法是使用“标记联合类型”（tagged union），用显式的方式来表达这些特殊状态。第 29 条有详细讲这个例子。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>避免使用那些在类型中本身就是合法值的“特殊值”，否则会削弱 TypeScript 检查 bug 的能力。</li><li>如果要用特殊值，优先考虑 <code>null</code> 或 <code>undefined</code>，不要用 <code>0</code>、<code>-1</code> 或 <code>&quot;&quot;</code>。</li><li>如果 <code>null</code> 或 <code>undefined</code> 的含义不够清晰，建议用“标记联合类型”来明确表达你的意图。</li></ul>`,50)]))}const c=i(l,[["render",t]]);export{E as __pageData,c as default};
