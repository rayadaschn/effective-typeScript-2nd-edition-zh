import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.D53w8jfx.js";const A=JSON.parse('{"title":"第 8 条: 了解符号处于类型空间还是值空间","description":"","frontmatter":{},"headers":[],"relativePath":"ch-types/type-value-space.md","filePath":"ch-types/type-value-space.md"}'),e={name:"ch-types/type-value-space.md"};function t(h,s,l,k,d,r){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="第-8-条-了解符号处于类型空间还是值空间" tabindex="-1">第 8 条: 了解符号处于类型空间还是值空间 <a class="header-anchor" href="#第-8-条-了解符号处于类型空间还是值空间" aria-label="Permalink to &quot;第 8 条: 了解符号处于类型空间还是值空间&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>在阅读 TypeScript 表达式时，要了解如何区分类型空间和值空间。可以使用 TypeScript playground 来帮助建立这种直觉。</li><li>每个值都有一个静态类型，但只有在类型空间中才能访问。像 <code>type</code> 和 <code>interface</code> 这样的类型空间构造会被擦除，在值空间中无法访问。</li><li>一些构造，比如 <code>class</code> 或 <code>enum</code>，同时引入了类型和值。</li><li><code>typeof</code>、<code>this</code> 以及许多其他操作符和关键字在类型空间和值空间中有不同的含义。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>在 TypeScript 中，符号有两种存在方式： • 类型空间 • 值空间</p><p>这可能会让人困惑，因为相同的名称在不同的空间中可以指代不同的内容。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cylinder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cylinder</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ radius, height })</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMIE8A2oAm1kDeAUMslHDsAK4DOAXMiFQLYBG0A3CcgBYTABzHmAZM2nIgF8iRBAHsQNMGiy58AXmQAKcpVqiW7KABpe-ISMaHoASmTqAfNoK7qNU30HDJNrkA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>interface Cylinder</code> 在类型空间中引入了一个符号。<code>const Cylinder</code> 在值空间中引入了一个同名的符号。它们彼此没有任何关系。根据上下文，当你写 <code>Cylinder</code> 时，可能指代的是类型或值。有时这会导致错误：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateVolume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (shape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cylinder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape.radius</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    ~~~~~~ Property &#39;radius&#39; does not exist on type &#39;{}&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMIE8A2oAm1kDeAUMslHDsAK4DOAXMiFQLYBG0A3CcgBYTABzHmAZM2nIgF8iRBAHsQNMGiy58AXmQAKcpVqiW7KABpe-ISMaHoASmTqAfNoK7qNU30HDJNrjCogCGDACsgIcJgIVJhwkABqcpgsEFo0PHAADhAMAQDWIHIA7iB2xKTAMNppmSigSnCBEHKVGNggeFCl3KTVWQB0rrTdyAD0I6SkAH7TM8gAClByWVBg6MgA5IM068g4chA0jHLKEAAewErIoatZGwSS69zS0kA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这是怎么回事呢？你可能本意是用 <code>instanceof</code> 来检查 <code>shape</code> 是否属于 <code>Cylinder</code> 类型。但 <code>instanceof</code> 是 JavaScript 的运行时操作符，它作用于值。所以 <code>instanceof Cylinder</code> 指的是那个函数，而不是类型。</p><p>乍一看，某个符号属于类型空间还是值空间并不总是那么明显。你需要根据符号出现的上下文来判断。尤其让人困惑的是，很多类型空间的写法和值空间的写法长得一模一样。</p><p>比如字面量类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string literal&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;string literal&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAKgjFAvFA5AZ2AJwJYDsDmUANtsBJgIZEoDcAUAMYD2uGUAbgsulnoSWUrV6oSLABMSKHHEBmes1bAOk5DPl0gA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在 <code>type</code> 或 <code>interface</code> 后面出现的符号属于类型空间，而在 <code>const</code> 或 <code>let</code> 声明中引入的符号是值。</p><p>理解这两种空间的最好方法之一是使用 TypeScript Playground，它可以将你的 TypeScript 代码编译成的 JavaScript。类型在编译时会被擦除（见第 3 条），所以如果某个符号在编译后消失了，那它就是类型空间里的。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202504061918012.png" alt="Figure 2-11. The TypeScript playground showing generated JavaScript. The symbols on the first two lines go away, so they were in type space."></p><p>TypeScript 中的语句可能会在类型空间和值空间之间来回切换。类型声明（冒号 <code>:</code>）或类型断言（<code>as</code>）后面的符号属于类型空间，而赋值语句中等号 <code>=</code> 后面的内容属于值空间。</p><p>比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jane</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { first: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jane&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, last: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jacobs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ――――           ――――――――――――――――――――――――――――――――― Values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//          ―――――― Type</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>尤其是函数语句，它们在类型空间和值空间之间可能会反复切换：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //     ――――― ――          ―――――――          ――――                    Values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //               ――――――           ――――――        ――――――   ―――――――― Types</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIYIJAEMGBZCABbOGBWAAowLClMHD0MIJMRCAyuMDoQej0TLAATOIam+gBKagAlUIShFEJiCPcPZCdIqc85+2nFleIA4NCWSdWlhdXouYOZ71jEzYm7AGEAeQBZVAGAUQBlZ5YoCDAgqFwJAHdkEMMCMQBgIIVeswLshHgA5AAiBH4BCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>class</code> 和 <code>enum</code> 这两种结构会同时引入一个类型和一个值。回到最开始的例子，<code>Cylinder</code> 也可以是一个类：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cylinder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">radius</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.radius </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> radius</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.height </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> height</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateVolume</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">shape</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (shape </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">instanceof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cylinder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ^? (parameter) shape: Cylinder</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    shape.radius</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //    ^? (property) Cylinder.radius: number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIYIJAEMGBZCABbOGBWAAowLClMHD0MIJMRCAyuMDoQej0TLAATOIam+gBKagAlUIShFEJiCPcPZCdIqc85+2nFleIA4NCWSdWlhdXouYOZ71jEzYm7AGEAeQBZVAGAUQBlZ5YoCDAgqFwJAHdkEMMCMQBgIIVeswLshHgA5AAiBH4AnYGAwyEucVYoHa0Hw7zg7WAQQw1BAQRyJmgUOQAAsIMB6LTDOTKdSWIJQY0ghksFBClBCcTSchWVSoHp6YzmWSKeLevjXGBacAMAA6QVEknyZCa4U04jK1VqqVMsA603Mmn8ZGpdKZWQIQIIILsSB+LDBHLgjC0uBJahpADWICwfxACvGyGAMGQhV9-pQoAo4iQWFjmOxIFxUEjLGICaS+eQEQAegB+OMJOCC72QXM0P0BjFYnHQYuFiAaoUk4vbZAVqtQLBJKBgOIKzNtqDdrUisXt4g2ghAA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>class</code> 引入的 TypeScript 类型是基于它的结构（也就是它的属性和方法），而对应的值是它的构造函数。</p><p>有很多操作符和关键字在类型上下文和值上下文中含义不同，比如 <code>typeof</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jane</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type T1 = Person</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type T2 = (to: Person, subject: string, body: string) =&gt; Response</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jane </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Value is &quot;object&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> email </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Value is &quot;function&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIYIJAEMGBZCABbOGBWAAowLClMHD0MIJMRCAyuMDoQej0TLAATOIam+gBKagAlUIShFEJiCPcPZCdIqc85+2nFleIA4NCWSdWlhdXouYOZ71jEzYm7AGEAeQBZVAGAUQBlZ5YoCDAgqFwJAHdkEMMCMQBgIIVeswLshHgA5AAiBH4AnYGAwyEucVYoHa0Hw7zg7WAQQw1BAQRyJmgUOQAAsIMB6LTDOTKdSWIJQY0ghksFBClBCcTSchWVSoHp6YzmWSKeLevjXGBacAMAA6QVEknyZCa4U04jK1VqqVMsA603Mmn8ZGpdKZWQIQIIILsSB+LDBHLgjC0uBJahpADWICwfxACvGyGAMGQhV9-pQoAo4iQWFjmOxIFxUEjLGICaS+eQEQAegB+OMJOCC72QXM0P0BjFYnHQYuFiAaoUk4vbZAVqtQLBJKBgOIKzNtqDdrUisXt4g2gjjpKxACMOtXEHToi0NjsxEH243Ouk2BAK7OsQATFuzrvcvlWAf7MfrzE7wpiqU0OUQJU1S1PUNCNAwrQdF0oE9AqcgAHyAsMowEAIQjmgAbpuCjbruYgSIw0LrCE0bogARFgNR1GApGoVyyDoV+yA4bGT4FARJZ2ERSZkXaGRZCANFAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在类型上下文中，<code>typeof</code> 接收一个值，并返回它的 TypeScript 类型。你可以把这个类型作为更大类型表达式的一部分，或者用 <code>type</code> 语句给它起个名字。</p><p>在值上下文中，<code>typeof</code> 是 JavaScript 的运行时操作符，它返回的是一个字符串，表示某个符号的运行时类型。但这和 TypeScript 的类型是两码事！JavaScript 的运行时类型系统比 TypeScript 的静态类型系统简单得多。相比 TypeScript 拥有的无限种类型，JavaScript 的 <code>typeof</code> 只能返回 8 种字符串值：<code>&quot;string&quot;</code>、<code>&quot;number&quot;</code>、<code>&quot;boolean&quot;</code>、<code>&quot;undefined&quot;</code>、<code>&quot;object&quot;</code>、<code>&quot;function&quot;</code>、<code>&quot;symbol&quot;</code> 和 <code>&quot;bigint&quot;</code>。</p><p><code>[]</code> 属性访问器在类型空间中也有长得一模一样的用法。但要注意，在值空间中，<code>obj[&#39;field&#39;]</code> 和 <code>obj.field</code> 是等价的；可是在类型空间中，它们并不等价。你必须使用前者（中括号形式）来获取另一个类型的属性类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> jane[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Or jane.first</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ―――――                    ――――――――――――― Values</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//           ―――――― ―――――――                  Types</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIYIJAEMGBZCABbOGBWAAowLClMHD0MIJMRCAyuMDoQej0TLAATOIam+gBKagAlUIShFEJiCPcPZCdIqc85+2nFleIA4NCWSdWlhdXouYOZ71jEzYm7AGEAeQBZVAGAUQBlZ5YoCDAgqFwJAHdkEMMCMQBgIIVeswLshHgA5AAiBH4AnYGAwyEucVYoHa0Hw7zg7WAQQw1BAQRyJmgUOQAAsIMB6LTDOTKdSWIJQY0ghksFBClBCcTSchWVSoHp6YzmWSKeLevjXGBacAMAA6QVEknyZCa4U04jK1VqqVMsA603Mmn8ZGpdKZWQIQIIILsSB+LDBHLgjC0uBJahpADWICwfxACvGyGAMGQhV9-pQoAo4iQWFjmOxIFxUEjLGICaS+eQEQAegB+OMJOCC72QXM0P0BjFYnHQYuFiAaoUk4vbZAVqtQLBJKBgOIKzNtqDdrUisXt4g2gRCc2kciGaTYEAAbVU64oqgAujqxBI9wewMfGNDrlBRFo1ZfwnZds4disfAt1iEwv3DgsJwfm48RJGEQA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>Person[&#39;first&#39;]</code> 在这里是一个类型，因为它出现在类型上下文中（在冒号 <code>:</code> 后）。你可以在中括号里的索引位置放入任何类型，包括联合类型或原始类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonEl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;first&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;last&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type PersonEl = string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TupleEl</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Tuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type TupleEl = string | number | Date</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EIcFZACs4ICNXTkcyALz4SZTsgDkAKXERVAGjYcqazYIBGGVcl7MA9NeLFAqAROH916+cfPX7z+QA1OFYAVwgMAls3Ny9kABUATwAHCAIYIJAEMGBZCABbOGBWAAowLClMHD0MIJMRCAyuMDoQej0TLAATOIam+gBKagAlUIShFEJiCPcPZCdIqc85+2nFleIA4NCWSdWlhdXouYOZ71jEzYm7AGEAeQBZVAGAUQBlZ5YoCDAgqFwJAHdkEMMCMQBgIIVeswLshHgA5AAiBH4AnYGAwyEucVYoHa0Hw7zg7WAQQw1BAQRyJmgUOQAAsIMB6LTDOTKdSWIJQY0ghksFBClBCcTSchWVSoHp6YzmWSKeLevjXGBacAMAA6QVEknyZCa4U04jK1VqqVMsA603Mmn8ZGpdKZWQIQIIILsSB+LDBHLgjC0uBJahpADWICwfxACvGyGAMGQhV9-pQoAo4iQWFjmOxIFxUEjLGICaS+eQEQAegB+OMJOCC72QXM0P0BjFYnHQYuFiAaoUk4vbZAVqtQLBJKBgOIKzNtqDdrUisXt4g2gjjpJocogR6sHXSbAgADaqlI5DAFgAPmpUaeALo2OzEQerlC7nBbnXcZors6xIIJVgoBR9w-FpRTlaA9HhOBIFvL81xiX9-zfBR4L-CB9wXKAYO2R9vxQxDtwUYDkAvDDiOQSDIAIIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>更多关于类型操作以及类型之间映射的方法，请参见第 15 条。</p><p>还有很多其他结构在类型空间和值空间中的含义不同：</p><ul><li>在值空间中，<code>this</code> 是 JavaScript 的 <code>this</code> 关键字（见第 69 条）；而在类型空间中，<code>this</code> 是 TypeScript 中的 “多态 this” 类型，用于在子类中实现方法链。</li><li>在值空间中，<code>&amp;</code> 和 <code>|</code> 是按位与和按位或运算符；在类型空间中，它们是交叉类型（<code>&amp;</code>）和联合类型（<code>|</code>）运算符。</li><li>在值空间中，<code>const</code> 是用来声明变量的；而在类型空间中，<code>as const</code> 会改变字面量或字面量表达式的推导类型（见第 20 条）。</li><li>在值空间中，<code>extends</code> 用于定义子类（如 <code>class A extends B</code>）；而在类型空间中，它用于定义子类型（如 <code>interface A extends B</code>）或泛型的约束（如 <code>Generic&lt;T extends number&gt;</code>）。</li><li>在值空间中，<code>in</code> 用于 <code>for</code> 循环（如 <code>for (key in object)</code>）；而在类型空间中，它用于映射类型（见第 15 条）。</li><li>在值空间中，<code>!</code> 是 JavaScript 的逻辑非操作符（如 <code>!x</code>）；而在类型空间中，它是非空断言（如 <code>x!</code>，见第 9 条）。</li></ul><p>如果你发现 TypeScript 完全无法理解你的代码，很可能是你在类型空间和值空间之间搞混了。比如说你把之前的 <code>email</code> 函数改成只接受一个参数对象（第 38 条会解释为什么要这样做）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EwAriARhgOZBAC2cYKwAUWAA5icGanjBZq6cjgA0NQQCMAVhFFcwdEPUPGsAEwCeVm-V4BKfCwD0v5AA6YIJ+IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在 JavaScript 中，你可以使用解构赋值来为对象中的每个属性创建对应的本地变量：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>如果你在 TypeScript 中尝试做同样的事情，你会遇到一些令人困惑的错误：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  ~~~~~~ Binding element &#39;Person&#39; implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //       ~~~~~~ Binding element &#39;string&#39; implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //    ~~~~~~ Binding element &#39;string&#39; implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EwAriARhgOZBAC2cYKwAUhYmCzV05HABoWAeh3EAfkePIAQqAAmDSa2kRwyAOTrsIR8mBSADq2AJgYKwAnsgAFhzIcLiOUUHuYEFeECwYggBGAFYQolxgdCD02sR6xKWGxkZmltYQtlL2YE7cBe6ePn4BwWERUU6x8YnJxGlYFkG5+fS6+qUVleYgVgU2dg6OzfSt3r7+gSHhGJHR-cgJSQS8AJT4yDoAVMgAdM-Id-r8QA" target="_blank" rel="noreferrer">💻 playground</a></p><p>问题在于 <code>Person</code> 和 <code>string</code> 被解释为值上下文。你试图创建一个名为 <code>Person</code> 的变量和两个名为 <code>string</code> 的变量。正确的做法是分开类型和值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> email</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  subject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  to</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  subject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EwAriARhgOZBAC2cYKwAULPGCwAaGoIBGAKwij1mrABMAnr2rKs1dORzqMW3aK5g6IegeMmXb+vwCU+CwA9MHIAHSRBPxAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这虽然显得更冗长，但在实际使用中，你可能会为参数创建一个命名类型，或者可以从上下文中推断出类型（见第 24 条）。</p><p>虽然类型空间和值空间中的类似结构一开始可能会让人困惑，但一旦掌握了，它们最终会作为记忆法变得很有用。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>在阅读 TypeScript 表达式时，知道如何判断自己处于类型空间还是值空间。使用 TypeScript Playground 来帮助建立这种直觉。</li><li>每个值都有一个静态类型，但这个类型只在类型空间中可以访问。像 <code>type</code> 和 <code>interface</code> 这样的类型空间结构会在编译时被擦除，在值空间中无法访问。</li><li>一些结构，如 <code>class</code> 或 <code>enum</code>，会同时引入类型和值。</li><li><code>typeof</code>、<code>this</code> 和许多其他操作符和关键字在类型空间和值空间中的含义不同。</li></ul>`,59)]))}const c=i(e,[["render",t]]);export{A as __pageData,c as default};
