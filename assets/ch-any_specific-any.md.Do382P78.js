import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D53w8jfx.js";const y=JSON.parse('{"title":"第 44 条：比起直接用 any，更推荐用更具体的替代类型","description":"","frontmatter":{},"headers":[],"relativePath":"ch-any/specific-any.md","filePath":"ch-any/specific-any.md"}'),t={name:"ch-any/specific-any.md"};function p(l,s,e,k,r,g){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="第-44-条-比起直接用-any-更推荐用更具体的替代类型" tabindex="-1">第 44 条：比起直接用 <code>any</code>，更推荐用更具体的替代类型 <a class="header-anchor" href="#第-44-条-比起直接用-any-更推荐用更具体的替代类型" aria-label="Permalink to &quot;第 44 条：比起直接用 \`any\`，更推荐用更具体的替代类型&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>每次使用 <code>any</code> 时，都要想清楚：是否真的允许传入任何 JavaScript 值？</li><li>如果有更精确的方式表达你的数据，比如 <code>any[]</code>、<code>{[id: string]: any}</code> 或 <code>() =&gt; any</code>，就优先使用这些方式，而不是直接用 <code>any</code>。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p><code>any</code> 类型代表了 JavaScript 中<strong>所有可能的值</strong>，这个范围非常大：</p><ul><li>所有数字、字符串、数组、对象</li><li>正则表达式、函数、类、DOM 元素</li><li>甚至还包括 <code>null</code> 和 <code>undefined</code></li></ul><p>换句话说，<strong>用 <code>any</code> 就等于完全放弃了类型检查</strong>。</p><p>所以当你写下 <code>any</code> 时，不妨问问自己：</p><blockquote><p>“我真的想接受任何类型的值吗？传一个函数或正则表达式进来也可以？”</p></blockquote><p>很多时候答案其实是 “不行”。这时候就应该换个更具体一点的类型，来保留一定的类型安全性。比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getLengthBad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Don&#39;t do this!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // This is better</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> array.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmCkA" target="_blank" rel="noreferrer">💻 playground</a></p><p>后面这个版本用的是 <code>any[]</code> 而不是 <code>any</code>，好处有三点：</p><ul><li>函数里对 <code>array.length</code> 的访问会有类型检查；</li><li>函数的返回值会被自动推断为 <code>number</code>，而不是 <code>any</code>；</li><li>调用 <code>getLength</code> 时，TypeScript 会检查传入的参数是否真的是数组；</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLengthBad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">123</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No error, returns undefined</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">123</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        ~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Argument of type &#39;RegExp&#39; is not assignable to parameter of type &#39;any[]&#39;.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLengthBad</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// No error, throws at runtime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//        ~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Argument of type &#39;null&#39; is not assignable to parameter of type &#39;any[]&#39;.</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmCmiYBvjE5DwAjABMAMw8rEbcfIgAcpLRlHCUADRxquoyiOAkqMAwYKgkmfY5eGSFpeUm1dyz3AB+i4sK1QCClMggALbYYnDAUrQADqiIwgBKqMgAogAeR8KhnWBwYkQyMjDIYERh+lKSI5UIg7KKURD7Q4nM7ubzCbQWLIOQx5MhgEC6XQVKr8OqIBpNVr4RoAd06RDElHAsB2w2yaTRGKx034c1mS3mK34602OzAewOUGOp2E6MxjxCLzeHy+Pz+pyggOBoOiEMFwphLDhCKAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你期望的参数是<strong>数组组成的数组</strong>，但不关心里面的具体类型，可以用 <code>any[][]</code>。</p><p>如果你期望的是某种<strong>对象类型</strong>，但不知道里面的值具体是什么，可以用：</p><ul><li><code>{ [key: string]: any }</code></li><li>或者 <code>Record&lt;string, any&gt;</code>（作用一样，写法更简洁）</li></ul><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasAKeyThatEndsWithZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;z&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, o[key])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmluDQ8Eh4RDIAggDSqLRBRFAAomAkMgDqMPgAWmRwjABKqBBwlCQAPDJQlDA4ADRMLAB8vrHAPYhk3WCDiADWpaFIcDPc3DDAC+s62LUNTsIAXsKsO7vcSzJw+npwyGRH43AeRz4md8qqdRSSggVB-XbmbiQuKApDAIi6GRgjJAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你也可以在这种情况下使用 <code>object</code> 类型，它包含所有非原始类型。不过它有点特殊：你可以枚举这些对象的键，但却无法访问它们的值。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hasAKeyThatEndsWithZ</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> object</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> o) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (key.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">endsWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;z&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(key, o[key])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //               ~~~~~~ Element implicitly has an &#39;any&#39; type</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      //                      because type &#39;{}&#39; has no index signature</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmluDQ8Eh4RDIAggDSqLRBRFAAomAkMgDqMPgAWmRwjHBhAFao0L6xwHCUiGQQCDJiANaloUhwfdzcMMDDUzrYtQ1OwgBewqzzC9yjYDJw+npwyGSrADSIcB6rPiaH3HyvH4cAfj+-iJX6AC22DEMEBAAddDAII1dLREHkZEwkMJ3MIpLRwahYod3p98R8IhAiCAZKgMVjEMIOKZ0YjEGBJDAaqgAB6IGQwZBgCpqbEfeKJKSUECoF4LczcSVxVTqRDAIi6MkmcxAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在 TypeScript 中，遍历对象类型特别棘手。第 60 条会更详细地讲解如何绕过这个问题。</p><p>如果你期望是一个函数类型，就尽量避免使用 <code>any</code>。这里有多种写法，取决于你希望定义得多具体：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fn0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // any function callable with no params</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Fn1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // With one param</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FnN</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // With any number of params</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// same as &quot;Function&quot; type</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmClC0AA6oiABiYAAMiAC8iGTspQB8TCxG3Hx1tIhW0PBIEES6ukRh+ogA7jD4iGCS2VREALYymTl5hQCMZRVUyG4sVbXuDf6IAOojeIgIeZM00-O5BWAAcqtk2s-rMpuePmU79Y38R6PuMYgaYRSinYCIC4zObcWFw+EIxFI36IGQzPJEGSIABE+XA7QQ2KkCwUQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这些写法都比 <code>any</code> 更精确，因此更推荐使用。注意在最后一个例子中，使用了 <code>any[]</code> 作为剩余参数的类型。这里用 <code>any</code> 也可以，但精确度会更差一些：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numArgsBad</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const numArgsBad: (...args: any) =&gt; any</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> numArgsBetter</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> args.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ^? const numArgsBetter: (...args: any[]) =&gt; number</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQDKrMqALAIQEMATACiICdKiBPALkSLFoEpEBvRRAeh8QAiCAORREJOInwwAzgEIAUN0roQlJFRq0AdABtsuPAG4FAXwULQkWAhTosOfBWp1GzWgG0Auuy69+ACp4soghAEboUKiUSogqUGoaLjr6jsZmChAIMmJgIAC2AIKUyDLEJIgAvIhk2nVUpW4s7JUAfEwlMnoG+CZ83NwAegD8iFlgOYh5RZ3ljLX1nU1sVe3umdm5BcWlBJHRVTV12g0yy94ta53daX38AyNjm1Pbs-uU88en5z6rL-kRGJAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>注意这些函数的返回类型是不同的。剩余参数可能是 <code>any[]</code> 类型最常见的用法。</p><p>如果你只想表示“这是一个数组”，但不关心里面的元素类型，可以考虑用 <code>unknown[]</code> 替代 <code>any[]</code>。这更推荐，因为它更安全。关于 <code>unknown</code> 类型的更多内容可以参考第 46 条。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>每次使用 <code>any</code> 时，都要想清楚：是否真的允许传入任何 JavaScript 值？</li><li>如果有更精确的方式表达你的数据，比如 <code>any[]</code>、<code>{[id: string]: any}</code> 或 <code>() =&gt; any</code>，就优先使用这些方式，而不是直接用 <code>any</code>。</li></ul>`,35)]))}const A=i(t,[["render",p]]);export{y as __pageData,A as default};
