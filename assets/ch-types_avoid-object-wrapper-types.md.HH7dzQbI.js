import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const g=JSON.parse('{"title":"第 10 条: 避免使用对象包装类型（String, Number, Boolean, Symbol, BigInt）","description":"","frontmatter":{},"headers":[],"relativePath":"ch-types/avoid-object-wrapper-types.md","filePath":"ch-types/avoid-object-wrapper-types.md"}'),e={name:"ch-types/avoid-object-wrapper-types.md"};function p(l,s,h,k,d,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第-10-条-避免使用对象包装类型-string-number-boolean-symbol-bigint" tabindex="-1">第 10 条: 避免使用对象包装类型（String, Number, Boolean, Symbol, BigInt） <a class="header-anchor" href="#第-10-条-避免使用对象包装类型-string-number-boolean-symbol-bigint" aria-label="Permalink to &quot;第 10 条: 避免使用对象包装类型（String, Number, Boolean, Symbol, BigInt）&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>避免使用 TypeScript 的对象包装类型，优先使用原始类型：用 <code>string</code> 代替 <code>String</code>，<code>number</code> 代替 <code>Number</code>，<code>boolean</code> 代替 <code>Boolean</code>，<code>symbol</code> 代替 <code>Symbol</code>，<code>bigint</code> 代替 <code>BigInt</code>。</li><li>理解对象包装类型的作用是为原始值提供方法，避免直接实例化或使用它们，<code>Symbol</code> 和 <code>BigInt</code> 是例外。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>除了对象，JavaScript 还有七种原始类型的值：字符串（string）、数字（number）、布尔值（boolean）、null、undefined、符号（symbol）和大整数（bigint）。前五种类型从 JavaScript 诞生起就存在了，而 symbol 是在 ES2015 中加入的，bigint 则是在 ES2020 中加入的。</p><p>原始类型和对象的最大区别在于：它们是<strong>不可变的</strong>，并且<strong>没有方法</strong>。你可能会反驳说，字符串不是有方法吗？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;primitive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;m&#39;</span></span></code></pre></div><p>但这里其实有点“魔术”。虽然字符串本身是原始类型、没有方法，但 JavaScript 同时定义了一个 <code>String</code> 对象类型，它是有方法的。JavaScript 会在你调用字符串方法时，<strong>自动将原始字符串“包装”成一个临时的 <code>String</code> 对象</strong>，调用完方法后再立刻丢弃这个对象。</p><p>如果你尝试修改 <code>String.prototype</code>（详见第 47 条），你就能观察到这个行为。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Don&#39;t do this!</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> originalCharAt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.charAt</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">pos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pos)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalCharAt.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, pos)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;primitive&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">charAt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEBEHsDsHIBdQBNKngCwJYGcCEAoAYxm0UgCdMBzTaAQwBsBhdO8gQUQF5QBleStCoA6AA7lI8SQE9RAU2GFWHeAG58-QSPGSZ8xcs6geAMwCu0QvEwwAFKMjYAlKADe+UKGLRskBgoZIKlsMHAAaNFk5SBM0LGwIh2d1T3I5eDNyaFAKalpGFjZORUYGEPjExyd1AF91b19-YUDg2HFMAFtMawA3OVgDIvhbAGYnavwgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>上面代码会输出：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">primitive</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> string</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">m</span></span></code></pre></div><p>方法中的 <code>this</code> 实际上是一个 <code>String</code> 对象的包装器，而不是原始的字符串。你也可以手动创建一个 <code>String</code> 对象，它有时候的表现看起来像原始字符串，但并不完全一样。</p><p>比如，一个 <code>String</code> 对象只会等于它自己，哪怕内容一样，也不会等于一个普通字符串：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span></code></pre></div><p>这种自动转换为对象包装类型的机制，解释了 JavaScript 中一个奇怪的现象 —— 如果你给一个原始类型赋值一个属性，这个属性会“消失”：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> str </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;hello&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">str.customProp </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(str.customProp) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// undefined</span></span></code></pre></div><p>这是因为当你给原始类型赋属性时，JavaScript 会临时把它包装成对象，加上属性，然后立刻把这个对象丢掉，所以下次访问时，这个属性就不见了。</p><p>除了字符串，其他原始类型也有对应的对象包装类型：<code>Number</code> 对应数字，<code>Boolean</code> 对应布尔值，<code>Symbol</code> 对应符号，<code>BigInt</code> 对应大整数（<code>null</code> 和 <code>undefined</code> 没有对应的包装对象）。</p><p>这些包装类型的存在，主要是为了方便——它们提供了方法可以在原始值上调用，也提供了一些静态方法（比如 <code>String.fromCharCode</code>）。但一般来说，我们没必要自己去手动创建这些包装对象。</p><p>TypeScript 为了区分原始类型和它们的包装对象，分别提供了不同的类型：</p><ul><li><code>string</code> 和 <code>String</code></li><li><code>number</code> 和 <code>Number</code></li><li><code>boolean</code> 和 <code>Boolean</code></li><li><code>symbol</code> 和 <code>Symbol</code></li><li><code>bigint</code> 和 <code>BigInt</code></li></ul><p>有时候我们会不小心写成包装类型的形式（尤其是你有 Java 或 C# 的背景时），而且看起来好像也能用，比如 <code>String</code>，但其实这样做并不推荐。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getStringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">foo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> foo.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getStringLen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQMpQE4zMgGVTAApg44AuRLXfASkQG8AoRRbdEbJcuAOgA2xZFAAWAbhYBfFizSYceQsRIAiMakGC4a+hPYB6Q4gDyAaXnpayoqTCoA7jSX51m7bvr6jJiyyA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但当你把一个 <code>String</code> 对象传给一个期望接收原始 <code>string</code> 的方法时，事情就会出问题了：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isGreeting</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">phrase</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;hello&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;good day&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">includes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(phrase)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                                    ~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Argument of type &#39;String&#39; is not assignable to parameter of type &#39;string&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // &#39;string&#39; is a primitive, but &#39;String&#39; is a wrapper object.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Prefer using &#39;string&#39; when possible.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABDAzgcQE4FMuzAcwAoAHACwwEMUsAuRAZSgxgIEpEBvAKEUWyhAYkAbQDkpLABtJcUQBpEo-HDgATRKooBPUQF0AdCwiSQqrChLkqWVgG4eiAPSPert+4+eviAH5--Ds6IAIIY+CAAtlhgUIhwwIhQWsRYiozMBKLIKIhgcLFUKDD4YBQARpKpUHCIxBSUUVBYGHEJSSmKKEws+KL6gS6iXRm92YgUtcwRMLAAblgKZSCxouk9WajjiADulMQpLXBlAFZY0P28QQAK2MDNiCBFBJ3dmTsSSMRwKEUVWP0AXy4QA" target="_blank" rel="noreferrer">💻 playground</a></p><p>所以，<code>string</code> 可以赋值给 <code>String</code>，但 <code>String</code> 不能赋值给 <code>string</code>。是不是有点绕？只要照着 TypeScript 提示的建议来，用 <code>string</code> 就好。TypeScript 自带的类型声明和大多数库的类型定义也都是用的 <code>string</code>。</p><p>还有一种容易误用包装类型的情况是你手动写了大写开头的类型注解，比如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> s</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;primitive&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> n</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYewdgzgLgBBBcMDKUBOBLMBzGBeGARAA4YC26U6AbgKYEDcAUKJLGIgHICupARjajwwAjACYmLaDF6IAQiBAAbGgEMwQtFxpMgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这只是改了 TypeScript 的类型标注，<strong>并不会改变运行时的值</strong>（参考第 3 条）。它们依然是原始类型，不是对象。但 TypeScript 允许这样写，因为原始类型是可以赋值给包装对象类型的。不过这些注解既容易误导，也没必要（参考第 18 条），最好还是坚持使用原始类型。</p><p>最后补充一点，调用 <code>BigInt</code> 和 <code>Symbol</code> 时可以不加 <code>new</code>，因为它们本身就返回原始类型的值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BigInt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;bigint&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> typeof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Symbol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;sym&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;symbol&#39;</span></span></code></pre></div><p>这里的 <code>BigInt</code> 和 <code>Symbol</code> 是生成值的函数，返回的是 <code>bigint</code> 和 <code>symbol</code> 类型的值，而不是 TypeScript 类型（参考第 8 条）。你也可以直接在数字后面加个 <code>n</code> 来创建 bigint，比如 <code>123n</code>。</p><p>如果你的项目用了 <code>typescript-eslint</code>，其中的 <code>ban-types</code> 规则会禁止使用包装对象类型。这在 <code>@typescript-eslint/recommended</code> 配置中是默认启用的。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>避免使用 TypeScript 的对象包装类型，优先使用原始类型：用 <code>string</code> 代替 <code>String</code>，<code>number</code> 代替 <code>Number</code>，<code>boolean</code> 代替 <code>Boolean</code>，<code>symbol</code> 代替 <code>Symbol</code>，<code>bigint</code> 代替 <code>BigInt</code>。</li><li>理解对象包装类型的作用是为原始值提供方法，避免直接实例化或使用它们，<code>Symbol</code> 和 <code>BigInt</code> 是例外。</li></ul>`,40)]))}const c=i(e,[["render",p]]);export{g as __pageData,c as default};
