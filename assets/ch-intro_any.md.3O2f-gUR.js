import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const o=JSON.parse('{"title":"第 5 条：限制 any 类型的使用","description":"","frontmatter":{},"headers":[],"relativePath":"ch-intro/any.md","filePath":"ch-intro/any.md"}'),e={name:"ch-intro/any.md"};function p(h,s,l,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第-5-条-限制-any-类型的使用" tabindex="-1">第 5 条：限制 any 类型的使用 <a class="header-anchor" href="#第-5-条-限制-any-类型的使用" aria-label="Permalink to &quot;第 5 条：限制 any 类型的使用&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>TypeScript 的 <code>any</code> 类型会关闭大部分类型检查，让变量变得“随意”。</li><li>使用 <code>any</code> 会导致：失去类型安全、破坏参数约定、影响开发体验、增加重构风险、隐藏类型设计，并削弱对 TypeScript 的信任。</li><li><strong>尽量避免使用 <code>any</code>！</strong></li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>TypeScript 的类型系统是渐进式和可选的：渐进式是因为你可以逐步为代码添加类型（通过 <code>noImplicitAny</code>），可选是因为你可以随时禁用类型检查器。这些特性的关键是 <code>any</code> 类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ageInYears</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ageInYears </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~~~~~~~ Type &#39;string&#39; is not assignable to type &#39;number&#39;.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ageInYears </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;12&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAhg5iCSA7AmiKAnAzgLgogrgLYBGI6A3AFCwIppYQC8EA5AIwBMLVA9DxAD8hwgRAAqATwAOIVpjDoAlohgsIizHgD2kKJkyKYiKMVAQwW89NksCJMiwB01OElQZNzdl2iaoiCXIICD4IAHkAaUogA" target="_blank" rel="noreferrer">💻 playground</a></p><p>类型检查器在这里提示是正确的，但你可以通过将其类型指定为 <code>any</code> 来消除这个警告。</p><p>在开始使用 TypeScript 时，当你不理解某个错误、认为类型检查器的判断有误，或者只是懒得写类型声明时，很容易会使用 <code>any</code> 类型和类型断言（<code>as any</code>）。</p><p>在某些情况下，这样做是可以接受的，但要注意，使用 <code>any</code> 会丧失许多 TypeScript 带来的优势。在使用之前，你至少应当了解它的风险。</p><h3 id="any-类型没有类型安全" tabindex="-1"><code>any</code> 类型没有类型安全 <a class="header-anchor" href="#any-类型没有类型安全" aria-label="Permalink to &quot;\`any\` 类型没有类型安全&quot;">​</a></h3><p>在前面的例子中，类型声明表明 <code>ageInYears</code> 是一个数字。但 <code>any</code> 允许你将一个字符串赋值给它。类型检查器会认为它是一个数字（毕竟你声明了它是数字），而这种混乱将无法被捕获：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ageInYears </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK; at runtime, ageInYears is now &quot;121&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAhg5iCSA7AmiKAnAzgLgogrgLYBGI6A3AFCwIppYQC8EA5AIwBMLVA9DxAD8hwgRAAqATwAOIVpjDoAlohgsIizHgD2kKJkyKYiKMVAQwW89NksCJMiwB01OElQZNzdl2iaoiCXIICD4IAHkAaRdadwYAamY2IJD+SKCoSHR8RDBFQhAAGmhXOg91TUQtAHcIACJONlrKIA" target="_blank" rel="noreferrer">💻 playground</a></p><h3 id="any-类型非常宽松" tabindex="-1"><code>any</code> 类型非常宽松 <a class="header-anchor" href="#any-类型非常宽松" aria-label="Permalink to &quot;\`any\` 类型非常宽松&quot;">​</a></h3><p>当你写一个函数时，你是在设定规则：如果传入某种类型的输入，就会返回预期的输出。但使用 <code>any</code> 类型后，你就能绕过这些规则，随意传入任何类型的值。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">birthDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> birthDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;1990-01-19&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(birthDate) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAhg5iCSA7AmiKAnAzgLgogrgLYBGI6A3AFCwIppYQC8EA5AIwBMLVA9DxAD8hwgRAAqATwAOIVpjDoAlohgsIizHgD2kKJkyKYiKMVAQwW89NksCJMiwB01OElQZNzdl2iaoiCXIICD4IAHkAaUoAM3xEAGMwRS1ECHioYHj8YCgwEABBOAAKYkV0MAALABFckFwavIBKXDtSdAgAb0pg0IBhMIBZAAUAJQBRAGUJ7oh0cHx0VIAGKh7+MYA5KsoAX0pKUEhS8ura3H8JJlY2AE4bpYBaJbYH2+5KdMzs2sKQErLKg0QI0giF+JF9kA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>birthDate</code> 参数应该是一个 <code>Date</code> 类型，而不是一个字符串。<code>any</code> 类型让你打破了 <code>calculateAge</code> 的规则。这尤其有问题，因为 JavaScript 常常会隐式地在类型之间进行转换。有时字符串可以替代数字正常工作，但在其他情况下却会出错。</p><h3 id="any-类型没有智能提示" tabindex="-1"><code>any</code> 类型没有智能提示 <a class="header-anchor" href="#any-类型没有智能提示" aria-label="Permalink to &quot;\`any\` 类型没有智能提示&quot;">​</a></h3><p>当一个变量的类型不是 <code>any</code> 时，TypeScript 可以提供智能补全和上下文文档提示。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262059882.png" alt="The TypeScript Language Service is able to provide contextual autocomplete
for symbols with types."></p><p>但如果变量的类型是 <code>any</code>，那就没有任何提示了。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262102260.png" alt="There is no autocomplete for properties on symbols with any types."></p><p>重命名也是类似的功能之一。如果你有一个 <code>Person</code> 类型，以及用于格式化人名的函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">first</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatNameAny</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">first</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAXMhVKAOYDcRyANnBdbQ8wL4EEEOCiSxQAtnDAA5OOJQBeZAAoADtXTkcASmQKAfMgAGAEjyqAdKXJheyM5fYVeR5kJAiYYyTLkQAgiAAnnoq6shwwboGxg5WZM725hZOtq4EQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>然后，你可以在编辑器中选中 <code>first</code>，选择“重命名符号”，将其改为 <code>firstName</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262104886.png" alt="Renaming a symbol in VS Code."></p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262104824.png" alt="Choosing the new name."></p><p>这样会修改 <code>formatName</code> 函数中的 <code>first</code>，但不会影响 <code>any</code> 类型的那一版：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  firstName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">firstName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> formatNameAny</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`\${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">first</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">last</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgArQM4HsTIN4BQyyMwUGYAcnALYQBcyFUoA5gNxHIA2cFjzNpwC+BBDgoksUGnCq0UAXmQAKAA6N05HAEpkigHzIABgBI8agHSly8usOTmrvCsOOdxISTGmy7EAEEQAE99VQ1kOBC9QxMnazJXRwtLFzA3TiA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 的标语之一是“能扩展的 JavaScript”。其中“扩展”的关键之一就是语言服务，它是 TypeScript 体验的重要组成部分（详见第 6 条）。如果失去了这些服务，不仅会降低你的开发效率，也会影响与你协作的其他人。</p><h3 id="any-类型会在重构时掩盖-bug" tabindex="-1"><code>any</code> 类型会在重构时掩盖 bug <a class="header-anchor" href="#any-类型会在重构时掩盖-bug" aria-label="Permalink to &quot;\`any\` 类型会在重构时掩盖 bug&quot;">​</a></h3><p>假设你正在开发一个 Web 应用，用户可以选择某个项目。其中一个组件可能会有一个 <code>onSelectItem</code> 回调函数。给 <code>item</code> 定义类型感觉有点麻烦，所以你暂时用 <code>any</code> 代替：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSelectItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMIHsC2AHdILgAKU62AzsgN4BQyyeAyhADYQJgCSkmAXMgBTBufOCACeASmQBeAHzIAbumAATANzUAvtSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>下面是调用该组件的代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> handleSelectItem</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  selectedId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> item.id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">renderSelector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ onSelectItem: handleSelectItem })</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMIHsC2AHdILgAKU62AzsgN4BQyyeAyhADYQJgCSkmAXMgBTBufOCACeASmQBeAHzIAbumAATANzUAvtRgBXEO2B5kUAiuhNW7dFH7YS5Phhx4CYYqTJTKyAPQAqZAA6EOR-X2RtalYwZDIWNkgVDhU+EF1MACNoGWQABg09AzAjEGQAC1EVVktErghMQWFkUUkqWjiE9ghklVyhBqDVDSjTEHMoWutbSkYuzmbK8Zr5+sxNCQ0gA" target="_blank" rel="noreferrer">💻 playground</a></p><p>后来，你对选择器进行了改动，使得直接把整个 <code>item</code> 对象传递给 <code>onSelectItem</code> 变得不太方便。但这没关系，因为你只需要它的 ID。所以，你修改了 <code>ComponentProps</code> 中的函数参数类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ComponentProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onSelectItem</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">id</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMIHsC2AHdILgAKU62AzsgN4BQyyeAyhADYQJgCSkmAXMgBTAAJnxABXTACNoASmQBeAHzIAbumEBuagF9qQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你更新了组件，类型检查器也没报错，大功告成！</p><p>……但真的吗？<code>handleSelectItem</code> 的参数是 <code>any</code>，所以无论传进来的是 <code>item</code> 还是 <code>ID</code>，它都不会报错。结果，代码在运行时抛出了异常，而类型检查器却毫无察觉。</p><p>如果你当初使用了更具体的类型，这个问题就能更早被类型检查器发现，从而避免问题产生。</p><h3 id="any-让你的类型设计变得隐晦" tabindex="-1"><code>any</code> 让你的类型设计变得隐晦 <a class="header-anchor" href="#any-让你的类型设计变得隐晦" aria-label="Permalink to &quot;\`any\` 让你的类型设计变得隐晦&quot;">​</a></h3><p>在应用程序中，某些对象（比如应用状态）可能会非常复杂，包含几十个属性。你可能觉得给这些属性一一定义类型太麻烦，干脆用 <code>any</code> 省事。</p><p>这样做的问题不仅仅是前面提到的那些，还会让你的状态设计变得隐晦。第四章会讲到，良好的类型设计对编写清晰、正确、易懂的代码至关重要。而 <code>any</code> 让你的类型设计变得隐晦，导致代码可读性下降，甚至连你自己都难以判断这个设计是否合理。如果你的同事帮你审核代码，他们需要先搞清楚这个 <code>any</code> 到底代表什么，而不是直接看到清晰的类型定义。写明类型，能让大家一目了然。</p><h3 id="any-会削弱你对类型系统的信任" tabindex="-1"><code>any</code> 会削弱你对类型系统的信任 <a class="header-anchor" href="#any-会削弱你对类型系统的信任" aria-label="Permalink to &quot;\`any\` 会削弱你对类型系统的信任&quot;">​</a></h3><p>每次类型检查器帮你发现一个错误，你都会更信赖 TypeScript。但如果你在运行时碰到类型错误，而 TypeScript 之前毫无察觉，你对它的信任度就会下降。</p><p>如果你在团队里推广 TypeScript，而代码里到处都是 <code>any</code>，你的同事可能会怀疑 TypeScript 真的值得投入精力吗？许多这种“漏掉的错误”都是 <code>any</code> 造成的。</p><p>TypeScript 本来是为了让开发更轻松，但如果代码里 <code>any</code> 太多，可能会比纯 JavaScript 还难用。因为你不仅要处理类型错误，还要自己记住变量的真实类型。理想情况下，你的类型应该尽可能准确，这样 TypeScript 就能帮你记住这些信息，而不是让你自己去猜。</p><p>当然，有时候 <code>any</code> 还是不可避免的。不过，使用 <code>any</code> 也有更好的方式来降低它的负面影响，具体方法可以参考第五章。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>TypeScript 的 <code>any</code> 类型会关闭大部分类型检查，让变量变得“随意”。</li><li>使用 <code>any</code> 会导致：失去类型安全、破坏参数约定、影响开发体验、增加重构风险、隐藏类型设计，并削弱对 TypeScript 的信任。</li><li><strong>尽量避免使用 <code>any</code>！</strong></li></ul>`,57)]))}const y=i(e,[["render",p]]);export{o as __pageData,y as default};
