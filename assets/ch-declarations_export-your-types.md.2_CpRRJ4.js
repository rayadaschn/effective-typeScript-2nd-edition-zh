import{_ as i,c as a,o as t,ag as e}from"./chunks/framework.D53w8jfx.js";const d=JSON.parse('{"title":"Item 67: Export All Types That Appear in Public APIs","description":"","frontmatter":{},"headers":[],"relativePath":"ch-declarations/export-your-types.md","filePath":"ch-declarations/export-your-types.md"}'),n={name:"ch-declarations/export-your-types.md"};function p(l,s,h,k,r,g){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="item-67-export-all-types-that-appear-in-public-apis" tabindex="-1">Item 67: Export All Types That Appear in Public APIs <a class="header-anchor" href="#item-67-export-all-types-that-appear-in-public-apis" aria-label="Permalink to &quot;Item 67: Export All Types That Appear in Public APIs&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Export types that appear in any form in any public method. Your users will be able to extract them anyway, so you may as well make it easy for them.</li><li>导出在任何公共方法中以任何形式出现的类型。你的用户反正能够提取它们，所以不如直接让他们更容易获取。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>使用 TypeScript 足够长时间后，你最终会发现自己想要使用第三方库中的某个类型或接口，结果却发现它没有被导出。这对库的用户来说只是一个麻烦。正如你将看到的，任何作为公共 API 一部分的类型实际上都是被导出的，即使没有明确导出。作为库的作者，这意味着你应该从一开始就导出你的类型，以便为用户提供便利。</p><p>假设你想要创建一些私有的、未导出的类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretSanta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretName</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  gift</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getGift</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">gift</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SecretSanta</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoQVCYBycC2KA3gFDLIzBQDOYAXMrVKAOYDcZyANnLQ06w4BfEiVCRYiFOkzZUccHGSlyIAhAYysudR3ItgMeozDMQ7EiJIQAHgAcA9lDAUAriARhgDkMhbYAcUMwAAo1Qk0MbTxCABo-YP5TVgBKSNkweUVlTgB6XOQAYQB5AFkABQAlAFFUVE5tVyhfFXJkcI0ctrbKGmMAcgARBX7Yzm6ePmR+gDURse6hBbaDIwZ+0sQAIQcHAGtkcqgHUc4hPWR85GqcQctRIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>作为你模块的用户，我无法直接导入 <code>SecretName</code> 或 <code>SecretSanta</code>，只能导入 <code>getGift</code>。但这更像是一种烦恼而不是严格的障碍：因为这些类型出现在导出的函数签名中，我可以提取它们。一种方法是使用 <code>Parameters</code> 和 <code>ReturnType</code> 泛型类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MySanta</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ReturnType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getGift&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type MySanta = SecretSanta</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> getGift&gt;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//   ^? type MyName = SecretName</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoQVCYBycC2KA3gFDLIzBQDOYAXMrVKAOYDcZyANnLQ06w4BfEiVCRYiFOkzZUccHGSlyIAhAYysudR3ItgMeozDMQ7EiJIQAHgAcA9lDAUAriARhgDkMhbYAcUMwAAo1Qk0MbTxCABo-YP5TVgBKSNkweUVlTgB6XOQAYQB5AFkABQAlAFFUVE5tVyhfFXJkcI0ctrbKGmMAcgARBX7Yzm6ePmR+gDURse6hBbaDIwZ+0sQAIQcHAGtkcqgHUc4hPWR85GqcQctRMABPOxRSx6ywJQBeZErsJpAABVnhAADxPF4OGB+QLBAB8HCu5AAegB+ZAQ17vBSfZA-LRyHFwEiY5BvGIoH7lOBQdQSajgkFQmFgIJGOEAbQADABdREFFHo0nk9R4tBRbAUkhAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你不导出这些类型的目的是为了保持灵活性，那么游戏结束了！你已经通过将它们放在公共 API 中而承诺了它们。为你的用户做件好事，导出它们吧。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>导出在任何公共方法中以任何形式出现的类型。你的用户反正能够提取它们，所以不如直接让他们更容易获取。</li></ul>`,14)]))}const A=i(n,[["render",p]]);export{d as __pageData,A as default};
