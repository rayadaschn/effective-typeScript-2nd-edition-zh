import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const E=JSON.parse('{"title":"第 6 条: 使用编辑器来查询和探索类型系统","description":"","frontmatter":{},"headers":[],"relativePath":"ch-types/editor.md","filePath":"ch-types/editor.md"}'),p={name:"ch-types/editor.md"};function e(l,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="第-6-条-使用编辑器来查询和探索类型系统" tabindex="-1">第 6 条: 使用编辑器来查询和探索类型系统 <a class="header-anchor" href="#第-6-条-使用编辑器来查询和探索类型系统" aria-label="Permalink to &quot;第 6 条: 使用编辑器来查询和探索类型系统&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>使用支持 TypeScript 语言服务的编辑器，以充分发挥其优势。</li><li>通过编辑器来培养对 TypeScript 类型系统的直觉，并理解 TypeScript 是如何推导类型的。</li><li>熟悉 TypeScript 提供的重构工具，比如符号重命名、文件重命名等功能。</li><li>学会查看类型声明文件，了解它们是如何描述行为的。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>安装 TypeScript 后，你会得到两个可执行文件：</p><ul><li><code>tsc</code>，即 TypeScript 编译器</li><li><code>tsserver</code>，即 TypeScript 独立服务器</li></ul><p>你可能会直接运行 TypeScript 编译器 <code>tsc</code>，但 <code>tsserver</code> 同样重要，因为它提供了语言服务，包括自动补全、检查、导航和重构。你通常通过编辑器使用这些服务。如果你的编辑器没有配置这些服务，那你可就错过了！像自动补全这样的服务正是 TypeScript 的优势之一。</p><p>除了便利性之外，编辑器还是最适合你构建和测试类型系统的工具。这将帮助你建立 TypeScript 类型直觉。了解什么时候 TypeScript 可以自动推断类型，这对编写简洁、符合规范的代码至关重要（见第 18 条）。</p><p>通常可以将鼠标悬停在一个变量符号上，查看 TypeScript 对它的类型定义。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262124257.png" alt="An editor (VS Code) showing that the inferred type of the num symbol is
number."></p><p>上面代码中，并未对 <code>num</code> 进行显式类型声明，但 TypeScript 编辑器推断出它的类型是 <code>number</code>。</p><p>编辑器也可以对函数进行类型推断，并显示函数参数的类型。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262126688.png" alt="Using an editor to reveal the inferred return type for a function."></p><p>需要注意的信息是 TypeScript 推断出的返回类型为 <code>number</code>。如果这与预期不符，你应该添加类型声明并找出差异（见第 9 条）。</p><p>查看 TypeScript 在任何给定时刻对变量类型的推断，对于培养你对类型系统的直觉非常重要，特别是关于类型扩展（见第 20 条）和类型收缩（见第 22 条）。观察变量在条件分支中的类型变化，是增强对类型系统信心的绝佳方式。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262128842.png" alt="The type of message is string | null outside the branch, but string
inside."></p><p>你可以检查一个较大对象中的单个属性，查看 TypeScript 对它们的推断结果。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262129782.png" alt="Inspecting how TypeScript has inferred types in an object"></p><p>如果你的意图是让 <code>x</code> 成为一个元组类型（<code>[number, number]</code>），那么需要添加类型注解。</p><p>要查看在一连串操作中的推断泛型类型，可以检查方法名称。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262130802.png" alt="Revealing inferred generic types in a chain of method calls"></p><p><code>Array&lt;string&gt;</code> 表明 TypeScript 理解了 <code>split</code> 方法产生了一个字符串数组。虽然在这个例子中并没有太多的歧义，但这个信息在编写和调试长链函数调用时非常重要。TypeScript 还为 <code>slice</code> 方法提供了有用的文档。第 68 条将解释这是如何运作的。</p><p>在编辑器中看到类型错误也是学习类型系统细节的好方法。例如，这个函数试图通过 ID 获取一个 <code>HTMLElement</code>，或者返回一个默认的元素。TypeScript 标记了两个错误：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">elOrId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elOrId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elOrId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // ~~~ Type &#39;HTMLElement | null&#39; is not assignable to type &#39;HTMLElement&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (elOrId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elOrId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ^? (parameter) elOrId: string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elOrId)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ~~~ Type &#39;HTMLElement | null&#39; is not assignable to type &#39;HTMLElement&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQKIBtUFtVhQAUqWA8gE4CSAJgFyIDOUFMYyiAPogBIAqAWQAy2PAShdEYEFiwBKBv2Gj8hRAG8AUIkQxgiIlACeAB1Rx9pSrUQBee4gDkcAEYArVNEdyN2nYgp0EAokK2oaAG4-HQB6GMQAPyTEPlNUJyURHFUJbmlZR11GKTgJAENGRhhkMDKXHEQoOEa0jMEssUJHPwBfRFJGdL0DMJt7WykZeV9-AKCQxBo4CBAcgDoXOBojKJ0ev1GaPzjEAD0AfgMTMooy-ChUCh9DhmZWdj9AqGCkJZX1tCYbLiABCRloJHI4Tku0QJySCRSrUcmRU4kk+SwhRgxTApUQFSqNTqDSaLTMbWUwK6mn2QA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在 <code>if</code> 语句的第一个分支中的意图是将结果过滤为仅包含对象，即 <code>HTMLElement</code>。但奇怪的是，在 JavaScript 中，<code>typeof null</code> 的结果是 <code>&quot;object&quot;</code>，因此在这个分支中，<code>elOrId</code> 仍然可能是 <code>null</code>。你可以通过将 <code>null</code> 检查放在前面来修复这个问题。第二个错误是因为 <code>document.getElementById</code> 可能返回 <code>null</code>，所以你需要处理这种情况，可能是通过抛出一个异常：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">elOrId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (elOrId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.body</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elOrId </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> elOrId</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //     ^? (parameter) elOrId: HTMLElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> el</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(elOrId)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //                                 ^? (parameter) elOrId: string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">el) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`No such element \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">elOrId</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> el</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //     ^? const el: HTMLElement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAcwKZQKIBtUFtVhQAUqWA8gE4CSAJgFyIDOUFMYyAPgBIAqAsgBlseAlA5gQWLAEoGvQcPyFEAbwBQiRDGCIS5ajUQBeE4glTpqjZsQV0ICkhpwIIJVAB0AIzg0AngDc1gC+iKSMqFo6RFB+AA6ocDqklLTGpgDkcF4AVqjQGZbqNrb2jmH6tEElAPQ1JYgAegD8unEAhhTt+FCoFJYpBnL8QjjuIdYQCMwVxojOru4eaJhjogBCfrR6qTTS1Yh1DccnpyctbZ3d6H0DlfRMLGzI1tq6AISkRdaaUAAWFDgAHczKgQRgKICKEQAAYAOTgTBAED+FREygAJCpBrRgjD9hNNHYoA4kKQDkcShcpmAZqRhgo1oQ1ME1EA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 的语言服务还提供了重构工具。其中最简单但最有用的工具之一是重命名符号。这比查找和替换要复杂，因为相同的名称可能在不同的地方引用不同的变量。例如，在这段代码中，存在三个名为 <code>i</code> 的不同变量：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAlhC8EAYDcAoAZgewE4QBSkhnmWggB4IBGEqAaloEoIBvFCCAYwwDsBnDUADpgGAOa4oDVO1bt2BUvEoAmaXK58BIYWIlS2EAL4pjG-kJHjJqIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在 VS Code 中，如果你点击 <code>for</code> 循环中的 <code>i</code> 并按下 F2，一个文本框会弹出，允许你输入一个新的名称。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262150699.png" alt="Renaming a symbol in your editor."></p><p>当你的代码被重构时，只有与重命名的 <code>i</code> 相关的引用会被更改。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 12</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/DYUwLgBAlhC8EAYDcAoAZgewE4QBSkgA85EkJiAeCARmXIGp6BKCAbxQggGMMA7AZwygAdMAwBzXISapO7TpwLQS1AEyyFPAUJCiJuKDI4QAvijNbBIsZMOogA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你重命名一个从其他模块导入的符号，相关的导入也会自动更新。TypeScript 还提供了许多实用的重构功能，比如重命名或移动文件（会自动更新所有导入），以及将某个符号移动到新文件中。熟悉这些功能可以大幅提升你在大型 TypeScript 项目中的开发效率。</p><p>此外，TypeScript 的语言服务还能帮助你快速浏览自己的代码、外部库和类型声明。例如，如果你在代码中看到全局 <code>fetch</code> 函数的调用，并想了解更多细节，你的编辑器应该会提供“跳转到定义”功能。在我的编辑器里，它的界面类似如下。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202503262153154.png" alt="The TypeScript language service provides a “Go to Denition” feature that should be available in your editor."></p><p>选择这个选项后，你会进入 <em>lib.dom.d.ts</em>，这是 TypeScript 内置的 DOM 类型声明文件。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fetch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInit</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Response</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/CYUwxgNghgTiAEAzArgOzAFwJYHtVJAzAAsAKAKHni1QAdkMAueAJRAEdkQBnDASVSIc8AD7wAqiwAyAGmqosGAPzM2nHvwUZyASmYAFGDgC2WbiAA8bbrTzmAfAG5yQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你会看到 <code>fetch</code> 返回一个 <code>Promise</code>，并接受两个参数。点击 <code>RequestInfo</code> 后，你会跳转到这里：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span></code></pre></div><p>从这里你可以继续跳转到 <code>Request</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  prototype</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> URL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">init</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> undefined</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Request</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoQI4FcIGczIQAekIAJrsgEID2ZAnsgN4BQyyA9B8gHR8sBfFmQgIANnCgoAbpLSYc+AFzM2yAA5QaYbfXUQV6bHjABuNSAgB3ABSh1WMIYUmAkiBg1kAH2QBVVAAZABpkUGAwAH5nY3x3CJ9kLHIIGFAIMgBKGMUzQXMgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在这里，你会发现 <code>Request</code> 的类型和具体实现是分开的（参考第 8 条）。你之前已经见过 <code>RequestInfo</code>，继续点击 <code>RequestInit</code>，就能看到构造 <code>Request</code> 时可用的所有选项。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestInit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> BodyInit</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  cache</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestCache</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  credentials</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RequestCredentials</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  headers</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HeadersInit</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoQI4FcIGcwCSIwYyA3gFDLIBGA9gCYCeA-AFzIBCjTRJyAH2QgsAG1EBuKsgSIAFhHZpMOfAGF5EKdQRQIDCOGBxRuJemx4wavQaMnc25ArgGoZjgAkIr6Lj5gTgD0QcgAdBEUAL4UQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这里还有许多类型可以继续追踪，但你已经明白大概的思路了。刚开始阅读类型声明可能会有点吃力，但它们是一个很好的途径，让你了解 TypeScript 能做什么、你所使用的库是如何建模的，以及如何调试错误。关于类型声明的更多内容，请参阅第 8 章。</p><h3 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h3><ul><li>使用支持 TypeScript 语言服务的编辑器，以充分发挥其优势。</li><li>通过编辑器来培养对 TypeScript 类型系统的直觉，并理解 TypeScript 是如何推导类型的。</li><li>熟悉 TypeScript 提供的重构工具，比如符号重命名、文件重命名等功能。</li><li>学会查看类型声明文件，了解它们是如何描述行为的。</li></ul>`,53)]))}const y=i(p,[["render",e]]);export{E as __pageData,y as default};
