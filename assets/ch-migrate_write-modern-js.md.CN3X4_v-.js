import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const c=JSON.parse('{"title":"第 79 条：编写现代 JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"ch-migrate/write-modern-js.md","filePath":"ch-migrate/write-modern-js.md"}'),e={name:"ch-migrate/write-modern-js.md"};function p(l,s,h,r,k,o){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="第-79-条-编写现代-javascript" tabindex="-1">第 79 条：编写现代 JavaScript <a class="header-anchor" href="#第-79-条-编写现代-javascript" aria-label="Permalink to &quot;第 79 条：编写现代 JavaScript&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li><strong>环境无关的现代 JS</strong>：TypeScript 让你无视运行时环境限制，尽享新特性红利，同时提升代码质量与类型推断</li><li><strong>迁移两大核心</strong>：优先采用<strong>ES 模块</strong>和<strong>类</strong>语法</li><li><strong>用 TS 学 JS</strong>：通过 TypeScript 的类型提示学习类、解构、<code>async/await</code>等特性</li><li><strong>追踪动态</strong>：关注<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">TC39 GitHub</a>和 TypeScript 更新日志</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>TypeScript 不仅能检查代码类型安全，还能将其编译回至 2009 年的 ES5 等任何 JavaScript 版本。由于 TypeScript 是 JavaScript 最新版本的超集，这意味着你可以把<code>tsc</code>当作“转译器”(transpiler)——它能将新 JavaScript 代码转换为更老旧、兼容性更好的 JavaScript 代码。</p><p>换个角度看，当你决定将现有 JavaScript 代码库迁移到 TypeScript 时，采用所有最新 JavaScript 特性有百利而无一害。事实上，这反而大有裨益：因为 TypeScript 本就是为现代 JavaScript 设计的，先升级 JS 代码正是迈向 TypeScript 的重要第一步。</p><p>由于 TypeScript 是 JavaScript 的超集，学习编写更现代、地道的 JavaScript 也意味着你在学习编写更好的 TypeScript。</p><p>本条将介绍现代 JavaScript（这里定义为 ES2015/ES6 及之后版本）的核心亮点。如需深入细节，可参考其他书籍或网络资源。若遇到不熟悉的概念，建议主动学习——比如在接触<code>async/await</code>等新特性时，TypeScript 能提供远超你当前理解的精准指导。</p><p>虽然这些特性都值得掌握，但对 TypeScript 迁移最关键的是<strong>ECMAScript 模块</strong>和<strong>ES2015 类</strong>。我们将优先探讨这两点，再简要列举其他亮点。如果你的项目已采用这些特性，恭喜！迁移难度会大幅降低。</p><h3 id="采用-ecmascript-模块" tabindex="-1">采用 ECMAScript 模块 <a class="header-anchor" href="#采用-ecmascript-模块" aria-label="Permalink to &quot;采用 ECMAScript 模块&quot;">​</a></h3><p>在 2015 版 ECMAScript（ES）之前，JavaScript 缺乏官方的模块拆分方案。开发者曾用多种变通方法：多个<code>&lt;script&gt;</code>标签、手动合并代码、Makefile 工具，或是 Node.js 的<code>require</code>语句和 AMD 的<code>define</code>回调。TypeScript 甚至曾拥有自己的模块系统（参见第 72 条）。</p><p>如今标准已统一：<strong>ECMAScript 模块</strong>（即<code>import</code>/<code>export</code>语法）。如果你的代码仍堆在单一文件中，或还在使用代码合并等旧方案，是时候切换到 ES 模块了。这可能需要配置 webpack 或 ts-node 等工具。TypeScript 对 ES 模块的支持最完善，采用它们能显著降低迁移难度——特别是允许逐个迁移模块（详见第 82 条）。</p><p>具体操作因环境而异。例如，若你当前使用 CommonJS 的<code>require</code>：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CommonJS</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./b&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b.name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.js</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Module B&#39;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">exports</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name }</span></span></code></pre></div><p>对应的 ES 模块写法如下：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ECMAScript模块</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./b&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(b.name)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Module B&#39;</span></span></code></pre></div><p>你可以在 TypeScript 中使用 ES 模块语法，同时让编译输出的 JavaScript 保持原有模块系统（比如 CommonJS）。只需在<code>tsconfig.json</code>中将<code>module</code>选项设为<code>&quot;commonjs&quot;</code>，TypeScript 就会自动把上面的 ES 模块代码转译成类似这样的 CommonJS 代码。</p><h3 id="改用类替代原型" tabindex="-1">改用类替代原型 <a class="header-anchor" href="#改用类替代原型" aria-label="Permalink to &quot;改用类替代原型&quot;">​</a></h3><p>JavaScript 原本采用灵活的原型继承模型，但大多数开发者更倾向使用更结构化的类模型。这一偏好最终被语言官方采纳——ES2015 正式引入了<code>class</code>关键字。</p><p>如果你的代码目前直接操作原型链，建议改用类语法。例如，将这样的原型写法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">prototype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> marie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Marie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Curie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABABQKYCcDOCAUwZZQA0iANgIaZQCUiA3gFCKJQAWMmAdPoYgLyIeVANxMW7LhSr8ylKKIC+DBmiwJOAB3RwoOgJ4bUnAOaooAOXIBbVDNCRYuWo2bozIdEjYduBaQGpEAHJgxEDvSTlFZQgEaStydBhbATBUAHcUDGwwHCCAWUTkoJIggGEPYupRWLBsUiNSOGMcBKSjUwtrVBxqaoYgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>转换为更清晰的类语法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">first</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">last</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> first</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.first </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39; &#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> marie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Marie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Curie&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(marie.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAKCmAnCB7AdtA3gKGtY6EALogK7BEqIAUAZgJbJEA004xAlFrntEQBb0IAOgZNoAXmhjiAbh54BQ4eyKS2kIvLwBfbDwDm8IgDkwAW3jUuOXtETHSiDEpEy1AamgByH9C+uKpra0Hp62ARoxNDmYIj08Opo8ADucEioaNTeALJxCd6s3gDCTgUc8pGoIPAqKAbUsfG1RqYWVhwV2EA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 处理原型版的<code>Person</code>会很吃力，但对基于类的版本只需极少量类型标注就能完美理解。如果你不熟悉类语法，TypeScript 会实时指导你正确使用。</p><p>对于使用旧式类写法的代码，TypeScript 语言服务提供了&quot;转换为 ES2015 类&quot;的快速修复功能（见图 10-1），能极大加速转换过程。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506102223163.png" alt="Figure 10-1. The TypeScript language service offers a quick fix to convert older-style classes to ES2015 classes."></p><h3 id="其他现代-javascript-特性" tabindex="-1">其他现代 JavaScript 特性 <a class="header-anchor" href="#其他现代-javascript-特性" aria-label="Permalink to &quot;其他现代 JavaScript 特性&quot;">​</a></h3><p>虽然采用 ES 模块和类对 TypeScript 迁移帮助最大，但 JavaScript 每年都在更新，掌握这些特性能让代码更简洁地道（自然也就更符合 TypeScript 风格）。以下列出关键特性，不熟悉的建议主动学习：</p><h4 id="基础优化" tabindex="-1">基础优化 <a class="header-anchor" href="#基础优化" aria-label="Permalink to &quot;基础优化&quot;">​</a></h4><ul><li><strong>变量声明</strong>：用<code>let</code>/<code>const</code>替代<code>var</code>。<code>var</code>的作用域规则反直觉（详见《Effective JavaScript》），直接弃用更省心</li><li><strong>循环</strong>：用<code>for-of</code>或<code>map</code>等数组方法替代 C 风格<code>for(;;)</code>。传统循环易出错且不兼容迭代器（参见第 17 条），对象遍历技巧见第 60 条</li></ul><h4 id="异步与函数" tabindex="-1">异步与函数 <a class="header-anchor" href="#异步与函数" aria-label="Permalink to &quot;异步与函数&quot;">​</a></h4><ul><li><strong>异步处理</strong>：用<code>async/await</code>替代回调或裸<code>Promise</code>（详见第 27 条）</li><li><strong>箭头函数</strong>：比<code>function</code>更简洁且自动绑定<code>this</code>（第 69 条详解<code>this</code>绑定规则）</li><li><strong>默认参数</strong>：直接在声明处写<code>param=123</code>，TypeScript 还能据此推断参数类型</li></ul><h4 id="数据结构与操作" tabindex="-1">数据结构与操作 <a class="header-anchor" href="#数据结构与操作" aria-label="Permalink to &quot;数据结构与操作&quot;">​</a></h4><ul><li><strong>对象简写</strong>：用<code>{x}</code>替代<code>{x: x}</code>，变量命名更一致</li><li><strong>解构赋值</strong>：用<code>[x,y] = pair</code>提取数组/对象值，与 TypeScript 元组类型绝配</li><li><strong>集合类型</strong>：用<code>Map</code>/<code>Set</code>替代普通对象实现关联数组，避免<code>constructor</code>等原型属性冲突</li></ul><h4 id="空值处理" tabindex="-1">空值处理 <a class="header-anchor" href="#空值处理" aria-label="Permalink to &quot;空值处理&quot;">​</a></h4><ul><li><strong>可选链</strong>：用<code>x?.y</code>替代<code>x &amp;&amp; x.y</code>，安全访问可能为<code>null</code>的属性或方法（如<code>fn?.()</code>）</li><li><strong>空值合并</strong>：用<code>??</code>替代<code>||</code>。<code>x || 10</code>在<code>x=0</code>时会误判，而<code>x ?? 10</code>能准确识别<code>null/undefined</code></li></ul><h4 id="其他" tabindex="-1">其他 <a class="header-anchor" href="#其他" aria-label="Permalink to &quot;其他&quot;">​</a></h4><ul><li><strong>严格模式</strong>：无需手动写<code>&quot;use strict&quot;</code>。TypeScript 生成的模块代码会自动添加，且类型检查比严格模式更严格</li></ul><h3 id="持续跟进新特性" tabindex="-1">持续跟进新特性 <a class="header-anchor" href="#持续跟进新特性" aria-label="Permalink to &quot;持续跟进新特性&quot;">​</a></h3><p>TC39（JavaScript 标准委员会）每年都会新增特性。TypeScript 团队承诺支持所有进入 Stage 3 阶段的提案，因此你甚至无需等待正式发布。当前值得关注的提案：</p><ul><li><strong>管道操作符</strong>（Pipeline）</li><li><strong>记录与元组</strong>（Records &amp; Tuples）</li></ul><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li><strong>环境无关的现代 JS</strong>：TypeScript 让你无视运行时环境限制，尽享新特性红利，同时提升代码质量与类型推断</li><li><strong>迁移两大核心</strong>：优先采用<strong>ES 模块</strong>和<strong>类</strong>语法</li><li><strong>用 TS 学 JS</strong>：通过 TypeScript 的类型提示学习类、解构、<code>async/await</code>等特性</li><li><strong>追踪动态</strong>：关注<a href="https://github.com/tc39/proposals" target="_blank" rel="noreferrer">TC39 GitHub</a>和 TypeScript 更新日志</li></ul>`,45)]))}const g=i(e,[["render",p]]);export{c as __pageData,g as default};
