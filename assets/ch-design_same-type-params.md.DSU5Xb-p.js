import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const E=JSON.parse('{"title":"第 38 条：避免重复的同类型参数","description":"","frontmatter":{},"headers":[],"relativePath":"ch-design/same-type-params.md","filePath":"ch-design/same-type-params.md"}'),h={name:"ch-design/same-type-params.md"};function p(l,s,e,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="第-38-条-避免重复的同类型参数" tabindex="-1">第 38 条：避免重复的同类型参数 <a class="header-anchor" href="#第-38-条-避免重复的同类型参数" aria-label="Permalink to &quot;第 38 条：避免重复的同类型参数&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Avoid writing functions that take consecutive parameters with the same TypeScript type.</li><li>Refactor functions that take many parameters to take fewer parameters with distinct types, or a single object parameter.</li><li>避免编写接受连续具有相同 TypeScript 类型的参数的函数。</li><li>重构接受多个参数的函数，使其接受较少的参数且具有不同的类型，或者将这些参数合并为一个单一的对象参数。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>这个函数调用到底做了什么？</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAEwE4EMDuAlAptACgA8AuRMEAWwCNdUAaRATzIprsc1atocQAtu7PnAAO6CDCgtyPOgEpEAbwBQiRAHoNiAHR6VAXxVoseQgCYArI0sAGRgHZriAIy37r+QG4VQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果不去看函数的参数列表，你根本没法确定它的作用。下面是几种可能的解释：</p><ul><li>它绘制了一个宽 75、高 100 的矩形，左上角在 (25, 50)，不透明度为 1.0；</li><li>它绘制了一个从 (25, 50) 到 (75, 100) 的对角矩形，线宽为 1 像素；</li></ul><p>没有更多上下文，你很难判断这个函数是否被正确调用。而且因为所有参数类型都是 <code>number</code>，如果你把顺序搞错了，或者把宽高当成了坐标传进去，类型检查器也帮不了你。</p><p>假设这是它的函数声明：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">w</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/GYVwdgxgLglg9mABAEwE4EMDuAlAptACgA8AuRMEAWwCNdUAaRATzIprsc1atocQAtu7PnAAO6CDCgtyPOgEpEAbwBQiRAHoNiAHR6VAXxVA" target="_blank" rel="noreferrer">💻 playground</a></p><p>任何接受一串相同类型参数的函数都容易出错，因为类型检查器无法发现参数顺序搞错的问题。改进的方法之一是将参数封装成不同的类型，比如 <code>Point</code> 和 <code>Dimension</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  height</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">topLeft</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">size</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">opacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnltPEmQARYFQggAzsHQhcTAO7AAJmAAWbanSiNCqiMADmqsBo7bueGBRAIw02Uqhx5AJQi2AFGHQAHADIQMCZomOAANMhSAF4QZCJikvYRvojAYKzkmtAAlHKEAPT5yAB0pRZAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>因为这个函数现在接收的是三个参数，并且它们分别属于三种不同的类型，类型检查器就能区分它们了。如果你错误地传入了两个 <code>Point</code> 类型的参数，编译器就会报错：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                        ~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Argument ... is not assignable to parameter of type &#39;Dimension&#39;.</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnltPEmQARYFQggAzsHQhcTAO7AAJmAAWbanSiNCqiMADmqsBo7bueGBRAIw02Uqhx5AJQi2AFGHQAHADIQMCZomOAANMhSAF4QZCJikvYRvojAYKzkmtAAlHKEAPT5yAB0pRaOzm6eOKTIAEwArBEZDQAMXBE1ZADsTSxkAIyt7REDxa3ZjIWEM7Nz87MAfnjTAIJQBtTi2KXFyMAS5OjYcBJSBiBwNAA2KN7IPnBOYpBQyOgwyOk+KADk8eIpDJfsU8EA" target="_blank" rel="noreferrer">💻 playground</a></p><p>另一种解决方案是把所有参数合并到一个对象里：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DrawRectParams</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> extends</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Point</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Dimension</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  opacity</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DrawRectParams</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">drawRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, width: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">75</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, height: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, opacity: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> })</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHtRmQbwFDLIAeAXMiAK4C2ARtANwHICeZltDeAvnltPEmQARYFQggAzsHQhcTAO7AAJmAAWbanSiNCqiMADmqsBo7buvcP0QohUOPIBKEBGFRx7VCcghFIIJW8MLAAaYVFxKRk5QnQAB0RgMFZyTU4eGAoQV2lZJXsnFzAACgTPCTI7B2dXd3KASlxkAHoAKmQAOi7kVubkHjx86qLinFJkACYAVjCUqYAGMMUVdWQAdhnkPUNjMgBGecXkeMTk-Y75rnrGIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>把函数改成接受一个对象而不是一堆位置参数，可以让代码更清晰易懂。给每个数字都加上名字，类型检查器也能更好地帮你发现调用错误。</p><p>随着代码演进，函数的参数可能会越来越多。即使一开始位置参数没问题，参数多了之后它们就会变成麻烦。俗话说：“一个函数有 10 个参数，说明设计肯定有问题。”当函数参数超过 3、4 个时，就应该考虑重构减少参数数量。（TypeScript ESLint 的 <code>max-params</code> 规则可以帮你检测这个）</p><p>参数类型相同的时候，更要警惕位置参数带来的问题，哪怕只有两个参数也可能出错。</p><p>当然，这条规则有几个例外：</p><ul><li>如果参数是可交换的（顺序无所谓），比如 <code>max(a, b)</code> 和 <code>isEqual(a, b)</code>，就没问题，调用很明确。</li><li>如果参数有“自然顺序”，混淆的可能性会降低，比如 <code>array.slice(start, stop)</code> 比 <code>slice(stop, start)</code> 更合理。但也别太绝对，不同开发者对“自然顺序”的理解可能不同（比如日期是“年-月-日”，还是“月-日-年”）。</li></ul><p>正如 Scott Meyers 在《Effective C++》里写的：“让接口使用起来既简单又不容易出错。”这话没毛病！</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>避免写接受一串相同 TypeScript 类型参数的函数。</li><li>参数多时，重构成参数更少、类型不同的参数，或者用一个对象参数。</li></ul>`,30)]))}const A=i(h,[["render",p]]);export{E as __pageData,A as default};
