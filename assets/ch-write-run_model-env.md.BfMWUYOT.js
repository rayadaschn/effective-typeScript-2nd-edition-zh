import{_ as i,c as a,o as t,ag as n}from"./chunks/framework.D53w8jfx.js";const c=JSON.parse('{"title":"Item 76: Create an Accurate Model of Your Environment","description":"","frontmatter":{},"headers":[],"relativePath":"ch-write-run/model-env.md","filePath":"ch-write-run/model-env.md"}'),e={name:"ch-write-run/model-env.md"};function p(l,s,h,k,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="item-76-create-an-accurate-model-of-your-environment" tabindex="-1">Item 76: Create an Accurate Model of Your Environment <a class="header-anchor" href="#item-76-create-an-accurate-model-of-your-environment" aria-label="Permalink to &quot;Item 76: Create an Accurate Model of Your Environment&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Your code runs in a particular environment. TypeScript will do a better job of checking your code if you create an accurate static model of that environment.</li><li>Model global variables and libraries that are loaded onto a web page along with your code.</li><li>Match versions between type declarations and the libraries and runtime environment that you use.</li><li>Use multiple <em>tsconfig.json</em> files and project references to model distinct environments within a single project (for example client and server).</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>正如 Item 3 所解释的，你的 TypeScript 代码最终会被转换为 JavaScript 并执行。更具体地说，它会在特定的运行时（V8、JavaScriptCore、SpiderMonkey）中，在特定的环境（浏览器中的网页、Node.js 中的测试运行器、Deno、Electron 等）中执行。</p><p>为了让 TypeScript 静态地建模你的代码的运行时行为，它需要该环境的模型。配置 TypeScript 项目时，你的主要目标之一是确保这个模型尽可能准确。你对运行时环境的建模越准确，TypeScript 在发现代码错误方面就越有效。</p><p>例如，你生成的 JavaScript 可能在浏览器中运行，它被包含在 HTML 页面中：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>TypeScript 为你提供了几种建模方式。一种是通过 <code>tsconfig.json</code> 中的 <code>lib</code> 设置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;compilerOptions&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;lib&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;es2021&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>通过在 <code>lib</code> 中包含 <code>&quot;dom&quot;</code>，我们告诉 TypeScript 它应该包含浏览器的类型声明。<code>&quot;es2021&quot;</code> 表示我们期望浏览器对该年 JavaScript 标准中的所有内容都有内置支持（无论是原生支持还是通过 polyfill）。使用更新版本的功能（例如 <code>array.toSorted()</code>）将导致类型错误。你可能不知道每个 ECMAScript 版本中具体有哪些功能，但 TypeScript 知道。通过创建准确的环境模型，它可以帮助你捕获这种特定的错误。</p><p>你还可以通过安装 <code>@types/web</code> 包来建模 Web 浏览器中可用的类型，这让你对版本控制有更多的控制权。Item 75 对 TypeScript 和 DOM 有更多说明。</p><p>你的 <code>&lt;script&gt;</code> 标签可能不是页面上唯一的标签。也许你的 HTML 实际上看起来像这样：</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  window.userInfo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jane Doe&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, accountId: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123-abc&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://code.jquery.com/jquery-3.7.1.min.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ... load Google Analytics ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;path/to/bundle.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><p>每个 <code>&lt;script&gt;</code> 标签都以某种方式修改环境，添加对你的代码可用的全局变量。为了确保准确的类型检查，你需要告诉 TypeScript 关于它们的信息。</p><p>你可以使用类型声明文件来建模 <code>userInfo</code> 全局变量：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// user-info-global.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserInfo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  accountId</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> global {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Window</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    userInfo</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UserInfo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYDwDg9gTgLgBAbwL4CgD0a4FcDOwoC0AlgHYBmEBA5gDYQBGAhjQHQAmLMOKpM+ZjAMbA4AVTxQAkuQiIUcOCUYBbYAC44OGFFJUA3PLhDBELCRiS2GrTpL6UqNsEE1GUEbQbM5C3vyEiAOqkbBAA7j4K2BLSFBri+LEQBgqoqEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你可以通过安装它们的类型声明来建模库：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/google.analytics</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/jquery</span></span></code></pre></div><p>为了获得准确的模型，<code>@types</code> 包必须建模你在页面上引用的库版本，这一点至关重要。有关如何匹配这些内容的更多信息，请参阅 Item 66。如果你搞错了，TypeScript 可能会报告虚假错误或遗漏一些真正的错误。</p><p>也许你正在使用 webpack 打包代码，它允许你直接从 JavaScript 导入 CSS 和图像文件。这些文件是环境的一部分，但 TypeScript 不知道它们，会报错：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sunrisePath </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./images/beautiful-sunrise.jpg&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Cannot find module &#39;./images/beautiful-sunrise.jpg&#39; or its type declarations.</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYDwDg9gTgLgBAbwL4CgCWBbSs4GcCuAdlGrsAAoCGMAFnAGZQQZwDkAdAPSaUDmwuTgCNglfDDT18AGwC0BYqWDsAVmF6sA3Ck6c4+g4aPG4AP3MXLV6zcs69AYUqFCEePTSEAJnAwQvMsBsXDz8giJiElJyCiRkquqscNBwaDC4cDAAnmBBXsAAxtKUUNRoEIS47ChAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为了让这个工作，你需要建模这些类型的导入：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// webpack-imports.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> module</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;*.jpg&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> src</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEHcFMCMAcEMDGBrAtASwLawPYCcAXAZwDoATE4gKDMkQBt49JRMcyBXelgcgCoSAK1gBzHqADeVUKEQ4AdkQKgieRAC4VBPOnkiA3NNCQAHrkKhaAM3hdlqxIYC+VIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>webpack 实际上允许你从 CSS 模块导入特定的 CSS 规则。如果你使用此功能，你需要将其添加到模型中或安装为你执行此操作的 npm 包之一。</p><p>你的应用程序的不同部分可能在不同的环境中运行。例如，你的应用可能有在浏览器中运行的客户端代码和在 Node.js 下运行的服务器代码，更不用说在自身环境中运行的测试代码。由于这些是不同的环境，你会想要分别建模它们。通常的方法是使用多个 <code>tsconfig.json</code> 文件和项目引用，这在 Item 78 中讨论。</p><p>与浏览器一样，确保你准确建模 Node.js 环境。如果你使用 Node.js 版本 20 运行代码，请确保安装该版本的 <code>@types/node</code>。这将确保你只使用运行时可用的库功能。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>你的代码在特定环境中运行。如果你创建该环境的准确静态模型，TypeScript 将更好地检查你的代码。</li><li>建模与你的代码一起加载到网页上的全局变量和库。</li><li>匹配类型声明与你使用的库和运行时环境之间的版本。</li><li>使用多个 <code>tsconfig.json</code> 文件和项目引用来建模单个项目内的不同环境（例如客户端和服务器）。</li></ul>`,32)]))}const E=i(e,[["render",p]]);export{c as __pageData,E as default};
