import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D53w8jfx.js";const d=JSON.parse('{"title":"第 4 条：熟悉结构化类型","description":"","frontmatter":{},"headers":[],"relativePath":"ch-intro/structural.md","filePath":"ch-intro/structural.md"}'),t={name:"ch-intro/structural.md"};function p(k,s,l,e,r,g){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="第-4-条-熟悉结构化类型" tabindex="-1">第 4 条：熟悉结构化类型 <a class="header-anchor" href="#第-4-条-熟悉结构化类型" aria-label="Permalink to &quot;第 4 条：熟悉结构化类型&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>理解 JavaScript 是鸭子类型（duck typed），而 TypeScript 使用结构化类型来模拟这一点：符合接口的值可能还包含接口中未声明的其他属性。类型并不是“封闭”的。</li><li>注意<strong>类</strong>也遵循结构化类型规则。你拿到的实例可能并不是你预期的那个<strong>类</strong>的实例。</li><li>利用结构化类型的特性，有助于单元测试的编写与执行。</li></ul><blockquote><p>鸭子类型（英语：duck typing）在程序设计中是动态类型的一种风格。在这种风格中，一个对象有效的语义，不是由继承自特定的类或实现特定的接口，而是由“当前方法和属性的集合”决定。</p><p>这个概念的名字来源于由詹姆斯·惠特科姆·莱利提出的鸭子测试： “当看到一只鸟走起来像鸭子、游泳起来像鸭子、叫起来也像鸭子，那么这只鸟就可以被称为鸭子。”</p></blockquote><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><h3 id="javascript-的-鸭子类型-与-typescript-的结构类型系统" tabindex="-1">JavaScript 的“鸭子类型”与 TypeScript 的结构类型系统 <a class="header-anchor" href="#javascript-的-鸭子类型-与-typescript-的结构类型系统" aria-label="Permalink to &quot;JavaScript 的“鸭子类型”与 TypeScript 的结构类型系统&quot;">​</a></h3><p>JavaScript 提倡“<strong>鸭子类型（duck typing）</strong>”：如果一个值具有正确的属性，函数就会接受它，而不关心它的来源。TypeScript 通过<strong>结构类型系统（structural typing）</strong> 来建模这种行为。</p><p>但这有时会导致意想不到的结果，因为 TypeScript 的类型检查可能比你的预期更宽松或严格。理解<strong>结构类型系统</strong>可以帮助你更好地理解 TypeScript 的错误（或非错误），并编写更健壮的代码。</p><p>假设你现在正在开发一个 tsScript 库，需要定义一个二维向量类型 <code>Vector2D</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>并编写一个函数来计算它的长度:</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector2D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">**</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>现在定义命名向量的概念：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4hIA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>calculateLength</code> 函数可以用于 <code>NamedVectors</code>，因为它们具有数值类型的 <code>x</code> 和 <code>y</code> 属性。TypeScript 足够智能，可以推断出这一点。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NamedVector</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Pythagoras&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK, result is 5</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4hBEkKyJpM7LyMAuQAXmJKGgBmABpW5AAWWZLsmgByAAVOHTgNHDg3VeQBdhl5RWUINU0dAwTyAHp75AB5AGlZ6zdFMGRgN2QAKwkIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>有趣的是，你从未显式声明 <code>Vector2D</code> 和 <code>NamedVector</code> 之间的关系，也不需要为 <code>NamedVector</code> 额外编写 <code>calculateLength</code> 的实现。TypeScript 的类型系统模拟了 JavaScript 的运行时行为（参见第 1 条），它允许 <code>calculateLength</code> 被 <code>NamedVector</code> 调用，因为它的结构与 <code>Vector2D</code> 兼容。这正是“结构化类型”（structural typing）这个术语的由来。</p><p>但这也可能带来问题。假设你添加了一个 3D 向量类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  z</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4k8Gh4JDQMAoBmQlI6tr5mjm4G8ZaALzGmxJIgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>并编写一个函数来对它们进行归一化（使它们的长度为 1）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateLength</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x: v.x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y: v.y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    z: v.z </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4k8Gh4JDQMAoBmQlI6tr5mjm4G8ZaALzGmxOFRcUlaHAY5YFmIAyN+nCGLEelJCuRZdS1tZABeaTkFJVUrnQMEqxs7KRPRyL9kAB6C6vbQAGg45CmURiwMumh0EPI5Hm-1mQJBCPBHAESyAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果调用这个函数，你可能会得到一个长度大于 1 的向量：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> normalize({x: 3, y: 4, z: 5})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{ </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">x:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.6,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> y:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 0.8,</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> z:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span></span></code></pre></div><p>这个向量的长度大约是 1.4，而不是 1。那么问题出在哪里，为什么 TypeScript 没有捕获这个错误呢？</p><p>问题在于 <code>calculateLength</code> 处理的是 2D 向量，而 <code>normalize</code> 处理的是 3D 向量。因此，在归一化过程中，<code>z</code> 分量被忽略了。</p><p>更令人惊讶的是，TypeScript 的类型检查器并没有捕获这个问题。</p><p>为什么你可以用 3D 向量调用 <code>calculateLength</code>，尽管它的类型声明表明它只接受 2D 向量？</p><p>在 <code>NamedVector</code> 中发挥作用的结构化类型检查机制，在这里却导致了问题。当 <code>calculateLength</code> 被传入一个 <code>{x, y, z}</code> 对象时，并不会抛出错误。因此，TypeScript 的类型检查器也不会报错，而这种行为最终导致了一个 bug。</p><p>（如果你希望 TypeScript 抛出错误，你可以选择一些方法。第 63 条介绍了一种技巧，可以专门禁止 <code>z</code> 属性，而第 64 条展示了如何使用“类型标记”（branding）来完全避免这种结构化类型检查。）</p><p>在编写函数时，你可能会假设它们的参数只包含你声明的属性，而不会有额外的属性。这种假设被称为“封闭”（closed）、“封装”（sealed）或“精确”（precise）类型，但 TypeScript 的类型系统无法表达这种约束。不管你是否喜欢，你的类型都是“开放的”。</p><p>这有时会带来一些意想不到的问题：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateLengthL1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> axis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keys</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v)) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> coord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v[axis]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //            ~~~~~~~ Element implicitly has an &#39;any&#39; type because ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    //                    &#39;string&#39; can&#39;t be used to index type &#39;Vector3D&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    length </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(coord)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> length</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4k8Gh4JDQMAoBmQlI6tr5mjm4G8ZaALzGmxOFRcUlaHAY5YFmIAyN+nCGLEelJCuRZdS1tZABeaTkFJVUrnQMEqxs7KRPRyL9kAB6C6vbQAGg45CmURiwMumh0EPI5Hm-1mQJBCPBHAESxEYjAEikMnkimUEDUWJUAEY9n0TFAjkUQWBMdc7sgAAwtGA4ZC6BBnVlwCjANzILAwZAAeSYACt+i4ANYQThud7HSGnEDnQU4HIc-QAbRFYoAui1yIDgcjbbaAH6Op325AAUUu2XAyGADAADrJgAhgGBZDFtHBxXApAByKOcaPIMCcX0oFgyOhuFAubNa612-MF8jRipVTQJmQgaOsljIDO5RNYb0gHIQfxJlPIaP5Q74aNa+HssL3Jw6FxwJjqvVQHIfchCcjWWz2Nk6JZAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为什么这是一个错误？因为 <code>axis</code> 是 <code>v</code>（一个 <code>Vector3D</code> 类型）的键之一，它应该是 &quot;x&quot;、&quot;y&quot; 或 &quot;z&quot; 中的一个。而根据 <code>Vector3D</code> 的声明，这些应该都是<strong>数字类型</strong>，那么 <code>coord</code> 的类型可能并不是 <code>number</code>。</p><p>因为在上一段的逻辑假设 <code>Vector3D</code> 是封闭的，不包含其他属性。但实际上它可能有其他属性：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> vec3D</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { x: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, y: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, z: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, address: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;123 Broadway&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">calculateLengthL1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vec3D) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK, returns NaN</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lATAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubZIC+JGHRCZgWEMgRwANgjqy4kADIQQAczAALABQA3Gukw4CASmIcoEMHShSAssu0A6AM4BHKGAMuKyACoA5FxkAGpkfRdOQODcM3YhUEhYRBQAOTgGCAATY2woS3IQLIgaNzAoUA12cmpaRhYoWq4eRv4k8Gh4JDQMAoBmQlI6tr5mjm4G8ZaALzGmxOFRcUlaHAY5YFmIAyN+nCGLEelJCuRZdS1tZABeaTkFJVUrnQMEqxs7KRPRyL9kAB6C6vbQAGg45CmURiwMumh0EPI5Hm-1mQJBCPBHAESxEYjAEikMnkimUEDUWJUAEY9n0TFAjkUQWBMdc7sgAAwtGA4ZC6BBnVlwCjANzILAwZAAeSYACt+i4ANYQThud7HSGnEDnQU4HIc-QAbRFYoAui1yIDgcjbbaAH6Op325AAUUu2XAyGADAADrJgAhgGBZDFtHBxXApAByKOcaPIMCcX0oFgyOhuFAubNa612-MF8jRipVTQJmQgaOsljIDO5RNYb0gHIQfxJlPIaP5Q74aNa+HssL3Jw6FxwJjqvVQHIfchCcjWWz2Nk6JaCnWs-QYIYcoj1AZg1rIAAsh9R1MPcByOWsbjcNGj1NwA2QACEoFgrwB3ODx3EkEknnJSlrhpAxt3wBIrWBaUAGlD0Xb5xUydISCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>因为 <code>v</code> 可能包含任何属性，所以 <code>axis</code> 的类型是 <code>string</code>。TypeScript 没有理由相信 <code>v[axis]</code> 是数字，因为正如你刚才看到的，它可能不是数字。（这里的 <code>vec3D</code> 变量避免了过度属性检查，这在第 11 条中讨论。）</p><p>遍历对象的类型可能很难正确处理。我们将在第 60 条中再次讨论这个话题，但在这种情况下，没有循环的实现会更好：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> calculateLengthL1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Vector3D</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">abs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v.z)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgGoQWA9lAzAEWQG8AoZZADwC5kQBXAWwCNoBuM5ATxvubY4BePRiyjsAviRh0QmYFhDIEcADYI6KuJAAyEEAHMwAC20BGABQA3Gukw4CASmIcoEMHSiKAslqMA6OCYAZys-CicAamQfYwDg0M5I6N84kMs-AQcJEiA" target="_blank" rel="noreferrer">💻 playground</a></p><p>值得注意的是，结构化类型也可能在类的使用中带来意外的结果，因为类是通过结构进行可赋值性比较的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmallNumContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`You gave me \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">} but I want something 0-9.\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.num </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> num</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmallNumContainer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SmallNumContainer</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { num: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2024</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK!</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDKC2YQgHIFd4GED2A7ALmAJa4CmATtAN4BQ00uGAXAxgEYUDcd0weE+cmmD5s5ABSN4LKR3IBKaj3pEAZtEkZoAHmgAGaAB9DreNAB8AXmgBGPYtr0n0fAAty2AO4NS3gKLkHhIABgCa2GjQAOZgAG6k0PAJACRUUgC+0Gxo+NAAktCeYATQENhJbiRR+gC0AJwAdMHyytDprZUQDVLQ1lLc9O3tNHy4AtBgvT7eCEioGDgExGQSAKzy3KPjbCyzyOhYeIQkFFNUpiwATHqXACxtnPQA9E-QAPIA0gCENEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为什么 <code>b</code> 可以赋值给 <code>SmallNumContainer</code>？因为它有一个 <code>num</code> 属性，且类型是 <code>number</code>。所以它们的结构是匹配的。如果你写一个假设 <code>SmallNumContainer</code> 构造函数中的验证逻辑已经执行过的函数，这可能会导致问题。对于具有更多属性和方法的类，虽然这种问题发生的概率较低，但它与 C++ 或 Java 等语言不同，在这些语言中，声明一个参数为 <code>SmallNumContainer</code> 类型可以保证它要么是 <code>SmallNumContainer</code> 本身，要么是它的子类，因此构造函数中的验证逻辑肯定已经执行。</p><p>结构化类型在编写测试时是有利的。假设你有一个在数据库上运行查询并处理结果的函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAuthors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PostgresDB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorRows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`SELECT first, last FROM authors\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authorRows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ first: row[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], last: row[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHsDOYDmUKYAiAQsgN4BQyyUAriAIq3QCeAXMgBSYCOANh2xRQOAJTIAvAD5kcECwDaAXQDcFAL4VQkWIhQBBWmAAW6KOSrIYwKNkFhhIHGup84d5EJFrNMegjBgdBBkHAgwQxMzTE4AEzgwOAAjdwgODGw8AhJRDkjTKGULagRg7FkjAoAldAB3TElkeMSUzAgAOjpGZigWTgADAGUAUQAZYYBhABUrG2wAGmQ3coAxKoB5AFkKqNt+0RcacNooELhKsxr69oBbOAAHTig6yRlOMmtbMA5n2oUABiUi2W3xodQUAEYlOpRAcNBQgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为了测试上述代码，你可以创建一个模拟的 PostgresDB。但一种更简单的方法是使用结构化类型，定义一个更狭窄的接口：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  runQuery</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAuthors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">database</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> DB</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Author</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authorRows</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> database.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">runQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`SELECT first, last FROM authors\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> authorRows.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">row</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ({ first: row[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], last: row[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHsDOYDmUKYAiAQsgN4BQyyUAriAIq3QCeAXMgBSYCOANh2xRQOAJTIAvAD5kcECwDaAXQDcFAL4VQkWIhQBBWmAAW6KOSrIYwKNkFhhIHGup84d5EJFrN26PCRkEgtqOkZmKHYuXgFPBxFxaVl5ZR8KGHoEMGB0EGQcCDBDEzNMTgATODA4ACN3CA4SUQ5i0yhlEOQEXOxZIzaAJXQAd0xJZErquswIADowplZOAAMAZQBRABl1gGEAFSsbbAAaZDdegDEBgHkAWT6S22XRFxpC2ig8uH6zIdHZgC2cAADpwoCNJDJOGRrLYwBxwcMFAAGJSnc7wmgjBQARiU6lELw0FCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>由于结构化类型的原因，你仍然可以在生产环境中将 <code>PostgresDB</code> 传递给 <code>getAuthors</code>，因为它有一个 <code>runQuery</code> 方法。<code>PostgresDB</code> 不需要声明它实现了 <code>DB</code>，TypeScript 会推断出它确实实现了。</p><p>在编写测试时，你可以传递一个更简单的对象：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getAuthors&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> authors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getAuthors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    runQuery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sql</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Toni&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Morrison&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maya&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Angelou&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  })</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(authors).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { first: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Toni&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, last: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Morrison&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { first: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Maya&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, last: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Angelou&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgAoHsDOYDmUKYAiAQsgN4BQyyUAriAIq3QCeAXMgBSYCOANh2xRQOAJTIAvAD5kcECwDaAXQDcFAL4VQkWIhQBBWmAAW6KOSrIYwKNkFhhIHGup84d5EJFrN26PCRkEgtqOkZmKHYuXgFPBxFxaVl5ZR8KGHoEMGB0EGQcCDBDEzNMTgATODA4ACN3CA4SUQ5i0yhlEOQEXOxZIzaAJXQAd0xJZErquswIADowplZOAAMAZQBRABl1gGEAFSsbbAAaZDdegDEBgHkAWT6S22XRFxpC2ig8uH6zIdHZgC2cAADpwoCNJDJOGRrLYwBxwcMFAAGJSnc7wmgjBQARiU6lELw0FEg2E4AHICkUfrZyadOIkZJRqN0QL1vo8xhJ8oVWqVoZZQvRFpFuPx7I4xJ1qKF3p9kAoFOS9rlgHTkOTbmZhJhcuS0QrNXAWHB1eT9E4IHx0LR9apBchNNQCa8IAAPYEQLKcDltTCiWZgdDrHi0OB8TgKB0wo6Y5Wq9UYjia7XAXUgcnqY7R2EeI0mxPuOMWgrW21O5BKIkuihAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 会验证我们的测试数据库是否符合接口。而且你的测试不需要了解任何关于生产数据库的内容：无需使用模拟库！通过引入抽象（<code>DB</code>），我们将逻辑（和测试）与特定实现（<code>PostgresDB</code>）的细节解耦。</p><p>结构化类型的另一个优点是，它可以干净地切断库之间的依赖关系。有关更多内容，请参见第 70 条。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>理解 JavaScript 是鸭子类型（duck typed），而 TypeScript 使用结构化类型来模拟这一点：符合接口的值可能还包含接口中未声明的其他属性。类型并不是“封闭”的。</li><li>注意<strong>类</strong>也遵循结构化类型规则。你拿到的实例可能并不是你预期的那个<strong>类</strong>的实例。</li><li>利用结构化类型的特性，有助于单元测试的编写与执行。</li></ul>`,65)]))}const A=i(t,[["render",p]]);export{d as __pageData,A as default};
