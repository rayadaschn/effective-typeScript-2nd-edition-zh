import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.D53w8jfx.js";const E=JSON.parse('{"title":"Item 72: 优先使用 ECMAScript 特性而非 TypeScript 特性","description":"","frontmatter":{},"headers":[],"relativePath":"ch-write-run/avoid-non-ecma.md","filePath":"ch-write-run/avoid-non-ecma.md"}'),t={name:"ch-write-run/avoid-non-ecma.md"};function h(l,s,e,k,r,d){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="item-72-优先使用-ecmascript-特性而非-typescript-特性" tabindex="-1">Item 72: 优先使用 ECMAScript 特性而非 TypeScript 特性 <a class="header-anchor" href="#item-72-优先使用-ecmascript-特性而非-typescript-特性" aria-label="Permalink to &quot;Item 72: 优先使用 ECMAScript 特性而非 TypeScript 特性&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>总的来说，你可以通过移除代码中的所有类型来将 TypeScript 转换为 JavaScript。</li><li>枚举、参数属性、三斜杠导入、实验性装饰器和成员可见性修饰符是这条规则的历史例外。</li><li>为了尽可能清晰地保持 TypeScript 在代码库中的作用，并避免未来的兼容性问题，请避免使用非标准特性。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>TypeScript 和 JavaScript 之间的关系随着时间的推移而改变。当微软在 2010 年首次开始开发 TypeScript 时，围绕 JavaScript 的主流态度是它是一门有问题的语言，需要被修复。框架和源码到源码编译器为 JavaScript 添加缺失的特性（如类、装饰器和模块系统）是很常见的。TypeScript 也不例外。早期版本包含了自制的类、枚举和模块版本。</p><p>随着时间的推移，管理 JavaScript 的标准机构 TC39 将这些相同的特性添加到了核心 JavaScript 语言中。而他们添加的特性与 TypeScript 中存在的版本不兼容。这让 TypeScript 团队陷入了尴尬的困境：采用标准中的新特性还是维护现有代码？</p><p>TypeScript 在很大程度上选择了前者，并最终阐明了其当前的治理原则：TC39 定义运行时，而 TypeScript 仅在类型空间中进行创新。</p><p>在这个决定之前还有一些剩余的特性。识别和理解这些特性很重要，因为它们不符合语言其余部分的模式。一般来说，我建议避免使用它们，以尽可能清晰地保持 TypeScript 和 JavaScript 之间的关系。这也将确保你的代码与替代的 TypeScript 编译器兼容，并且不会因为未来的标准对齐而破坏。</p><p>如果你遵循这个建议，你可以将 TypeScript 视为&quot;带类型的 JavaScript&quot;。</p><h3 id="枚举" tabindex="-1">枚举 <a class="header-anchor" href="#枚举" aria-label="Permalink to &quot;枚举&quot;">​</a></h3><p>许多语言使用枚举或 enums 来建模可以取一小部分值的类型。TypeScript 将它们添加到 JavaScript 中：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flavor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Vanilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Chocolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Strawberry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> flavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flavor.Chocolate</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  ^? let flavor: Flavor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flavor </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Autocomplete shows: Vanilla, Chocolate, Strawberry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Flavor[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Value is &quot;Vanilla&quot;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYOwrgtgBAYgNgQwG4HsBOUDeAoKUBqCIAlnIlALxQAMANLlAMIAWKAxiogC7CVQCM9PAGUuaBAHcARsDRoAnnwBM9AL7ZscYFygAzRKgxV4ydADoW7Tgh4BubAHoHeAHoB+KFp37TaAFywBugaJoZ4TlAAgmBcVhAADl68AM6sEskBhCRkCLRMrBzcwHmi4tKyCtih6ADa1AC64c6EcGC8xMlQAERZpIhd2EA" target="_blank" rel="noreferrer">💻 playground</a></p><p>支持枚举的论点是它们比裸数字提供更多的安全性和透明度。但 TypeScript 中的枚举有一些怪癖。实际上有几种枚举变体，它们都有微妙的不同行为：</p><ul><li><strong>数字值枚举</strong>（如 Flavor）：数字类型可以赋值给它，所以不是很安全。（这样设计是为了使位标志结构成为可能。）</li><li><strong>字符串值枚举</strong>：这确实提供了类型安全，并且在运行时也有更多信息性的值。但它不是结构类型化的，与 TypeScript 中的每个其他类型不同（稍后会详细介绍）。</li><li><strong>const enum</strong>：与常规枚举不同，const 枚举在运行时完全消失。如果你在前面的例子中改为 <code>const enum Flavor</code>，编译器会将 <code>Flavor.Chocolate</code> 重写为 <code>1</code>。这也打破了我们对编译器行为的期望，并且仍然存在字符串和数字值枚举之间的不同行为。</li><li><strong>设置了 preserveConstEnums 标志的 const enum</strong>：这会为 const 枚举发出运行时代码，就像常规枚举一样。</li></ul><p>字符串值枚举是名义类型化的，这特别令人惊讶，因为 TypeScript 中的每个其他类型都使用结构类型化进行可赋值性（Item 4）：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flavor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Vanilla</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vanilla&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Chocolate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;chocolate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  Strawberry</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;strawberry&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> favoriteFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Flavor.Chocolate </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Type is Flavor</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">favoriteFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;strawberry&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~~~~~~~~~~~ Type &#39;&quot;strawberry&quot;&#39; is not assignable to type &#39;Flavor&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYOwrgtgBAYgNgQwG4HsBOUDeAoKUBqCIAlnIlALxQDkSRpi1ANLlAMIAWKAxiogC7BKNbl14DgzVgGV+aBAHcARsDRoAnsOoBnOYpVr1UgL7ZscYPygAzZOmKD4djFSeo0AOk48+CQQG48AHogqAAVdQAHIWJtWER3bFt3B2A3dC1deWVVDWp-bBCoAD9SsvLi8KihagAiLP1c9VrqKFioEBQrBG1tYgBzEAQlCyh+FDHqmnS0amwgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>当你发布库时，这会产生影响。假设你有一个接受 Flavor 的函数：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> scoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">flavor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flavor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYOwrgtgBAYgNgQwG4HsBOUDeAoKUBqCIAlnIlALxQDkSRpi1ANLlAMIAWKAxiogC7BKNbl14DgzVgGV+aBAHcARsDRoAnsOoBnOYpVr1UgL7ZscYPygAzZOmKD4djFSeo0AOk48+CQQG48AHogqAAVdQAHIWJtWER3bFt3B2A3dC1deWVVDWp-bBCoAD9SsvLi8KihagAiLP1c9VrqKFioEBQrBG1tYgBzEAQlCyh+FDHqmnS0aiSwEG5+YhQQKG1eFEiACmsE9AAueOcASiwoIIAqKA9bqEvQ0yA" target="_blank" rel="noreferrer">💻 playground</a></p><p>因为 Flavor 在运行时实际上只是一个字符串，你的 JavaScript 用户用字符串调用它是可以的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;vanilla&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ~~~~~~~~~ &#39;&quot;vanilla&quot;&#39; is not assignable to parameter of type &#39;Flavor&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Flavor } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ice-cream&#39;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">scoop</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Flavor.Vanilla) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYWwDg9gTgLgBAbwM4GMITAXzgMyhEOAcmBQFMBaFKMgQxCIG4AoVdMACiIDdaA7YABtBtIgEoWAeklxZcAH6KlS4gCJeA4bVVE4wJHD4R4tJEmABzPrQBGgsnBgQ4YWlHpkYZKHAg5HAJ5gDkQAYiLc0ETMzKCQsIjhtJFQ2HgExKSU1HQMLGwYHEkpAHQAavxCIhKy0nAA8gDSzEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>JavaScript 和 TypeScript 用户的这种不同体验是避免字符串值枚举的原因。</p><p>TypeScript 提供了枚举的替代方案，这在其他语言中不太常见：字面量类型的联合。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flavor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vanilla&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;chocolate&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;strawberry&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> favoriteFlavor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Flavor</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;chocolate&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">favoriteFlavor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;americone dream&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~~~~~~~~~~~ Type &#39;&quot;americone dream&quot;&#39; is not assignable to type &#39;Flavor&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/C4TwDgpgBAYgNgQwG4HsBOUC8UDkSEB2AlnIjlAD64DGAFitSosBOVTgM7BoIDuARhDRoQOANwAoCXAjAoAM2ToiLeErQAuWIlQZsOOgyYIW4qFAD0FqAHkA0hMW6VENbqy4EAWyFFGBaAATNAhvcQkrKAA-GNi4qKgAFXBoHAAib19-IJDvNPIiDigCFDkEDg4iAHMCBH4ZKGAURpTcN3QcCSA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这提供了与枚举一样的安全性，并且具有更直接地转换为 JavaScript 的优势。它还在你的编辑器中提供自动完成功能，如图 9-1 所示。</p><p><img src="https://cdn.jsdelivr.net/gh/rayadaschn/blogImage@master/img/202506240838026.png" alt="图 9-1. TypeScript 为字符串字面量类型的联合提供自动完成。"></p><p>关于字符串字面量类型联合的更多信息，请参见 Item 35。</p><p>那么像我们最初定义的 Flavor 这样的数字枚举呢？如果你有选择，强烈考虑使用字符串作为你的值。数字枚举不提供你期望的安全性，而且它们比字符串更难处理。你更愿意在 JavaScript 调试器或网络请求中看到 <code>{&quot;flavor&quot;: 1}</code> 还是 <code>{&quot;flavor&quot;: &quot;chocolate&quot;}</code>？</p><h3 id="参数属性" tabindex="-1">参数属性 <a class="header-anchor" href="#参数属性" aria-label="Permalink to &quot;参数属性&quot;">​</a></h3><p>在初始化类时，将构造函数参数分配给属性是很常见的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAKCmAnCB7AdtA3gKGtNYAtvAFzQQAuiAlmgOYDcu0w6liArsBSogBQFiZdrToBKLMzwUAFtQgA6QfGgBefEXhM8AX2x6gA" target="_blank" rel="noreferrer">💻 playground</a></p><p>TypeScript 为此提供了更紧凑的语法：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAKCmAnCB7AdtA3gKGtY6EALogK7BEqIAUADqQEYgCWw0aYAtvAFzTGJmaAOYBKLAF9sUoA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这被称为&quot;参数属性&quot;，它与第一个例子中的代码等价。使用参数属性时需要注意几个问题：</p><ul><li>它们是少数在编译为 JavaScript 时生成代码的构造之一（枚举是另一个）。通常，编译只涉及擦除类型。</li><li>因为参数只在生成的代码中使用，源代码看起来有未使用的参数。</li><li>参数和非参数属性的混合可以隐藏类的设计。</li></ul><p>例如：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  first</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  last</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.first, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.last] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">split</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39; &#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAKCmAnCB7AdtA3gKGtAZgJbIAuAXNBCYoWgOYDcu04VFVN9Tew6HArsBIpEACgAO-AEYhCwaGjABbeO2q06ASizM8AbRIALQhAB0RUgBpoRk6dYkAutAC8C5fFMRxskqIDk0P6a3NAAvtgRQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个类有三个属性（first、last、name），但这很难从代码中读出来，因为只有两个在构造函数之前列出。如果构造函数还接受其他参数，这会变得更糟。</p><p>如果你的类只包含参数属性而没有方法，你可以考虑将其设为接口并使用对象字面量。记住，由于结构类型化（Item 4），两者可以相互赋值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jed Bartlet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> jed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Person</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PersonClass</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Jed Bartlet&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// also OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAKCmAnCB7AdgYXFaBvAUNNMOhAC6ICuwZKiAFAA6UBGIAlsNGmALbwAuaOUTs0AcwCUeAL745JNOWiMhCZOiyQYAXjzc+g6AHIAUvAAm0AEJhEZEPDLHoMgNxEA9J+gB5ANL4+GJkSABmYMDwcEioaHiEBvxCImLibvL4isoAVpZqsejQemjwAO4xGpjYEPRmljZ2Dk7Gkh7Q3tBgIKh+gUA" target="_blank" rel="noreferrer">💻 playground</a></p><p>关于参数属性的意见存在分歧。虽然我通常避免使用它们，但其他人欣赏节省的按键。要注意，它们不符合 TypeScript 其余部分的模式，实际上可能会对新开发者隐藏这种模式。尽量避免在参数和非参数属性的混合背后隐藏类的设计。</p><h3 id="命名空间和三斜杠导入" tabindex="-1">命名空间和三斜杠导入 <a class="header-anchor" href="#命名空间和三斜杠导入" aria-label="Permalink to &quot;命名空间和三斜杠导入&quot;">​</a></h3><p>在 ECMAScript 2015 之前，JavaScript 没有官方的模块系统。不同环境以不同方式添加了这个缺失的特性：Node.js 使用 <code>require</code> 和 <code>module.exports</code>，而在浏览器中，AMD 系统使用带有回调的 <code>define</code> 函数。</p><p>TypeScript 也用自己的模块系统填补了这个空白。这是使用 <code>module</code> 关键字和&quot;三斜杠&quot;导入完成的。在 ECMAScript 2015 添加了官方模块系统后，TypeScript 添加了 <code>namespace</code> 作为 <code>module</code> 的同义词，以避免混淆：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// other.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">namespace</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEHsBcAsFMCcB0kDOAoAdgQwLaxQA5YDGsoAZuOKAN5qiiwAeB48kFArhsZAJbgMoAEZZ4ACgCUtAL5o5QA" target="_blank" rel="noreferrer">💻 playground</a></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// index.ts</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/// &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">reference</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> path</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;other.ts&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEEsDsBMFMA8B0AXAzgKBGAPAJ1gGaz6QDGsoADgIbIAWAvAEQD29xKqTwAfOgSxaIARtVwAKAJQBudEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>在类型声明文件之外，三斜杠导入和 <code>module</code> 关键字只是一个历史奇观。在你自己的代码中，你应该使用 ECMAScript 2015 风格的模块（<code>import</code> 和 <code>export</code>）。</p><h3 id="实验性装饰器" tabindex="-1">实验性装饰器 <a class="header-anchor" href="#实验性装饰器" aria-label="Permalink to &quot;实验性装饰器&quot;">​</a></h3><p>装饰器可用于注释或修改类、方法和属性。如果一个符号前面有 <code>@</code> 符号，那么它就是一个装饰器。它们在 Angular 和其他几个框架中很常见。</p><p>2015 年，TypeScript 添加了对装饰器草稿提案的支持，以支持 Angular。这被 <code>--experimentalDecorators</code> 标志控制。</p><p>八年后，在 2023 年，装饰器提案以非常不同的形式达到了第 3 阶段。你可以使用标准装饰器，无需任何标志。以下是 ECMAScript 标准装饰器的样子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  greeting</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">message</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @logged </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &lt;-- this is the decorator</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Hello, \${</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logged</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">originalFn</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">context</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ClassMethodDecoratorContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Calling \${</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">String</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">context</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> originalFn.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Greeter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Dave&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">greet</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Logs:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Calling greet</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Hello, Dave</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEDiBOBTRAXR9oG8BQ1oHMlUBLAO3wC5oIV4z8BuXaYAe1JvgFdgVX4AFAFtEUMPkRVO9AJRZmeFAAtiEAHSFkKetAC80EWIlM8AX2YABEK3wSAJngD0j6AB4AtO+jLV0X8sRoO0Q2eDA+eGZNVAE5HDw8JBQueFJoAAMACUQQawAaaAASTB91aO1yU3STaHNzbAAzLlJeYnZoa1tEOwF+YnwyMBAAMVIqMFIATwK2UjQADxQqAGFwKABZVCVWOwAREP5w-mX2BZQ45iSUtKaW7XYBUvGpgrU3sHh8CGfJgG0AXQuCRY7AgrBAiDUnQE6WWQxAOmKAGVaPQBLMzmpSGARDIqjIaolUNdoH0BtiRqQ1MB4Y8VBBXu9PhACcxTEx6rMwRCoTYBKREAB3OBENCCADkuzAADdEOKZBpRbFWc5oAAZGzfbCquG5HTlbUubK5VgFKWy7BAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>你可以通过检查 <code>tsconfig.json</code> 中的 <code>experimentalDecorators</code> 来判断你使用的是哪个版本的装饰器。如果设置了，那么你使用的是非标准装饰器。</p><p>如果你能够的话，关闭这个设置！但你可能被库或框架强制保持这个设置，至少直到它采用最新标准。</p><p>如果你正在使用 <code>experimentalDecorators</code>，尽量不要通过编写自己的非标准装饰器来加深这个坑。你最终必须将这些迁移到标准版本。</p><p>如果你没有设置这个标志，那么可以随意编写装饰器。只是要记住，装饰器不是所有问题的最佳解决方案，有时会让你的代码更难理解。例如，尽量避免改变方法类型签名的装饰器。</p><h3 id="成员可见性修饰符-private、protected-和-public" tabindex="-1">成员可见性修饰符（Private、Protected 和 Public） <a class="header-anchor" href="#成员可见性修饰符-private、protected-和-public" aria-label="Permalink to &quot;成员可见性修饰符（Private、Protected 和 Public）&quot;">​</a></h3><p>历史上，JavaScript 缺乏使类的属性和方法私有化的方法。通常的解决方法是一个约定，即下划线前缀的字段不是类公共 API 的一部分：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  _private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;secret123&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>但这只是阻止用户访问私有数据。很容易绕过：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">f._private </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &#39;secret123&#39;</span></span></code></pre></div><p>TypeScript 添加了 <code>public</code>、<code>protected</code> 和 <code>private</code> 字段可见性修饰符，它们似乎提供了一些强制执行：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Diary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  private</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> secret</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cheated on my English test&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> diary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Diary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diary.secret</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//    ~~~~~~ Property &#39;secret&#39; is private and only accessible within ... &#39;Diary&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAiCWYBOBPaBvAUNaAHJ8AbmAC4Cm0EZwSZJ0AvNAOTAAWZpZAJtAPYA7aAFs0AUQEBzEPAhto5CCWYBuTAF9MmYIKXRuiVI2gCyAdziGUACgCUag8hQA6KjTqYA9J5w4AfgGB0AAKSHy4ZEgkaMxutMrQsngExOTQYAK8giBoYMDAZFDwAEYgFGbwJGzwQs51LAhOzJhAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但 <code>private</code> 是类型系统的一个特性，正如 Item 3 所解释的，类型系统的所有特性在运行时都会消失。当 TypeScript 将其编译为 JavaScript 时，这个代码片段看起来像这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Diary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.secret </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;cheated on my English test&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> diary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Diary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">diary.secret</span></span></code></pre></div><p><code>private</code> 指示符消失了，你的秘密泄露了！就像 <code>_private</code> 约定一样，TypeScript 的可见性修饰符只是阻止你访问私有数据。你甚至可以使用类型断言或迭代从 TypeScript 内部访问私有属性：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> diary</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Diary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;(diary </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).secret </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(diary))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// logs [[&quot;secret&quot;, &quot;cheated on my English test&quot;]]</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAiCWYBOBPaBvAUNaAHJ8AbmAC4Cm0EZwSZJ0AvNAOTAAWZpZAJtAPYA7aAFs0AUQEBzEPAhto5CCWYBuTAF9MwQUujdEqRtAFkA7nAMoAFAEo1V-cjSRoYAShsA6KjTo4A9P7QAPIA0phaOnwgZJ4gfJJWwQBGAFbUJJ5kAiQEZBAOljZ2mIHQ8ZIwANpVAEQ+tCS1ADTQteyc5LyCIuJSMnIK+U0AuiOYQA" target="_blank" rel="noreferrer">💻 playground</a></p><p>ES2022 正式添加了对私有字段的支持。与 TypeScript 的 <code>private</code> 不同，ECMAScript 的 <code>private</code> 在类型检查和运行时都强制执行。要使用它，在类属性前加上 <code>#</code>：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PasswordChecker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  #passwordHash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  constructor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">passwordHash</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#passwordHash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passwordHash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">password</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.#passwordHash</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> checker</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> PasswordChecker</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hash</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s3cret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">checker.#passwordHash</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//      ~~~~~~~~~~~~~ Property &#39;#passwordHash&#39; is not accessible outside class</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//                    &#39;PasswordChecker&#39; because it has a private identifier.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">checker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;secret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">checker.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">checkPassword</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;s3cret&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Returns true</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/MYGwhgzhAEAiCWYBOBPaBvAUNaAHJ8AbmAC4Cm0EZwSZJ0AvNAOTAAWZpZAJtAPYA7aAFs0AUQEBzEPAhto5CCWYBuTAF9M3auFrQAZgFcBwEvEHQ2kNgApyADxIAuSiQJSAlC4GHhAIzIkNVBIGAAFUIB3PiRuAGEOYABrQIxsaABiXCiY7gAJa29fAKDMdOBBJSRDUxibbKho2IK5Iv9AjzScHBI2WQA6LJzm60Y8YfzrNRxNcsSkiMbc+omXKvhPLu7aEkMkISs5FaXYzoZzhT6IQYaIJsm5aehNWYqBJWh2ahSkMYEySLQRZ3XIJb6BGyHWzMCAAZhodGYHg8wXmgRuExabEwAHocd1ugA-Ykk0kkoFIPi4QIkNDMIYnB5sZjQWTQAR8ehgYDAMhQeB+EAUPiGEgQeDaT7gKC4-EE+UKgnMYH3MHJQIsgLAMCGKis+iHaBgPAEYjkVnaARmfTwdGYL7qpD9B0LCY2GHUHZIlQ4PHQABKdD27wMYBAVHtaKdLpVyxh8K9KN9+MDu32MDchjImCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>#passwordHash</code> 属性无法从类外部访问，并且不可枚举。即使对于不原生支持私有字段的目标（ES2021 或更早），也有一个后备实现来保持你的数据私有。ECMAScript 私有字段是标准的、广泛支持的，并且比 TypeScript 的 <code>private</code> 更安全。你应该使用它们。</p><p>那么 <code>public</code> 和 <code>protected</code> 呢？在 JavaScript（和 TypeScript）中，<code>public</code> 是默认可见性，所以不需要显式注释。虽然 <code>private</code> 意味着封装，但 <code>protected</code> 意味着继承。面向对象编程的一般规则是优先使用组合而不是继承，所以 <code>protected</code> 的实际用途相当罕见。</p><p><code>readonly</code> 作为字段修饰符是类型级别的构造，可以安全使用。参见 Item 14。字段可以同时是 <code>#private</code> 和 <code>readonly</code>。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>总的来说，你可以通过移除代码中的所有类型来将 TypeScript 转换为 JavaScript。</li><li>枚举、参数属性、三斜杠导入、实验性装饰器和成员可见性修饰符是这条规则的历史例外。</li><li>为了尽可能清晰地保持 TypeScript 在代码库中的作用，并避免未来的兼容性问题，请避免使用非标准特性。</li></ul>`,88)]))}const c=i(t,[["render",h]]);export{E as __pageData,c as default};
