import{_ as i,c as a,o as n,ag as p}from"./chunks/framework.D53w8jfx.js";const o=JSON.parse('{"title":"第 11 条：区分多余属性检查与类型检查","description":"","frontmatter":{},"headers":[],"relativePath":"ch-types/excess-property-checking.md","filePath":"ch-types/excess-property-checking.md"}'),t={name:"ch-types/excess-property-checking.md"};function h(e,s,l,k,r,g){return n(),a("div",null,s[0]||(s[0]=[p(`<h1 id="第-11-条-区分多余属性检查与类型检查" tabindex="-1">第 11 条：区分多余属性检查与类型检查 <a class="header-anchor" href="#第-11-条-区分多余属性检查与类型检查" aria-label="Permalink to &quot;第 11 条：区分多余属性检查与类型检查&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>当你将一个对象字面量赋值给已知类型的变量，或作为参数传给函数时，TypeScript 会进行多余属性检查（excess property checking）。</li><li>多余属性检查是发现错误的有效手段，但它不同于 TypeScript 通常的结构兼容性检查。如果混淆这两者，会让你更难理解类型赋值的原理。TypeScript 的类型不是“封闭”的。</li><li>注意它的局限性：只要你引入一个中间变量，这种检查就会被绕过。</li><li>“弱类型”是指所有属性都是可选的对象类型。对于这类类型，在进行可赋值性检查时，<strong>要求值中至少要有一个属性与之匹配</strong>。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>当你把一个对象字面量赋值给一个已经声明了类型的变量时，TypeScript 会检查这个对象是否<strong>正好</strong>符合该类型：既要有这个类型要求的属性，也不能多出其他属性。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Room</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  numDoors</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ceilingHeightFt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Room</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  numDoors: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ceilingHeightFt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elephant: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;present&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ~~~~~~~ Object literal may only specify known properties,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //         and &#39;elephant&#39; does not exist in type &#39;Room&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvgToQ1MMij0M2ZAF487GZXQ16ARgA07TjxAChoiVOTmADNaIQuEAA4i4cHoAcl8oCGoIcGDrAHpY5AA-ZJTE5AB5RgArCAQNHkgoOC5kLDgAT2RVLkrqX1zgGEqAaxB0AHcQZDD0eqgwYAi4hKJR0cCAE2Rg7z8A6OQJ9AjidA0IAA9gdWRQZDBy+umdLGD8BTYgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然 <code>elephant</code> 这个属性看起来挺奇怪的，但从结构类型的角度来看（参考第 4 条），这个错误并不太合理。因为这个常量其实是可以赋值给 <code>Room</code> 类型的 —— 你可以通过引入一个中间变量来验证这一点：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> obj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  numDoors: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ceilingHeightFt: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  elephant: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;present&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Room</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvgToQ1MMnSMAVsgC8edjMroa9AIwAadpx4gBQ0RKnJzABmtEIXCAAcRcOD0AOS+UBDUEODB1gpsKmoaUPQY2PqaOixEAPTZyADyANL4QA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>obj</code> 的类型会被推断为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  numDoors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  ceilingHeightFt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: number</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  elephant</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这个类型是 <code>Room</code> 类型的一个“子集”，因为它限制了 <code>elephant</code> 的类型只能是字符串，而 <code>Room</code> 类型允许 <code>elephant</code> 是任何类型。所以它是可以赋值给 <code>Room</code> 的，代码也能通过类型检查。（如果你对“子集”这个术语不熟，可以参考第 7 条）</p><p>那为什么前面那个例子会报错，而这个却没问题呢？这是因为第一个例子触发了一个叫“<strong>多余属性检查</strong>”（excess property checking）的机制。这个机制是为了帮助我们捕捉一些结构类型检查容易漏掉的错误。</p><p>不过，多余属性检查是有局限的，如果把它和普通的类型赋值检查混为一谈，就会让你更难理解结构类型系统的直觉。把多余属性检查当作一个独立的过程来看，会更有助于你建立清晰的 TypeScript 类型系统心智模型。</p><p>正如第 1 条提到的，TypeScript 不只是找那些运行时会报错的代码，它还会找那些<strong>看起来不会错但实际上跟你想要的不一样</strong>的代码。下面就是一个这样的例子：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  title</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  darkMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> createWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (options.darkMode) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setDarkMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createWindow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Spider Solitaire&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ~~~~~~~ Object literal may only specify known properties,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //         but &#39;darkmode&#39; does not exist in type &#39;Options&#39;.</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //         Did you mean to write &#39;darkMode&#39;?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvhgkQCMMHQhk1CGHJwoAawCy6ACYQAFAEo8S0JFiIUAeQAOGrdTzsNYLgh6ajAoPjYic0NTCwgAfnpGTEC4EEVlVXVNbQQoCDhIAHVQc3QAdyt0T2y6ZA8vEGo7AiJgGGRK6u8AOijjM0tm9iJdfWiB6xsI5CUiAHo55G7l-CVc-KKS8qsW5H9A+gByAGV3YEsoZGP0HjA4YDzDgBp2PqMsWPpQkgh8BeQAH5A4EAuqMABWEHUyFu0DgXGQWDgAE9kFouKjqO4oW1UUYQOVtO4oFVoBoINQXv8iDSaYwSGBkIc3h9LIdkKUKcR0IyIAAPYAhZCgPbI7FM+o1Q7dP6LWm08jnZDI9AkRH5bRgdDIMphSBMt4TQ5xVZTfBAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这段代码在运行时不会抛出任何错误，但它很可能不会达到你预期的效果，正如 TypeScript 提到的：应该是 <code>darkMode</code>（大写 M），而不是 <code>darkmode</code>。</p><p>纯粹的结构类型检查器是无法发现这种错误的，因为 <code>Options</code> 类型非常宽泛：它包括所有拥有 <code>title</code> 属性且值为字符串的对象，以及任何其他属性，只要这些属性中没有 <code>darkMode</code> 被设置为非 <code>true</code> 或 <code>false</code> 的值。</p><p>很容易忘记 TypeScript 的类型有多宽泛。以下是一些也可以赋值给 <code>Options</code> 的值：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> HTMLAnchorElement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvhgkQCMMHQhk1CGHJwoAawCy6ACYQAFAEo8S0JFiIUAeQAOGrdTzsNYLgh6ajAoPjYic0NTCwgAfnpGTEC4EEV8BG8wZHQARnoPLxAfAF5kc3QEMghwFiIAenrkVwBpDKycgCYCz01i5DKQCAB3ZH4AFRMAGQBBNRF0KABRQKwasFs65EbmtqA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>document</code> 和 <code>HTMLAnchorElement</code> 的实例都有 <code>title</code> 属性，而且这个属性的类型是字符串，因此这两种赋值是允许的。的确，<code>Options</code> 是一个非常宽泛的类型！</p><p>“多余属性检查”尝试在不妥协类型系统的基本结构性质的情况下，对这些类型进行限制。它通过在上下文中使用声明类型时，禁止在对象字面量中出现未知属性来实现这一点。（因此，它有时被称为“严格对象字面量检查”，或者因为它适用于新创建的对象，也叫“新鲜度检查”）。</p><p>这种上下文可以是赋值给一个声明类型的变量、函数参数，或者返回值为声明类型的函数。由于 <code>document</code> 和 <code>HTMLAnchorElement</code> 不是对象字面量，它们不会触发多余属性检查。但 <code>{title, darkmode}</code> 对象是对象字面量，因此会触发多余属性检查。</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ski Free&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ~~~~~~~~ &#39;darkmode&#39; does not exist in type &#39;Options&#39;...</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvhgkQCMMHQhk1CGHJwoAawCy6ACYQAFAEo8S0JFiIUAeQAOGrdTzsNYLgh6ajAoPjYic0NTCwgAfnpGTEC4EEV8BG8wZHR6Dy8QHwBePGQo4yxY+lCSCAAaZH9A+gByAGUjYGRxKAgIFuQFCKIR0bGRgHoJ5AA-Ofm55Bbyo0rLAfN0CB8QdGyIAA9gEORQRoBPdxQW-M1CloA6J-wgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这就解释了为什么使用一个没有类型注解的中间变量会让错误消失：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> intermediate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ski Free&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> intermediate </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvhgkQCMMHQhk1CGHJwoAawCy6ACYQAFAEo8S0JFiIUAeQAOGrdTzsNYLgh6ajAoPjYic0NTCwgAfnpGTEC4EEV8BG8wZEdoLAhzYDhIZABePGQo4yxY+lCSCAAaZH9A+gByAGUjYGRxKAgIduQFNkyQEOR0eg8vCbKc8DyCosgWIgB6DeRXAGl8IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>虽然第一行右边是一个对象字面量，会触发多余属性检查；但第二行右边是一个中间变量（<code>intermediate</code>），它本身不是字面量，所以不会触发多余属性检查，错误也就消失了。</p><p>同样地，如果你使用类型断言（type assertion），也不会触发多余属性检查：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, title: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;MS Hearts&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgEoHt0FtkG8BQyyIArlgCKZQDOAXMWQEbQDchySwANqAOYASEYLwAWYAGJh6pLMyhsAvvhgkQCMMHQhk1CGHJwoAawCy6ACYQAFAEo8S0JFiIUAeQAOGrdTzsNYLgh6ajAoPjYic0NTCwgAfnpGTEC4EEV8BG8wZHRkAF48ZCjjLFj6UJIIABpkf0D6AHITAGVkQUMwagbkBWQ4Hw8vEGoWIgB6MeRXAGl8IA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这就是为什么更推荐使用类型注解而不是类型断言的一个重要原因（参考第 9 条）。</p><p>如果你确实不想进行这种多余属性检查，可以通过添加索引签名的方式，告诉 TypeScript：这个对象可能会有额外的属性：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  darkMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [otherOptions: string]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> o</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { darkmode: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgPIAczAPYgM7IDeAUMsgCZxQDWAstuRAPwBcyARttgDYRwgBuUsgDa2MAAtoGLLjxs8YKKADmAXTYBXENRDYA7oOIBfYgjlhk2NjJz5kAXiIUq1ALYMIbJZpTGBZAD0gWgA0sRAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>第 16 条会讲到什么时候使用索引签名来表示数据是合适的，什么时候又不合适。</p><p>还有一个相关的检查出现在所谓的“弱类型”中 —— 指的是那些所有属性都是可选的类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LineChartOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  logscale</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  invertedYAxis</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  areaChart</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LineChartOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* ... */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> opts</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { logScale: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(opts)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//         ~~~~ Type &#39;{ logScale: boolean; }&#39; has no properties in common</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//              with type &#39;LineChartOptions&#39;</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgDKggYQBZymAeQAcxgB7EAZ2QG8AoZZAGzIHNKE4mIB+ALmQAjMmW5wQAbgbJQAN2iQAJgE0AggA9glfkJFjJ0vBDg48YHcNHGDAXzowAriASkKyShEIlyVABRlvCkoBdBAsXHxiVyoASlpkAHoAKmQAOnTkJITkOzoEILBkALBqAF54llYAZU5uATAoBxQbKQ8vaMp-EkoYqQTsxkHBgD9R4eQAFQBPIhQAchpmNhquCAFLfQkcueRcahAyZCIoAIVgCGpQZHyAWxuKOn6h5+eAd2AwbGQwGfnQ8LMUR8lDmdCAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>从结构类型的角度来看，<code>LineChartOptions</code> 这样的类型几乎能接受任何对象。</p><p>但对于这种“弱类型”（所有属性都是可选的），TypeScript 会额外做一个检查：<strong>赋值的值类型和声明的目标类型之间，至少要有一个属性是匹配的</strong>。</p><p>这个检查和“多余属性检查”类似，都是为了防止拼写错误、遗漏等问题，不过它并不完全基于结构类型系统。</p><p>不同的是：<br><strong>弱类型检查在所有涉及弱类型的赋值中都会发生</strong>，就算你把对象提取成一个中间变量也不能绕过它。TypeScript 仍然会确保：你传的值至少有一个属性，能和目标类型对得上。</p><div class="note custom-block github-alert"><p class="custom-block-title">NOTE</p><p>在 TypeScript 中，“<strong>弱类型（weak type）</strong>”是一个技术术语，专指<strong>所有属性都是可选的接口类型</strong>。它跟你的类型设计是否优秀没关系，也不是在贬低你的类型。 “弱类型”的对立面也<strong>不是</strong>所谓的“强类型（strong type）”——这个词在 TypeScript 或大多数编程语言里其实并没有明确的定义。</p></div><p>“多余属性检查”是一种有效的手段，用来捕捉拼写错误或属性名写错这类在结构类型系统下本来会被允许的问题。它对包含可选字段的类型（比如 <code>Options</code>）特别有用。但它的适用范围很有限 —— <strong>只对对象字面量生效</strong>。</p><p>理解它的这个限制，并且把“多余属性检查”和普通的“可赋值性检查”区分开，会帮助你更清晰地建立 TypeScript 类型系统的心智模型。</p><p>具体例子可以参考第 61 条，看看“多余属性检查”是如何帮助发现 bug 并启发更好的设计的。</p><h2 id="关键点总结" tabindex="-1">关键点总结 <a class="header-anchor" href="#关键点总结" aria-label="Permalink to &quot;关键点总结&quot;">​</a></h2><ul><li>当你将一个对象字面量赋值给已知类型的变量，或作为参数传给函数时，TypeScript 会进行多余属性检查（excess property checking）。</li><li>这种检查确实能发现很多错误，但它和普通的结构类型检查是两回事。如果你把这两种机制混为一谈，会很难真正理解类型的可赋值性。TypeScript 的类型系统并不是“封闭”的（见第 4 条）。</li><li>注意它的局限性：只要你引入一个中间变量，这种检查就会被绕过。</li><li>“弱类型”是指所有属性都是可选的对象类型。对于这类类型，在进行可赋值性检查时，<strong>要求值中至少要有一个属性与之匹配</strong>。</li></ul>`,53)]))}const c=i(t,[["render",h]]);export{o as __pageData,c as default};
