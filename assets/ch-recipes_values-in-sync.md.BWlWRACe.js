import{_ as i,c as a,o as n,ag as h}from"./chunks/framework.D53w8jfx.js";const d=JSON.parse('{"title":"Item 61: Use Record Types to Keep Values in Sync","description":"","frontmatter":{},"headers":[],"relativePath":"ch-recipes/values-in-sync.md","filePath":"ch-recipes/values-in-sync.md"}'),p={name:"ch-recipes/values-in-sync.md"};function l(k,s,t,e,r,g){return n(),a("div",null,s[0]||(s[0]=[h(`<h1 id="item-61-use-record-types-to-keep-values-in-sync" tabindex="-1">Item 61: Use Record Types to Keep Values in Sync <a class="header-anchor" href="#item-61-use-record-types-to-keep-values-in-sync" aria-label="Permalink to &quot;Item 61: Use Record Types to Keep Values in Sync&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Recognize the fail open versus fail closed dilemma.</li><li>Use ++Record++ types to keep related values and types synchronized.</li><li>Consider using ++Record++ types to force choices when adding new properties to an interface.</li><li>认识到&quot;失败开放&quot;（fail open）与&quot;失败封闭&quot;（fail closed）之间的两难问题。</li><li>使用 <code>Record</code> 类型来保持相关值和类型的同步。</li><li>在向接口添加新属性时，可以考虑使用 <code>Record</code> 类型来强制做出选择。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>假设你正在编写一个用于绘制散点图的 UI 组件。它有几个不同类型的属性来控制其显示和行为：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // The data</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  xs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Display</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  xRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  yRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  color</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Events</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>为了避免不必要的工作，你希望只在需要时重绘图表。更改数据或显示属性将需要重绘，但更改事件处理器则不需要。</p><p>以下是你可能实现这种优化的一种方式：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldProps) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oldProps[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps[k]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (k </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;onClick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FDBCIAhgwDnIxEz4QoasAKqE7JDl2Wt4RMromNgHJM5cIBAA7mdHGFjQdxTdlNQwkcjlYSAxyEWoWLIUDIcKsO6vLihHJ-Iq9f6AqDIOCkIoQBT4GBoB6nAgkeTUajALHlMF3SRFaTIACEPR6ghu5MpkMJhOJXzhtPpAHIcvlCkVud0oBAwEIoCBkLEhBACYSJtQFcgRWKJch4IZiLKKBMgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>（关于此循环中 <code>keyof</code> 断言的解释，请参见第 60 条。这个断言是安全的，因为我们不关心值的类型，只关心它们是否相等。）</p><p>当你或同事添加新属性时会发生什么？<code>shouldUpdate</code> 函数将在属性发生变化时重绘图表。你可能会称这种方法为保守的或&quot;失败开放&quot;（fail open）方法。好处是图表总是看起来正确。缺点是它可能被绘制得太频繁。</p><p>&quot;失败封闭&quot;（fail closed）方法可能看起来像这样：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldProps.xs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.xs </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldProps.ys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.ys </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldProps.xRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.xRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldProps.yRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.yRange </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    oldProps.color </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps.color</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // (no check for onClick)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FDBCIAhgwDnIxEz4QoasAKqE7JDl2Wt4RMromNgHJM5cIBAA7mdHGFjQdxTdlNRQEGBCUCDIu9TUcKsO4AOl4yAAhD0eoIbqDwQAfBFcQH7AgkEFKSHQ2G3dHETGkJEo5BA+HeWzYmFXPGHMEUlDEgGktF0hQMqm40HsqyUpkAsn4kFhCJQTk00EiyIk7TlED4ZAIFjFZAwSKkvIFYqdLidcYUIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>使用这种方法不会有任何不必要的重绘，但可能会有一些必要的绘制被遗漏。优化中的一个重要原则是&quot;首先，不要造成伤害&quot;。我们不应该为了性能而牺牲正确的行为。</p><p>两种方法都不理想。你真正想要的是在添加新属性时强制你的同事或未来的自己做出决定。你可能会尝试添加注释：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  xs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  ys</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">index</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // Note: if you add a property here, update shouldUpdate!</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FKDY8EhoGFjQeESklNS8De4aiso1UiG09AB0x9l5BcVlyJUbtcj1HU3ILW03Xb0DQyOJB8gAcviQATAGB3fBCZBwVisCHIQgEQjQMAKZAsKAQVxCQjsSDIYhMMGGVgAVSxmAgAEIKBMgA" target="_blank" rel="noreferrer">💻 playground</a></p><p>但你真的期望这会起作用吗？如果类型检查器能为你强制执行这一点会更好。</p><p>如果你设置得当，它可以做到。关键是使用具有正确键集的 <code>Record</code> 类型：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> REQUIRES_UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xs: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ys: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  xRange: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  yRange: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  color: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  onClick: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> shouldUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">oldProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">newProps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> kStr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> oldProps) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> k</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> kStr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (oldProps[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newProps[k] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> REQUIRES_UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[k]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">      return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FGEgMcjmyQCKAKoAknOoAPqLODoAggzJAuYQYVCsADxFEAr4MGgYWNB4RMSuYvjhEFYDPeRmyrFCCDORT-KCA4HUCxWWwCAFArzQ3xwiHIMIRKLIZHZPIFYoCeCGYjwsaaGBCEAIMDAHLIYhMfBCQysRaEdiQcrZJlPEgCdCYbDcl5cEAQADugt59wFBBIFG6lGoMEiyHKUxmRVQsWQoGQ4VYgvlXFCOXVvWQGq1cFIl2utz5D1wMuI8mo1GAt3KesFkiK0mQAEIej8ReKnT6-QAyCOzBYrNabbZ7ZLhw2u11QCBgIRQECYsEQF2uibUYvIDNZnPIAlE8YUIA" target="_blank" rel="noreferrer">💻 playground</a></p><p><code>keyof ScatterProps</code> 注解告诉类型检查器 <code>REQUIRES_UPDATE</code> 应该具有与 <code>ScatterProps</code> 相同的所有属性。关键的是，这些都是必需的属性。</p><p>现在如果将来你向 <code>ScatterProps</code> 添加新属性：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  onDoubleClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FKDY8EhoGFjQeESklEn0AHSb2SA6+EJihhD5haUV3f2Dw6MUE0A" target="_blank" rel="noreferrer">💻 playground</a></p><p>那么这将在 <code>REQUIRES_UPDATE</code> 的定义中产生错误：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> REQUIRES_UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //  ~~~~~~~~~~~~~~~ Property &#39;onDoubleClick&#39; is missing in type ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FKDY8EhoGFjQeESklEn0AHSb2SA6+EJihhD5haUV3f2Dw6MUE2EgMcjmyQCKAKoAkk+oAPqvODoAQQYyQE5ggYSgrAAPEUIAp8DA5phsEsSK4xPhwhArAMeuQtPRkAA-Emksnk5Co6BgBTIADkOV2+0Ox2KdOQ+mQIn0xHiHJAyBphBQm3WBOQuQA8gBZHBfVBmZSxIQQZyKJVQFVq6gWKy2ATK1VePW+Q3a5BhCJRQWao3UHKsooCeCGYh22j0ZIAOR0N00QA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这肯定会强制解决这个问题！删除或重命名属性也会导致类似的错误。这是过度属性检查（第 11 条）在起作用，它让我们强制执行对象具有我们想要的属性集，不多不少。TypeScript 在经典的失败开放/失败封闭两难问题中给了我们第三个选择，即&quot;直接失败&quot;。</p><p>重要的是我们在这里使用了具有布尔值的对象。如果我们使用数组：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PROPS_REQUIRING_UPDATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">keyof</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ScatterProps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;xs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;ys&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYOwLgpgTgZghgYwgAgMoLmSUAKUD2ADgM7IDeAUMsgPQ3IAqAFigCaZxXIAexAXMhABXALYAjaAG0AugG4uAT36DREqDPlc6yACLBihADZwFXbgCU4IAOYQBk4eOgAaFU6hzFlm3eQPVLm5qntQI+Ib4UALEYFCg1prU2gCiAG4Q4MRc+CAAwobACADWAPwCABTcAo5qrgrVAVCuoKwQVUHQAJTIALwAfMip+MCs8gC+FKDY8EhoGFjQeESklEn0AHSb2SA6+EJihhD5haUV3f2Dw6MUE2EgMcg45gDyOKgA+ubJAIoAqgCS5n+ADkAOLvX44HQAQQYyQqRQgCnwMDmmGwSxInRkvT8XAA5Lx8c4CUpiVoNltPEA" target="_blank" rel="noreferrer">💻 playground</a></p><p>那么我们将被迫进入同样的失败开放/失败封闭选择。</p><p>如果你希望一个对象具有与另一个对象完全相同的属性，那么 Record 和映射类型是理想的。在这里我们用它来避免经典的失败开放/失败封闭两难问题，但还有许多其他应用，例如要求应用程序状态中的每个属性都有对应的 URL 参数。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>认识到&quot;失败开放&quot;（fail open）与&quot;失败封闭&quot;（fail closed）之间的两难问题。</li><li>使用 <code>Record</code> 类型来保持相关值和类型的同步。</li><li>在向接口添加新属性时，可以考虑使用 <code>Record</code> 类型来强制做出选择。</li></ul>`,39)]))}const A=i(p,[["render",l]]);export{d as __pageData,A as default};
