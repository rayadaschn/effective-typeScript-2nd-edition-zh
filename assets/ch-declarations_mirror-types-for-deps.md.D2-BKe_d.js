import{_ as i,c as a,o as n,ag as t}from"./chunks/framework.D53w8jfx.js";const o=JSON.parse('{"title":"Item 70: Mirror Types to Sever Dependencies","description":"","frontmatter":{},"headers":[],"relativePath":"ch-declarations/mirror-types-for-deps.md","filePath":"ch-declarations/mirror-types-for-deps.md"}'),e={name:"ch-declarations/mirror-types-for-deps.md"};function p(h,s,l,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="item-70-mirror-types-to-sever-dependencies" tabindex="-1">Item 70: Mirror Types to Sever Dependencies <a class="header-anchor" href="#item-70-mirror-types-to-sever-dependencies" aria-label="Permalink to &quot;Item 70: Mirror Types to Sever Dependencies&quot;">​</a></h1><h2 id="要点" tabindex="-1">要点 <a class="header-anchor" href="#要点" aria-label="Permalink to &quot;要点&quot;">​</a></h2><ul><li>Avoid transitive type dependencies in published npm modules.</li><li>Use structural typing to sever dependencies that are nonessential.</li><li>Don&#39;t force JavaScript users to depend on <code>@types</code>. Don&#39;t force web developers to depend on Node.js.</li><li>避免在发布的 npm 模块中出现传递类型依赖。</li><li>使用结构化类型来切断非必要的依赖。</li><li>不要强迫 JavaScript 用户依赖 <code>@types</code>，也不要强迫 web 开发者依赖 Node.js。</li></ul><h2 id="正文" tabindex="-1">正文 <a class="header-anchor" href="#正文" aria-label="Permalink to &quot;正文&quot;">​</a></h2><p>假设你编写了一个用于解析 CSV 文件的库。它的 API 很简单：你传入 CSV 文件的内容，然后得到一个将列名映射到值的对象列表。</p><p>为了方便你的 Node.js 用户，你允许内容既可以是字符串，也可以是 Node.js Buffer：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// parse-csv.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }[] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contents </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;object&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // It&#39;s a buffer</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(contents.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEAcEMCcGcFMC0BjWA3AdAF1gKAJYC24A9tFqAN4BCArgGb3zQC+o90JhoA5AHYkAJvABcAIwZNoPANy5c9Wn2RZ8JPhBgIAwgGUAagApk6rPD44RoWFmj4+Ac1AAfUHUbMAlFcoBtEwA2tIR8VjZ2jgC6Ybb2Diy+kaBUuMn49KCGWACe4PAkGSYW5jigALwVvCRiAFbwKjyeKcnJIKAAklg8sKCQoBIe0Kkt0PBYtNAaUHDwekZFZhaw2CS6sY6GPLRY9AAcjZ5yySzDbdoA8gCyAAoASgCiurrDo+OToIlHoG33AHIAIrgTrggA" target="_blank" rel="noreferrer">💻 playground</a></p><p>Buffer 的类型定义来自 Node.js 类型声明，你必须安装它：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --save-dev</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> @types/node</span></span></code></pre></div><p>这里我们遵循了第 65 条的建议，将 <code>@types</code> 作为开发依赖而不是生产依赖。</p><p>当你发布你的 CSV 解析库时，你使用 <code>--declaration</code> 生成类型声明并将其打包。生成的 <code>.d.ts</code> 文件如下所示：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// parse-csv.d.ts</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}[]</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PTAEAcEMCcGcFMC0BjWA3AdAEwwF1gFACWAtuAPbS6gDeoAQgK4Bmz80oAvqM9OSaADkAO3JZ4ALgBGLNtEEBuAvAAeFKqHHIANjHg9Gw5LiLlhEGAgDCAZQBqACmRnc8YfgmhYuaEWEBzUAAfBll2AEpPGgJQWNAAbWdtRhJhT29fAIBddJ8-fyVOeKylIA" target="_blank" rel="noreferrer">💻 playground</a></p><p>如果你采用这种方法，你的库的 JavaScript 用户会很高兴，但 TypeScript web 开发者不会。你会收到他们的投诉，说他们从你的库中得到了错误：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Cannot find module &#39;node:buffer&#39; or its corresponding type declarations.</span></span></code></pre></div><p>因为我们将 <code>@types/node</code> 作为 devDependency，所以它不会随我们的包一起安装，即使我们的类型（作为我们包的一部分）依赖于它。</p><p>那么我们应该将 <code>@types/node</code> 作为生产依赖吗？这会让错误消失，但现在你可能会收到另一组投诉：</p><ul><li>JavaScript 开发者会想知道这些他们依赖的 <code>@types</code> 模块是什么。</li><li>TypeScript web 开发者会想知道为什么他们要依赖 Node.js。</li><li>使用不同版本 Node.js 的 TypeScript 开发者会想知道为什么他们有重复的类型定义。</li></ul><p>这些投诉是合理的。Buffer 行为不是必需的，只对已经在使用 Node.js 的用户相关。而 <code>@types/node</code> 中的声明只对同时使用 TypeScript 的 Node.js 用户相关。<code>@types/node</code> 包不小（近 10 万行代码），我们的库只使用了其中很小的一部分。</p><p>TypeScript 的结构化类型（第 4 条）可以帮助你摆脱困境。与其使用来自 <code>@types/node</code> 的 Buffer 声明，你可以只写你需要的方法和属性。在这种情况下，只是一个可以接受编码的 toString 方法：</p><hr><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CsvBuffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  contents</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CsvBuffer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">column</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }[] {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYDwDg9gTgLgBASwHY2FAZgQwMbDgYQGcA3AIQFd1004BvAKDjhggGUYpkBzACmCWwQAJtwD8ALjiEO3AJSTpnJFwDc9AL71QkWHHTkBMBBCRwwmKIWD5WANR6M4glPxiEFM5XAA+BEhSo0enk6AG1BABtyAFskDyUuAF147nVQxKYGJgB6bIIAeQBZAAUAJQBRVlZHKGAYcihTdLUcvPKAOQARDXp6c0trOx4kYAB3OADqKB4AIkiYpABGABp52IAmAB0kYkwIld2I9ZnluBnyGHQAWgAOGdlZFVa4fIBpeiA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个接口比完整的接口短得多，但它确实捕获了我们对 Buffer 的（简单）需求。在 Node.js 项目中，用真实的 Buffer 调用 parseCSV 仍然可以，因为类型是兼容的：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;column1,column2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">val1,val2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// OK</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/KYDwDg9gTgLgBASwHY2FAZgQwMbDgYQGcA3AIQFd1004BvAKDjhggGUYpkBzACmCWwQAJtwD8ALjiEO3AJSTpnJFwDc9AL71QkWHHTkBMBBCRwwmKIWD5WANR6M4glPxiEFM5XAA+BEhSo0enk6AG1BABtyAFskDyUuAF147nVQxKYGJgB6bIIAeQBZAAUAJQBRVlZHKGAYcihTdLUcvPKAOQARDXp6c0trOx4kYAB3OADqKB4AIkiYpABGABp52IAmAB0kYkwIld2I9ZnluBnyGHQAWgAOGdlZFVa4fIBpeiA" target="_blank" rel="noreferrer">💻 playground</a></p><p>再次查看 CsvBuffer 接口，它没有任何特定于 CSV 文件的内容。给它一个更&quot;结构化&quot;的名称可以强化这一点：</p><hr><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/** Anything convertible to a string with an encoding, e.g. a Node buffer. */</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> interface</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringEncodable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/PQKhAIEEDsE8BcAWBLaBzcBjA9tAbgKYBO8yARgDYHjzbgCG4AzvEahgO7JIPTgHQcAE3YAafgDo0EhuABy2IdTIBXAGZriMkMABQBAB4AHbCXCp4xNfUzUAyq3YBRQYvqVqAb13ga2B2zoABQCwuwA-ABczI7oAJTRLIFoANy6AL66QA" target="_blank" rel="noreferrer">💻 playground</a></p><hr><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Buffer } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;node:buffer&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { parseCSV } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./parse-csv&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">test</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;parse CSV in a buffer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  expect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">parseCSV</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Buffer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;column1,column2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">val1,val2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;utf-8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toEqual</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    { column1: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;val1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, column2: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;val2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p><a href="https://www.typescriptlang.org/play/?ts=5.4.5#code/JYWwDg9gTgLgBAbwEIFcBmaCmUC+c1QQhwDkAdhACaYBcARullCQNwBQoksiYAhlAGdMAYQDKANTwEipAHQB6PoMwBaAMYCAbqzZsYmATAAUJJULhjxcYGTi84DDNhIAaOEYCUcALwA+RGxwcJgAHmCYasaBQXBmIhJGZJgA7nCoTlBGAERqEAA2KCBkAIwuuQVFAEwAOmSavHml9XmVWW5ZKDBoKgAcWR4e0R6yMBAAogCOKA1G0UEA2gjlhSU0pM3FrnDLVWskzZUkOAC6Q+w4HuxAA" target="_blank" rel="noreferrer">💻 playground</a></p><p>这个测试验证了你的代码的运行时行为和 Node Buffer 对 StringEncodable 的可赋值性。测试导入了 <code>node:buffer</code>，但这没关系，因为 <code>@types/node</code> 可以是 devDependency 而不影响你的库的用户。</p><p>如果你的代码开始使用 Buffer 接口的更多方法，那么你还需要将它们添加到你的接口版本中。这可能感觉重复，但正如 Go 语言社区所说，&quot;一点复制比一点依赖更好&quot;。如果你依赖另一个库类型的大部分，你可以选择通过供应商化依赖来正式化这种复制。</p><p>无论如何，通过切断 <code>@types</code> 依赖，你为 JavaScript 和各种 TypeScript 开发者提供了良好的体验。如果 <code>@types</code> 依赖有自己的依赖，那么你可能会切断整个依赖树，这对编译器性能有巨大的积极影响（第 78 条）。</p><p>这种技术也有助于切断单元测试和生产系统之间的依赖。参见第 4 条中的 getAuthors 示例。</p><h2 id="要点回顾" tabindex="-1">要点回顾 <a class="header-anchor" href="#要点回顾" aria-label="Permalink to &quot;要点回顾&quot;">​</a></h2><ul><li>避免在发布的 npm 模块中出现传递类型依赖。</li><li>使用结构化类型来切断非必要的依赖。</li><li>不要强迫 JavaScript 用户依赖 <code>@types</code>，也不要强迫 web 开发者依赖 Node.js。</li></ul>`,40)]))}const E=i(e,[["render",p]]);export{o as __pageData,E as default};
